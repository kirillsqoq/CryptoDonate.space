{
  "version": 3,
  "sources": ["../@react-aria/color/dist/packages/@react-aria/color/src/index.ts", "../@react-aria/color/dist/packages/@react-aria/color/src/useColorArea.ts", "../@react-aria/color/dist/packages/@react-aria/color/intl/*.js", "../@react-aria/color/dist/packages/@react-aria/color/intl/ar-AE.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/bg-BG.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/cs-CZ.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/da-DK.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/de-DE.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/el-GR.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/en-US.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/es-ES.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/et-EE.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/fi-FI.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/fr-FR.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/he-IL.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/hr-HR.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/hu-HU.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/it-IT.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/ja-JP.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/ko-KR.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/lt-LT.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/lv-LV.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/nb-NO.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/nl-NL.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/pl-PL.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/pt-BR.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/pt-PT.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/ro-RO.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/ru-RU.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/sk-SK.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/sl-SI.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/sr-SP.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/sv-SE.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/tr-TR.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/uk-UA.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/zh-CN.json", "../@react-aria/color/dist/packages/@react-aria/color/intl/zh-TW.json", "../@react-aria/color/dist/packages/@react-aria/color/src/useColorAreaGradient.ts", "../@react-aria/color/dist/packages/@react-aria/color/src/useColorSlider.ts", "../@react-aria/color/dist/packages/@react-aria/color/src/useColorWheel.ts", "../@react-aria/color/dist/packages/@react-aria/color/src/useColorField.ts", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/src/index.ts", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/src/Color.ts", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/*.js", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/ar-AE.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/bg-BG.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/cs-CZ.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/da-DK.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/de-DE.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/el-GR.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/en-US.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/es-ES.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/et-EE.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/fi-FI.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/fr-FR.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/he-IL.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/hr-HR.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/hu-HU.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/it-IT.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/ja-JP.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/ko-KR.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/lt-LT.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/lv-LV.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/nb-NO.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/nl-NL.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/pl-PL.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/pt-BR.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/pt-PT.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/ro-RO.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/ru-RU.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/sk-SK.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/sl-SI.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/sr-SP.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/sv-SE.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/tr-TR.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/uk-UA.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/zh-CN.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/intl/zh-TW.json", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/src/useColorAreaState.ts", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/src/useColorSliderState.ts", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/src/useColorWheelState.ts", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/src/useColorFieldState.ts", "../@react-spectrum/color/node_modules/@react-stately/color/dist/packages/@react-stately/color/src/useColor.ts", "../@react-spectrum/color/dist/packages/@react-spectrum/color/src/index.ts", "../@react-spectrum/color/dist/packages/@react-spectrum/color/src/ColorArea.tsx", "../@react-spectrum/color/dist/packages/@react-spectrum/color/src/ColorThumb.tsx", "../@react-spectrum/color/dist/packages/@adobe/spectrum-css-temp/components/colorhandle/vars.css", "../@react-spectrum/color/dist/packages/@adobe/spectrum-css-temp/components/colorloupe/vars.css", "../@react-spectrum/color/dist/packages/@adobe/spectrum-css-temp/components/colorarea/vars.css", "../@react-spectrum/color/dist/packages/@react-spectrum/color/src/ColorWheel.tsx", "../@react-spectrum/color/dist/packages/@adobe/spectrum-css-temp/components/colorwheel/vars.css", "../@react-spectrum/color/dist/packages/@react-spectrum/color/src/ColorSlider.tsx", "../@react-spectrum/color/dist/packages/@adobe/spectrum-css-temp/components/colorslider/vars.css", "../@react-spectrum/color/dist/packages/@react-spectrum/color/src/ColorField.tsx", "../@react-spectrum/color/dist/packages/@react-spectrum/color/src/colorfield.css"],
  "sourcesContent": ["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useColorArea';\nexport * from './useColorSlider';\nexport * from './useColorWheel';\nexport * from './useColorField';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaColorAreaProps, ColorChannel} from '@react-types/color';\nimport {ColorAreaState} from '@react-stately/color';\nimport {focusWithoutScrolling, isAndroid, isIOS, mergeProps, useGlobalListeners, useLabels} from '@react-aria/utils';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport React, {ChangeEvent, HTMLAttributes, InputHTMLAttributes, RefObject, useCallback, useRef} from 'react';\nimport {useColorAreaGradient} from './useColorAreaGradient';\nimport {useKeyboard, useMove} from '@react-aria/interactions';\nimport {useLocale, useMessageFormatter} from '@react-aria/i18n';\nimport {useVisuallyHidden} from '@react-aria/visually-hidden';\n\ninterface ColorAreaAria {\n  /** Props for the color area container element. */\n  colorAreaProps: HTMLAttributes<HTMLElement>,\n  /** Props for the color area gradient foreground element. */\n  gradientProps: HTMLAttributes<HTMLElement>,\n  /** Props for the thumb element. */\n  thumbProps: HTMLAttributes<HTMLElement>,\n  /** Props for the visually hidden horizontal range input element. */\n  xInputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Props for the visually hidden vertical range input element. */\n  yInputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\ninterface ColorAreaAriaProps extends AriaColorAreaProps {\n  /** A ref to the input that represents the x axis of the color area. */\n  inputXRef: RefObject<HTMLElement>,\n  /** A ref to the input that represents the y axis of the color area. */\n  inputYRef: RefObject<HTMLElement>,\n  /** A ref to the color area containing element. */\n  containerRef: RefObject<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a color wheel component.\n * Color wheels allow users to adjust the hue of an HSL or HSB color value on a circular track.\n */\nexport function useColorArea(props: ColorAreaAriaProps, state: ColorAreaState): ColorAreaAria {\n  let {\n    isDisabled,\n    inputXRef,\n    inputYRef,\n    containerRef\n  } = props;\n  let formatMessage = useMessageFormatter(intlMessages);\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let {direction, locale} = useLocale();\n\n  let focusedInputRef = useRef<HTMLElement>(null);\n\n  let focusInput = useCallback((inputRef:RefObject<HTMLElement> = inputXRef) => {\n    if (inputRef.current) {\n      focusWithoutScrolling(inputRef.current);\n    }\n  }, [inputXRef]);\n\n  let stateRef = useRef<ColorAreaState>(null);\n  stateRef.current = state;\n  let {xChannel, yChannel, zChannel} = stateRef.current.channels;\n  let xChannelStep = stateRef.current.xChannelStep;\n  let yChannelStep = stateRef.current.yChannelStep;\n\n  let currentPosition = useRef<{x: number, y: number}>(null);\n\n  let {keyboardProps} = useKeyboard({\n    onKeyDown(e) {\n      // these are the cases that useMove doesn't handle\n      if (!/^(PageUp|PageDown|Home|End)$/.test(e.key)) {\n        e.continuePropagation();\n        return;\n      }\n      // same handling as useMove, don't need to stop propagation, useKeyboard will do that for us\n      e.preventDefault();\n      // remember to set this and unset it so that onChangeEnd is fired\n      stateRef.current.setDragging(true);\n      switch (e.key) {\n        case 'PageUp':\n          stateRef.current.incrementY(stateRef.current.yChannelPageStep);\n          focusedInputRef.current = inputYRef.current;\n          break;\n        case 'PageDown':\n          stateRef.current.decrementY(stateRef.current.yChannelPageStep);\n          focusedInputRef.current = inputYRef.current;\n          break;\n        case 'Home':\n          direction === 'rtl' ? stateRef.current.incrementX(stateRef.current.xChannelPageStep) : stateRef.current.decrementX(stateRef.current.xChannelPageStep);\n          focusedInputRef.current = inputXRef.current;\n          break;\n        case 'End':\n          direction === 'rtl' ? stateRef.current.decrementX(stateRef.current.xChannelPageStep) : stateRef.current.incrementX(stateRef.current.xChannelPageStep);\n          focusedInputRef.current = inputXRef.current;\n          break;\n      }\n      stateRef.current.setDragging(false);\n      if (focusedInputRef.current) {\n        focusInput(focusedInputRef.current ? focusedInputRef : inputXRef);\n        focusedInputRef.current = undefined;\n      }\n    }\n  });\n\n  let moveHandler = {\n    onMoveStart() {\n      currentPosition.current = null;\n      stateRef.current.setDragging(true);\n    },\n    onMove({deltaX, deltaY, pointerType, shiftKey}) {\n      let {\n        incrementX,\n        decrementX,\n        incrementY,\n        decrementY,\n        xChannelPageStep,\n        xChannelStep,\n        yChannelPageStep,\n        yChannelStep,\n        getThumbPosition,\n        setColorFromPoint\n      } = stateRef.current;\n      if (currentPosition.current == null) {\n        currentPosition.current = getThumbPosition();\n      }\n      let {width, height} = containerRef.current.getBoundingClientRect();\n      if (pointerType === 'keyboard') {\n        let deltaXValue = shiftKey && xChannelPageStep > xChannelStep ? xChannelPageStep : xChannelStep;\n        let deltaYValue = shiftKey && yChannelPageStep > yChannelStep ? yChannelPageStep : yChannelStep;\n        if ((deltaX > 0 && direction === 'ltr') || (deltaX < 0 && direction === 'rtl')) {\n          incrementX(deltaXValue);\n        } else if ((deltaX < 0 && direction === 'ltr') || (deltaX > 0 && direction === 'rtl')) {\n          decrementX(deltaXValue);\n        } else if (deltaY > 0) {\n          decrementY(deltaYValue);\n        } else if (deltaY < 0) {\n          incrementY(deltaYValue);\n        }\n        // set the focused input based on which axis has the greater delta\n        focusedInputRef.current = (deltaX !== 0 || deltaY !== 0) && Math.abs(deltaY) > Math.abs(deltaX) ? inputYRef.current : inputXRef.current;\n      } else {\n        currentPosition.current.x += (direction === 'rtl' ? -1 : 1) * deltaX / width ;\n        currentPosition.current.y += deltaY / height;\n        setColorFromPoint(currentPosition.current.x, currentPosition.current.y);\n      }\n    },\n    onMoveEnd() {\n      isOnColorArea.current = undefined;\n      stateRef.current.setDragging(false);\n      focusInput(focusedInputRef.current ? focusedInputRef : inputXRef);\n      focusedInputRef.current = undefined;\n    }\n  };\n  let {moveProps: movePropsThumb} = useMove(moveHandler);\n\n  let currentPointer = useRef<number | null | undefined>(undefined);\n  let isOnColorArea = useRef<boolean>(false);\n  let {moveProps: movePropsContainer} = useMove({\n    onMoveStart() {\n      if (isOnColorArea.current) {\n        moveHandler.onMoveStart();\n      }\n    },\n    onMove(e) {\n      if (isOnColorArea.current) {\n        moveHandler.onMove(e);\n      }\n    },\n    onMoveEnd() {\n      if (isOnColorArea.current) {\n        moveHandler.onMoveEnd();\n      }\n    }\n  });\n\n  let onThumbDown = (id: number | null) => {\n    if (!state.isDragging) {\n      currentPointer.current = id;\n      focusInput();\n      state.setDragging(true);\n      if (typeof PointerEvent !== 'undefined') {\n        addGlobalListener(window, 'pointerup', onThumbUp, false);\n      } else {\n        addGlobalListener(window, 'mouseup', onThumbUp, false);\n        addGlobalListener(window, 'touchend', onThumbUp, false);\n      }\n    }\n  };\n\n  let onThumbUp = (e) => {\n    let id = e.pointerId ?? e.changedTouches?.[0].identifier;\n    if (id === currentPointer.current) {\n      focusInput();\n      state.setDragging(false);\n      currentPointer.current = undefined;\n      isOnColorArea.current = false;\n\n      if (typeof PointerEvent !== 'undefined') {\n        removeGlobalListener(window, 'pointerup', onThumbUp, false);\n      } else {\n        removeGlobalListener(window, 'mouseup', onThumbUp, false);\n        removeGlobalListener(window, 'touchend', onThumbUp, false);\n      }\n    }\n  };\n\n  let onColorAreaDown = (colorArea: Element, id: number | null, clientX: number, clientY: number) => {\n    let rect = colorArea.getBoundingClientRect();\n    let {width, height} = rect;\n    let x = (clientX - rect.x) / width;\n    let y = (clientY - rect.y) / height;\n    if (direction === 'rtl') {\n      x = 1 - x;\n    }\n    if (x >= 0 && x <= 1 && y >= 0 && y <= 1 && !state.isDragging && currentPointer.current === undefined) {\n      isOnColorArea.current = true;\n      currentPointer.current = id;\n      state.setColorFromPoint(x, y);\n\n      focusInput();\n      state.setDragging(true);\n\n      if (typeof PointerEvent !== 'undefined') {\n        addGlobalListener(window, 'pointerup', onColorAreaUp, false);\n      } else {\n        addGlobalListener(window, 'mouseup', onColorAreaUp, false);\n        addGlobalListener(window, 'touchend', onColorAreaUp, false);\n      }\n    }\n  };\n\n  let onColorAreaUp = (e) => {\n    let id = e.pointerId ?? e.changedTouches?.[0].identifier;\n    if (isOnColorArea.current && id === currentPointer.current) {\n      isOnColorArea.current = false;\n      currentPointer.current = undefined;\n      state.setDragging(false);\n      focusInput();\n\n      if (typeof PointerEvent !== 'undefined') {\n        removeGlobalListener(window, 'pointerup', onColorAreaUp, false);\n      } else {\n        removeGlobalListener(window, 'mouseup', onColorAreaUp, false);\n        removeGlobalListener(window, 'touchend', onColorAreaUp, false);\n      }\n    }\n  };\n\n  let colorAreaInteractions = isDisabled ? {} : mergeProps({\n    ...(typeof PointerEvent !== 'undefined' ? {\n      onPointerDown: (e: React.PointerEvent) => {\n        if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) {\n          return;\n        }\n        onColorAreaDown(e.currentTarget, e.pointerId, e.clientX, e.clientY);\n      }} : {\n        onMouseDown: (e: React.MouseEvent) => {\n          if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n            return;\n          }\n          onColorAreaDown(e.currentTarget, undefined, e.clientX, e.clientY);\n        },\n        onTouchStart: (e: React.TouchEvent) => {\n          onColorAreaDown(e.currentTarget, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY);\n        }\n      })\n  }, movePropsContainer);\n\n  let thumbInteractions = isDisabled ? {} : mergeProps({\n    ...(typeof PointerEvent !== 'undefined' ? {\n      onPointerDown: (e: React.PointerEvent) => {\n        if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) {\n          return;\n        }\n        onThumbDown(e.pointerId);\n      }} : {\n        onMouseDown: (e: React.MouseEvent) => {\n          if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n            return;\n          }\n          onThumbDown(undefined);\n        },\n        onTouchStart: (e: React.TouchEvent) => {\n          onThumbDown(e.changedTouches[0].identifier);\n        }\n      })\n  }, keyboardProps, movePropsThumb);\n\n  let isMobile = isIOS() || isAndroid();\n\n  let xInputLabellingProps = useLabels({\n    ...props,\n    'aria-label': isMobile  ? state.value.getChannelName(xChannel, locale) : formatMessage('x/y', {x: state.value.getChannelName(xChannel, locale), y: state.value.getChannelName(yChannel, locale)})\n  });\n\n  let yInputLabellingProps = useLabels({\n    ...props,\n    'aria-label': isMobile ? state.value.getChannelName(yChannel, locale) : formatMessage('x/y', {x: state.value.getChannelName(xChannel, locale), y: state.value.getChannelName(yChannel, locale)})\n  });\n\n  let colorAriaLabellingProps = useLabels(props);\n\n  let getValueTitle = () => {\n    const channels: [ColorChannel, ColorChannel, ColorChannel] = state.value.getColorChannels();\n    const colorNamesAndValues = [];\n    channels.forEach(channel =>\n      colorNamesAndValues.push(\n        formatMessage('colorNameAndValue', {name: state.value.getChannelName(channel, locale), value: state.value.formatChannelValue(channel, locale)})\n      )\n    );\n    return colorNamesAndValues.length ? colorNamesAndValues.join(', ') : null;\n  };\n\n  let ariaRoleDescription = isMobile ? null : formatMessage('twoDimensionalSlider');\n\n  let {visuallyHiddenProps} = useVisuallyHidden({style: {\n    opacity: '0.0001',\n    width: '100%',\n    height: '100%',\n    pointerEvents: 'none'\n  }});\n\n  let {\n    colorAreaStyleProps,\n    gradientStyleProps,\n    thumbStyleProps\n  } = useColorAreaGradient({\n    direction,\n    state,\n    xChannel,\n    zChannel,\n    isDisabled: props.isDisabled\n  });\n\n\n  return {\n    colorAreaProps: {\n      ...colorAriaLabellingProps,\n      ...colorAreaInteractions,\n      ...colorAreaStyleProps,\n      role: 'group'\n    },\n    gradientProps: {\n      ...gradientStyleProps,\n      role: 'presentation'\n    },\n    thumbProps: {\n      ...thumbInteractions,\n      ...thumbStyleProps,\n      role: 'presentation'\n    },\n    xInputProps: {\n      ...xInputLabellingProps,\n      ...visuallyHiddenProps,\n      type: 'range',\n      min: state.value.getChannelRange(xChannel).minValue,\n      max: state.value.getChannelRange(xChannel).maxValue,\n      step: xChannelStep,\n      'aria-roledescription': ariaRoleDescription,\n      'aria-valuetext': (\n        isMobile ?\n          formatMessage('colorNameAndValue', {name: state.value.getChannelName(xChannel, locale), value: state.value.formatChannelValue(xChannel, locale)})\n          :\n          [\n            formatMessage('colorNameAndValue', {name: state.value.getChannelName(xChannel, locale), value: state.value.formatChannelValue(xChannel, locale)}),\n            formatMessage('colorNameAndValue', {name: state.value.getChannelName(yChannel, locale), value: state.value.formatChannelValue(yChannel, locale)})\n          ].join(', ')\n      ),\n      title: getValueTitle(),\n      disabled: isDisabled,\n      value: state.value.getChannelValue(xChannel),\n      tabIndex: 0,\n      onChange: (e: ChangeEvent<HTMLInputElement>) => {\n        state.setXValue(parseFloat(e.target.value));\n      }\n    },\n    yInputProps: {\n      ...yInputLabellingProps,\n      ...visuallyHiddenProps,\n      type: 'range',\n      min: state.value.getChannelRange(yChannel).minValue,\n      max: state.value.getChannelRange(yChannel).maxValue,\n      step: yChannelStep,\n      'aria-roledescription': ariaRoleDescription,\n      'aria-valuetext': (\n        isMobile ?\n          formatMessage('colorNameAndValue', {name: state.value.getChannelName(yChannel, locale), value: state.value.formatChannelValue(yChannel, locale)})\n          :\n          [\n            formatMessage('colorNameAndValue', {name: state.value.getChannelName(yChannel, locale), value: state.value.formatChannelValue(yChannel, locale)}),\n            formatMessage('colorNameAndValue', {name: state.value.getChannelName(xChannel, locale), value: state.value.formatChannelValue(xChannel, locale)})\n          ].join(', ')\n      ),\n      'aria-orientation': 'vertical',\n      title: getValueTitle(),\n      disabled: isDisabled,\n      value: state.value.getChannelValue(yChannel),\n      tabIndex: -1,\n      onChange: (e: ChangeEvent<HTMLInputElement>) => {\n        state.setYValue(parseFloat(e.target.value));\n      }\n    }\n  };\n}\n", "const _temp0 = require(\"./ar-AE.json\");\nconst _temp1 = require(\"./bg-BG.json\");\nconst _temp2 = require(\"./cs-CZ.json\");\nconst _temp3 = require(\"./da-DK.json\");\nconst _temp4 = require(\"./de-DE.json\");\nconst _temp5 = require(\"./el-GR.json\");\nconst _temp6 = require(\"./en-US.json\");\nconst _temp7 = require(\"./es-ES.json\");\nconst _temp8 = require(\"./et-EE.json\");\nconst _temp9 = require(\"./fi-FI.json\");\nconst _temp10 = require(\"./fr-FR.json\");\nconst _temp11 = require(\"./he-IL.json\");\nconst _temp12 = require(\"./hr-HR.json\");\nconst _temp13 = require(\"./hu-HU.json\");\nconst _temp14 = require(\"./it-IT.json\");\nconst _temp15 = require(\"./ja-JP.json\");\nconst _temp16 = require(\"./ko-KR.json\");\nconst _temp17 = require(\"./lt-LT.json\");\nconst _temp18 = require(\"./lv-LV.json\");\nconst _temp19 = require(\"./nb-NO.json\");\nconst _temp20 = require(\"./nl-NL.json\");\nconst _temp21 = require(\"./pl-PL.json\");\nconst _temp22 = require(\"./pt-BR.json\");\nconst _temp23 = require(\"./pt-PT.json\");\nconst _temp24 = require(\"./ro-RO.json\");\nconst _temp25 = require(\"./ru-RU.json\");\nconst _temp26 = require(\"./sk-SK.json\");\nconst _temp27 = require(\"./sl-SI.json\");\nconst _temp28 = require(\"./sr-SP.json\");\nconst _temp29 = require(\"./sv-SE.json\");\nconst _temp30 = require(\"./tr-TR.json\");\nconst _temp31 = require(\"./uk-UA.json\");\nconst _temp32 = require(\"./zh-CN.json\");\nconst _temp33 = require(\"./zh-TW.json\");\nmodule.exports = {\n  \"ar-AE\": _temp0,\n  \"bg-BG\": _temp1,\n  \"cs-CZ\": _temp2,\n  \"da-DK\": _temp3,\n  \"de-DE\": _temp4,\n  \"el-GR\": _temp5,\n  \"en-US\": _temp6,\n  \"es-ES\": _temp7,\n  \"et-EE\": _temp8,\n  \"fi-FI\": _temp9,\n  \"fr-FR\": _temp10,\n  \"he-IL\": _temp11,\n  \"hr-HR\": _temp12,\n  \"hu-HU\": _temp13,\n  \"it-IT\": _temp14,\n  \"ja-JP\": _temp15,\n  \"ko-KR\": _temp16,\n  \"lt-LT\": _temp17,\n  \"lv-LV\": _temp18,\n  \"nb-NO\": _temp19,\n  \"nl-NL\": _temp20,\n  \"pl-PL\": _temp21,\n  \"pt-BR\": _temp22,\n  \"pt-PT\": _temp23,\n  \"ro-RO\": _temp24,\n  \"ru-RU\": _temp25,\n  \"sk-SK\": _temp26,\n  \"sl-SI\": _temp27,\n  \"sr-SP\": _temp28,\n  \"sv-SE\": _temp29,\n  \"tr-TR\": _temp30,\n  \"uk-UA\": _temp31,\n  \"zh-CN\": _temp32,\n  \"zh-TW\": _temp33\n}", "{\n  \"twoDimensionalSlider\": \"\u0634\u0631\u064A\u0637 \u062A\u0645\u0631\u064A\u0631 \u062B\u0646\u0627\u0626\u064A \u0627\u0644\u0623\u0628\u0639\u0627\u062F\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D \u043F\u043B\u044A\u0437\u0433\u0430\u0447\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D posuvn\u00EDk\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D-skyder\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D-Schieberegler\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"\u03A1\u03C5\u03B8\u03BC\u03B9\u03C3\u03C4\u03B9\u03BA\u03CC 2D\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D slider\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"Control deslizante en 2D\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D-liugur\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D-liukus\u00E4\u00E4din\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"Curseur 2D\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"\u05DE\u05D7\u05D5\u05D5\u05DF \u05D3\u05D5-\u05DE\u05DE\u05D3\u05D9\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D kliznik\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D cs\u00FAszka\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"Dispositivo di scorrimento 2D\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D \u30B9\u30E9\u30A4\u30C0\u30FC\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D \uC2AC\uB77C\uC774\uB354\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D slankiklis\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"Plaknes sl\u012Bdnis\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D-glidebryter\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D-schuifregelaar\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"Suwak 2D\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"Controle deslizante 2D\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"Controlo de deslize 2D\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"Cursor 2D\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"\u0414\u0432\u0443\u043C\u0435\u0440\u043D\u044B\u0439 \u043F\u043E\u043B\u0437\u0443\u043D\u043E\u043A\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D jazdec\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D-drsnik\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D \u043A\u043B\u0438\u0437\u0430\u0447\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D-reglage\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2B slayt g\u00F6sterisi\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"\u041F\u043E\u0432\u0437\u0443\u043D\u043E\u043A 2D\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D \u6ED1\u5757\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "{\n  \"twoDimensionalSlider\": \"2D \u6ED1\u687F\",\n  \"colorNameAndValue\": \"{name}: {value}\",\n  \"x/y\": \"{x} / {y}\"\n}\n", "/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n*/\n\nimport {CSSProperties, useMemo} from 'react';\n\nconst generateRGB_R = (orientation, dir: boolean, zValue: number) => {\n  let maskImage = `linear-gradient(to ${orientation[Number(!dir)]}, transparent, #000)`;\n  let result = {\n    colorAreaStyles: {\n      backgroundImage: `linear-gradient(to ${orientation[Number(dir)]},rgb(${zValue},0,0),rgb(${zValue},255,0))`\n    },\n    gradientStyles: {\n      backgroundImage: `linear-gradient(to ${orientation[Number(dir)]},rgb(${zValue},0,255),rgb(${zValue},255,255))`,\n      'WebkitMaskImage': maskImage,\n      maskImage\n    }\n  };\n  return result;\n};\n\nconst generateRGB_G = (orientation, dir: boolean, zValue: number) => {\n  let maskImage = `linear-gradient(to ${orientation[Number(!dir)]}, transparent, #000)`;\n  let result = {\n    colorAreaStyles: {\n      backgroundImage: `linear-gradient(to ${orientation[Number(dir)]},rgb(0,${zValue},0),rgb(255,${zValue},0))`\n    },\n    gradientStyles: {\n      backgroundImage: `linear-gradient(to ${orientation[Number(dir)]},rgb(0,${zValue},255),rgb(255,${zValue},255))`,\n      'WebkitMaskImage': maskImage,\n      maskImage\n    }\n  };\n  return result;\n};\n\nconst generateRGB_B = (orientation, dir: boolean, zValue: number) => {\n  let maskImage = `linear-gradient(to ${orientation[Number(!dir)]}, transparent, #000)`;\n  let result = {\n    colorAreaStyles: {\n      backgroundImage: `linear-gradient(to ${orientation[Number(dir)]},rgb(0,0,${zValue}),rgb(255,0,${zValue}))`\n    },\n    gradientStyles: {\n      backgroundImage: `linear-gradient(to ${orientation[Number(dir)]},rgb(0,255,${zValue}),rgb(255,255,${zValue}))`,\n      'WebkitMaskImage': maskImage,\n      maskImage\n    }\n  };\n  return result;\n};\n\n\nconst generateHSL_H = (orientation, dir: boolean, zValue: number) => {\n  let result = {\n    colorAreaStyles: {},\n    gradientStyles: {\n      background: [\n        `linear-gradient(to ${orientation[Number(dir)]}, hsla(0,0%,0%,1) 0%, hsla(0,0%,0%,0) 50%, hsla(0,0%,100%,0) 50%, hsla(0,0%,100%,1) 100%)`,\n        `linear-gradient(to ${orientation[Number(!dir)]},hsl(0,0%,50%),hsla(0,0%,50%,0))`,\n        `hsl(${zValue}, 100%, 50%)`\n      ].join(',')\n    }\n  };\n  return result;\n};\n\nconst generateHSL_S = (orientation, dir: boolean, alphaValue: number) => {\n  let result = {\n    colorAreaStyles: {},\n    gradientStyles: {\n      background: [\n        `linear-gradient(to ${orientation[Number(!dir)]}, hsla(0,0%,0%,${alphaValue}) 0%, hsla(0,0%,0%,0) 50%, hsla(0,0%,100%,0) 50%, hsla(0,0%,100%,${alphaValue}) 100%)`,\n        `linear-gradient(to ${orientation[Number(dir)]},hsla(0,100%,50%,${alphaValue}),hsla(60,100%,50%,${alphaValue}),hsla(120,100%,50%,${alphaValue}),hsla(180,100%,50%,${alphaValue}),hsla(240,100%,50%,${alphaValue}),hsla(300,100%,50%,${alphaValue}),hsla(359,100%,50%,${alphaValue}))`,\n        'hsl(0, 0%, 50%)'\n      ].join(',')\n    }\n  };\n  return result;\n};\n\nconst generateHSL_L = (orientation, dir: boolean, zValue: number) => {\n  let result = {\n    colorAreaStyles: {},\n    gradientStyles: {\n      backgroundImage: [\n        `linear-gradient(to ${orientation[Number(!dir)]},hsl(0,0%,${zValue}%),hsla(0,0%,${zValue}%,0))`,\n        `linear-gradient(to ${orientation[Number(dir)]},hsl(0,100%,${zValue}%),hsl(60,100%,${zValue}%),hsl(120,100%,${zValue}%),hsl(180,100%,${zValue}%),hsl(240,100%,${zValue}%),hsl(300,100%,${zValue}%),hsl(360,100%,${zValue}%))`\n      ].join(',')\n    }\n  };\n  return result;\n};\n\n\nconst generateHSB_H = (orientation, dir: boolean, zValue: number) => {\n  let result = {\n    colorAreaStyles: {},\n    gradientStyles: {\n      background: [\n        `linear-gradient(to ${orientation[Number(dir)]},hsl(0,0%,0%),hsla(0,0%,0%,0))`,\n        `linear-gradient(to ${orientation[Number(!dir)]},hsl(0,0%,100%),hsla(0,0%,100%,0))`,\n        `hsl(${zValue}, 100%, 50%)`\n      ].join(',')\n    }\n  };\n  return result;\n};\n\nconst generateHSB_S = (orientation, dir: boolean, alphaValue: number) => {\n  let result = {\n    colorAreaStyles: {},\n    gradientStyles: {\n      background: [\n        `linear-gradient(to ${orientation[Number(!dir)]},hsla(0,0%,0%,${alphaValue}),hsla(0,0%,0%,0))`,\n        `linear-gradient(to ${orientation[Number(dir)]},hsla(0,100%,50%,${alphaValue}),hsla(60,100%,50%,${alphaValue}),hsla(120,100%,50%,${alphaValue}),hsla(180,100%,50%,${alphaValue}),hsla(240,100%,50%,${alphaValue}),hsla(300,100%,50%,${alphaValue}),hsla(359,100%,50%,${alphaValue}))`,\n        `linear-gradient(to ${orientation[Number(!dir)]},hsl(0,0%,0%),hsl(0,0%,100%))`\n      ].join(',')\n    }\n  };\n  return result;\n};\n\nconst generateHSB_B = (orientation, dir: boolean, alphaValue: number) => {\n  let result = {\n    colorAreaStyles: {},\n    gradientStyles: {\n      background: [\n        `linear-gradient(to ${orientation[Number(!dir)]},hsla(0,0%,100%,${alphaValue}),hsla(0,0%,100%,0))`,\n        `linear-gradient(to ${orientation[Number(dir)]},hsla(0,100%,50%,${alphaValue}),hsla(60,100%,50%,${alphaValue}),hsla(120,100%,50%,${alphaValue}),hsla(180,100%,50%,${alphaValue}),hsla(240,100%,50%,${alphaValue}),hsla(300,100%,50%,${alphaValue}),hsla(359,100%,50%,${alphaValue}))`,\n        '#000'\n      ].join(',')\n    }\n  };\n  return result;\n};\n\n\ninterface Gradients {\n  colorAreaStyleProps: {\n    style: CSSProperties\n  },\n  gradientStyleProps: {\n    style: CSSProperties\n  },\n  thumbStyleProps: {\n    style: CSSProperties\n  }\n}\n\nexport function useColorAreaGradient({direction, state, zChannel, xChannel, isDisabled}): Gradients {\n  let returnVal = useMemo<Gradients>(() => {\n    let orientation = ['top', direction === 'rtl' ? 'left' : 'right'];\n    let dir = false;\n    let background = {colorAreaStyles: {}, gradientStyles: {}};\n    let zValue = state.value.getChannelValue(zChannel);\n    let {minValue: zMin, maxValue: zMax} = state.value.getChannelRange(zChannel);\n    let alphaValue = (zValue - zMin) / (zMax - zMin);\n    let isHSL = state.value.getColorSpace() === 'hsl';\n    if (!isDisabled) {\n      switch (zChannel) {\n        case 'red': {\n          dir = xChannel === 'green';\n          background = generateRGB_R(orientation, dir, zValue);\n          break;\n        }\n        case 'green': {\n          dir = xChannel === 'red';\n          background = generateRGB_G(orientation, dir, zValue);\n          break;\n        }\n        case 'blue': {\n          dir = xChannel === 'red';\n          background = generateRGB_B(orientation, dir, zValue);\n          break;\n        }\n        case 'hue': {\n          dir = xChannel !== 'saturation';\n          if (isHSL) {\n            background = generateHSL_H(orientation, dir, zValue);\n          } else {\n            background = generateHSB_H(orientation, dir, zValue);\n          }\n          break;\n        }\n        case 'saturation': {\n          dir = xChannel === 'hue';\n          if (isHSL) {\n            background = generateHSL_S(orientation, dir, alphaValue);\n          } else {\n            background = generateHSB_S(orientation, dir, alphaValue);\n          }\n          break;\n        }\n        case 'brightness': {\n          dir = xChannel === 'hue';\n          background = generateHSB_B(orientation, dir, alphaValue);\n          break;\n        }\n        case 'lightness': {\n          dir = xChannel === 'hue';\n          background = generateHSL_L(orientation, dir, zValue);\n          break;\n        }\n      }\n    }\n\n    let {x, y} = state.getThumbPosition();\n\n    if (direction === 'rtl') {\n      x = 1 - x;\n    }\n\n    return {\n      colorAreaStyleProps: {\n        style: {\n          position: 'relative',\n          touchAction: 'none',\n          ...background.colorAreaStyles\n        }\n      },\n      gradientStyleProps: {\n        style: {\n          touchAction: 'none',\n          ...background.gradientStyles\n        }\n      },\n      thumbStyleProps: {\n        style: {\n          position: 'absolute',\n          left: `${x * 100}%`,\n          top: `${y * 100}%`,\n          transform: 'translate(0%, 0%)',\n          touchAction: 'none'\n        }\n      }\n    };\n  }, [direction, state, zChannel, xChannel, isDisabled]);\n\n  return returnVal;\n}\n\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaColorSliderProps} from '@react-types/color';\nimport {ColorSliderState} from '@react-stately/color';\nimport {HTMLAttributes, RefObject} from 'react';\nimport {mergeProps} from '@react-aria/utils';\nimport {useLocale} from '@react-aria/i18n';\nimport {useSlider, useSliderThumb} from '@react-aria/slider';\n\ninterface ColorSliderAriaOptions extends AriaColorSliderProps {\n  /** A ref for the track element. */\n  trackRef: RefObject<HTMLElement>,\n  /** A ref for the input element. */\n  inputRef: RefObject<HTMLInputElement>\n}\n\ninterface ColorSliderAria {\n  /** Props for the label element. */\n  labelProps: HTMLAttributes<HTMLElement>,\n  /** Props for the track element. */\n  trackProps: HTMLAttributes<HTMLElement>,\n  /** Props for the thumb element. */\n  thumbProps: HTMLAttributes<HTMLElement>,\n  /** Props for the visually hidden range input element. */\n  inputProps: HTMLAttributes<HTMLElement>,\n  /** Props for the output element, displaying the value of the color slider. */\n  outputProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a color slider component.\n * Color sliders allow users to adjust an individual channel of a color value.\n */\nexport function useColorSlider(props: ColorSliderAriaOptions, state: ColorSliderState): ColorSliderAria {\n  let {trackRef, inputRef, orientation, channel, 'aria-label': ariaLabel} = props;\n\n  let {locale, direction} = useLocale();\n\n  // Provide a default aria-label if there is no other label provided.\n  if (!props.label && !ariaLabel && !props['aria-labelledby']) {\n    ariaLabel = state.value.getChannelName(channel, locale);\n  }\n\n  // @ts-ignore - ignore unused incompatible props\n  let {groupProps, trackProps, labelProps, outputProps} = useSlider({...props, 'aria-label': ariaLabel}, state, trackRef);\n  let {inputProps, thumbProps} = useSliderThumb({\n    index: 0,\n    orientation,\n    isDisabled: props.isDisabled,\n    trackRef,\n    inputRef\n  }, state);\n\n  let generateBackground = () => {\n    let value = state.getDisplayColor();\n    let to: string;\n    if (orientation === 'vertical') {\n      to = 'top';\n    } else if (direction === 'ltr') {\n      to = 'right';\n    } else {\n      to = 'left';\n    }\n    switch (channel) {\n      case 'hue':\n        return `linear-gradient(to ${to}, rgb(255, 0, 0) 0%, rgb(255, 255, 0) 17%, rgb(0, 255, 0) 33%, rgb(0, 255, 255) 50%, rgb(0, 0, 255) 67%, rgb(255, 0, 255) 83%, rgb(255, 0, 0) 100%)`;\n      case 'lightness': {\n        // We have to add an extra color stop in the middle so that the hue shows up at all.\n        // Otherwise it will always just be black to white.\n        let min = state.getThumbMinValue(0);\n        let max = state.getThumbMaxValue(0);\n        let start = value.withChannelValue(channel, min).toString('css');\n        let middle = value.withChannelValue(channel, (max - min) / 2).toString('css');\n        let end = value.withChannelValue(channel, max).toString('css');\n        return `linear-gradient(to ${to}, ${start}, ${middle}, ${end})`;\n      }\n      case 'saturation':\n      case 'brightness':\n      case 'red':\n      case 'green':\n      case 'blue':\n      case 'alpha': {\n        let start = value.withChannelValue(channel, state.getThumbMinValue(0)).toString('css');\n        let end = value.withChannelValue(channel, state.getThumbMaxValue(0)).toString('css');\n        return `linear-gradient(to ${to}, ${start}, ${end})`;\n      }\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n  };\n\n  let thumbPosition = state.getThumbPercent(0);\n  if (orientation === 'vertical' || direction === 'rtl') {\n    thumbPosition = 1 - thumbPosition;\n  }\n\n  return {\n    trackProps: {\n      ...mergeProps(groupProps, trackProps),\n      style: {\n        position: 'relative',\n        touchAction: 'none',\n        background: generateBackground()\n      }\n    },\n    inputProps,\n    thumbProps: {\n      ...thumbProps,\n      style: {\n        touchAction: 'none',\n        position: 'absolute',\n        [orientation === 'vertical' ? 'top' : 'left']: `${thumbPosition * 100}%`,\n        transform: 'translate(-50%, -50%)'\n      }\n    },\n    labelProps,\n    outputProps\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaColorWheelProps} from '@react-types/color';\nimport {ColorWheelState} from '@react-stately/color';\nimport {focusWithoutScrolling, mergeProps, useGlobalListeners, useLabels} from '@react-aria/utils';\nimport React, {ChangeEvent, HTMLAttributes, InputHTMLAttributes, RefObject, useCallback, useRef} from 'react';\nimport {useKeyboard, useMove} from '@react-aria/interactions';\nimport {useLocale} from '@react-aria/i18n';\n\ninterface ColorWheelAriaProps extends AriaColorWheelProps {\n  /** The outer radius of the color wheel. */\n  outerRadius: number,\n  /** The inner radius of the color wheel. */\n  innerRadius: number\n}\n\ninterface ColorWheelAria {\n  /** Props for the track element. */\n  trackProps: HTMLAttributes<HTMLElement>,\n  /** Props for the thumb element. */\n  thumbProps: HTMLAttributes<HTMLElement>,\n  /** Props for the visually hidden range input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a color wheel component.\n * Color wheels allow users to adjust the hue of an HSL or HSB color value on a circular track.\n */\nexport function useColorWheel(props: ColorWheelAriaProps, state: ColorWheelState, inputRef: RefObject<HTMLElement>): ColorWheelAria {\n  let {\n    isDisabled,\n    innerRadius,\n    outerRadius,\n    'aria-label': ariaLabel\n  } = props;\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let thumbRadius = (innerRadius + outerRadius) / 2;\n\n  let focusInput = useCallback(() => {\n    if (inputRef.current) {\n      focusWithoutScrolling(inputRef.current);\n    }\n  }, [inputRef]);\n\n  let stateRef = useRef<ColorWheelState>(null);\n  stateRef.current = state;\n\n  let currentPosition = useRef<{x: number, y: number}>(null);\n\n  let {keyboardProps} = useKeyboard({\n    onKeyDown(e) {\n      // these are the cases that useMove doesn't handle\n      if (!/^(PageUp|PageDown)$/.test(e.key)) {\n        e.continuePropagation();\n        return;\n      }\n      // same handling as useMove, don't need to stop propagation, useKeyboard will do that for us\n      e.preventDefault();\n      // remember to set this and unset it so that onChangeEnd is fired\n      stateRef.current.setDragging(true);\n      switch (e.key) {\n        case 'PageUp':\n          e.preventDefault();\n          state.increment(stateRef.current.pageStep);\n          break;\n        case 'PageDown':\n          e.preventDefault();\n          state.decrement(stateRef.current.pageStep);\n          break;\n      }\n      stateRef.current.setDragging(false);\n    }\n  });\n\n  let moveHandler = {\n    onMoveStart() {\n      currentPosition.current = null;\n      state.setDragging(true);\n    },\n    onMove({deltaX, deltaY, pointerType, shiftKey}) {\n      if (currentPosition.current == null) {\n        currentPosition.current = stateRef.current.getThumbPosition(thumbRadius);\n      }\n      currentPosition.current.x += deltaX;\n      currentPosition.current.y += deltaY;\n      if (pointerType === 'keyboard') {\n        if (deltaX > 0 || deltaY < 0) {\n          state.increment(shiftKey ? stateRef.current.pageStep : stateRef.current.step);\n        } else if (deltaX < 0 || deltaY > 0) {\n          state.decrement(shiftKey ? stateRef.current.pageStep : stateRef.current.step);\n        }\n      } else {\n        stateRef.current.setHueFromPoint(currentPosition.current.x, currentPosition.current.y, thumbRadius);\n      }\n    },\n    onMoveEnd() {\n      isOnTrack.current = undefined;\n      state.setDragging(false);\n      focusInput();\n    }\n  };\n  let {moveProps: movePropsThumb} = useMove(moveHandler);\n\n  let currentPointer = useRef<number | null | undefined>(undefined);\n  let isOnTrack = useRef<boolean>(false);\n  let {moveProps: movePropsContainer} = useMove({\n    onMoveStart() {\n      if (isOnTrack.current) {\n        moveHandler.onMoveStart();\n      }\n    },\n    onMove(e) {\n      if (isOnTrack.current) {\n        moveHandler.onMove(e);\n      }\n    },\n    onMoveEnd() {\n      if (isOnTrack.current) {\n        moveHandler.onMoveEnd();\n      }\n    }\n  });\n\n  let onThumbDown = (id: number | null) => {\n    if (!state.isDragging) {\n      currentPointer.current = id;\n      focusInput();\n      state.setDragging(true);\n\n      if (typeof PointerEvent !== 'undefined') {\n        addGlobalListener(window, 'pointerup', onThumbUp, false);\n      } else {\n        addGlobalListener(window, 'mouseup', onThumbUp, false);\n        addGlobalListener(window, 'touchend', onThumbUp, false);\n      }\n    }\n  };\n\n  let onThumbUp = (e) => {\n    let id = e.pointerId ?? e.changedTouches?.[0].identifier;\n    if (id === currentPointer.current) {\n      focusInput();\n      state.setDragging(false);\n      currentPointer.current = undefined;\n      isOnTrack.current = false;\n\n      if (typeof PointerEvent !== 'undefined') {\n        removeGlobalListener(window, 'pointerup', onThumbUp, false);\n      } else {\n        removeGlobalListener(window, 'mouseup', onThumbUp, false);\n        removeGlobalListener(window, 'touchend', onThumbUp, false);\n      }\n    }\n  };\n\n  let onTrackDown = (track: Element, id: number | null, pageX: number, pageY: number) => {\n    let rect = track.getBoundingClientRect();\n    let x = pageX - rect.x - rect.width / 2;\n    let y = pageY - rect.y - rect.height / 2;\n    let radius = Math.sqrt(x * x + y * y);\n    if (innerRadius < radius && radius < outerRadius && !state.isDragging && currentPointer.current === undefined) {\n      isOnTrack.current = true;\n      currentPointer.current = id;\n      stateRef.current.setHueFromPoint(x, y, radius);\n\n      focusInput();\n      state.setDragging(true);\n\n      if (typeof PointerEvent !== 'undefined') {\n        addGlobalListener(window, 'pointerup', onTrackUp, false);\n      } else {\n        addGlobalListener(window, 'mouseup', onTrackUp, false);\n        addGlobalListener(window, 'touchend', onTrackUp, false);\n      }\n    }\n  };\n\n  let onTrackUp = (e) => {\n    let id = e.pointerId ?? e.changedTouches?.[0].identifier;\n    if (isOnTrack.current && id === currentPointer.current) {\n      isOnTrack.current = false;\n      currentPointer.current = undefined;\n      state.setDragging(false);\n      focusInput();\n\n\n      if (typeof PointerEvent !== 'undefined') {\n        removeGlobalListener(window, 'pointerup', onTrackUp, false);\n      } else {\n        removeGlobalListener(window, 'mouseup', onTrackUp, false);\n        removeGlobalListener(window, 'touchend', onTrackUp, false);\n      }\n    }\n  };\n\n  let trackInteractions = isDisabled ? {} : mergeProps({\n    ...(typeof PointerEvent !== 'undefined' ? {\n      onPointerDown: (e: React.PointerEvent) => {\n        if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) {\n          return;\n        }\n        onTrackDown(e.currentTarget, e.pointerId, e.clientX, e.clientY);\n      }} : {\n        onMouseDown: (e: React.MouseEvent) => {\n          if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n            return;\n          }\n          onTrackDown(e.currentTarget, undefined, e.clientX, e.clientY);\n        },\n        onTouchStart: (e: React.TouchEvent) => {\n          onTrackDown(e.currentTarget, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY);\n        }\n      })\n  }, movePropsContainer);\n\n  let thumbInteractions = isDisabled ? {} : mergeProps({\n    onMouseDown: (e: React.MouseEvent) => {\n      if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n      onThumbDown(undefined);\n    },\n    onPointerDown: (e: React.PointerEvent) => {\n      if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) {\n        return;\n      }\n      onThumbDown(e.pointerId);\n    },\n    onTouchStart: (e: React.TouchEvent) => {\n      onThumbDown(e.changedTouches[0].identifier);\n    }\n  }, keyboardProps, movePropsThumb);\n  let {x, y} = state.getThumbPosition(thumbRadius);\n\n  // Provide a default aria-label if none is given\n  let {locale} = useLocale();\n  if (ariaLabel == null && props['aria-labelledby'] == null) {\n    ariaLabel = state.value.getChannelName('hue', locale);\n  }\n\n  let inputLabellingProps = useLabels({\n    ...props,\n    'aria-label': ariaLabel\n  });\n\n  let {minValue, maxValue, step} = state.value.getChannelRange('hue');\n  return {\n    trackProps: {\n      ...trackInteractions,\n      style: {\n        position: 'relative',\n        touchAction: 'none',\n        width: outerRadius * 2,\n        height: outerRadius * 2,\n        background: `\n          conic-gradient(\n            from 90deg,\n            hsl(0, 100%, 50%),\n            hsl(30, 100%, 50%),\n            hsl(60, 100%, 50%),\n            hsl(90, 100%, 50%),\n            hsl(120, 100%, 50%),\n            hsl(150, 100%, 50%),\n            hsl(180, 100%, 50%),\n            hsl(210, 100%, 50%),\n            hsl(240, 100%, 50%),\n            hsl(270, 100%, 50%),\n            hsl(300, 100%, 50%),\n            hsl(330, 100%, 50%),\n            hsl(360, 100%, 50%)\n          )\n        `,\n        clipPath: `path(evenodd, \"${circlePath(outerRadius, outerRadius, outerRadius)} ${circlePath(outerRadius, outerRadius, innerRadius)}\")`\n      }\n    },\n    thumbProps: {\n      ...thumbInteractions,\n      style: {\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: `translate(calc(${x}px - 50%), calc(${y}px - 50%))`,\n        touchAction: 'none'\n      }\n    },\n    inputProps: mergeProps(\n      inputLabellingProps,\n      {\n        type: 'range',\n        min: String(minValue),\n        max: String(maxValue),\n        step: String(step),\n        'aria-valuetext': state.value.formatChannelValue('hue', locale),\n        disabled: isDisabled,\n        value: `${state.value.getChannelValue('hue')}`,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => {\n          state.setHue(parseFloat(e.target.value));\n        }\n      }\n    )\n  };\n}\n\n// Creates an SVG path string for a circle.\nfunction circlePath(cx: number, cy: number, r: number) {\n  return `M ${cx}, ${cy} m ${-r}, 0 a ${r}, ${r}, 0, 1, 0, ${r * 2}, 0 a ${r}, ${r}, 0, 1, 0 ${-r * 2}, 0`;\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaColorFieldProps} from '@react-types/color';\nimport {ColorFieldState} from '@react-stately/color';\nimport {\n  HTMLAttributes,\n  LabelHTMLAttributes,\n  RefObject,\n  useCallback,\n  useState\n} from 'react';\nimport {mergeProps, useId} from '@react-aria/utils';\nimport {useFocusWithin, useScrollWheel} from '@react-aria/interactions';\nimport {useFormattedTextField} from '@react-aria/textfield';\nimport {useSpinButton} from '@react-aria/spinbutton';\n\ninterface ColorFieldAria {\n  /** Props for the label element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the input element. */\n  inputProps: HTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a color field component.\n * Color fields allow users to enter and adjust a hex color value.\n */\nexport function useColorField(\n  props: AriaColorFieldProps,\n  state: ColorFieldState,\n  ref: RefObject<HTMLInputElement>\n): ColorFieldAria {\n  let {\n    isDisabled,\n    isReadOnly,\n    isRequired\n  } = props;\n\n  let {\n    colorValue,\n    inputValue,\n    commit,\n    increment,\n    decrement,\n    incrementToMax,\n    decrementToMin\n  } = state;\n\n  let inputId = useId();\n  let {spinButtonProps} = useSpinButton(\n    {\n      isDisabled,\n      isReadOnly,\n      isRequired,\n      maxValue: 0xFFFFFF,\n      minValue: 0,\n      onIncrement: increment,\n      onIncrementToMax: incrementToMax,\n      onDecrement: decrement,\n      onDecrementToMin: decrementToMin,\n      value: colorValue ? colorValue.toHexInt() : undefined,\n      textValue: colorValue ? colorValue.toString('hex') : undefined\n    }\n  );\n\n  let [focusWithin, setFocusWithin] = useState(false);\n  let {focusWithinProps} = useFocusWithin({isDisabled, onFocusWithinChange: setFocusWithin});\n\n  let onWheel = useCallback((e) => {\n    if (Math.abs(e.deltaY) <= Math.abs(e.deltaX)) {\n      return;\n    }\n    if (e.deltaY > 0) {\n      increment();\n    } else if (e.deltaY < 0) {\n      decrement();\n    }\n  }, [decrement, increment]);\n  // If the input isn't supposed to receive input, disable scrolling.\n  let scrollingDisabled = isDisabled || isReadOnly || !focusWithin;\n  useScrollWheel({onScroll: onWheel, isDisabled: scrollingDisabled}, ref);\n\n  let onChange = value => {\n    state.setInputValue(value);\n  };\n\n  let {labelProps, inputProps} = useFormattedTextField(\n    mergeProps(props, {\n      id: inputId,\n      value: inputValue,\n      defaultValue: undefined,\n      type: 'text',\n      autoComplete: 'off',\n      onChange\n    }), state, ref);\n\n  return {\n    labelProps,\n    inputProps: mergeProps(inputProps, spinButtonProps, focusWithinProps, {\n      role: 'textbox',\n      'aria-valuemax': null,\n      'aria-valuemin': null,\n      'aria-valuenow': null,\n      'aria-valuetext': null,\n      autoCorrect: 'off',\n      spellCheck: 'false',\n      onBlur: commit\n    })\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {parseColor} from './Color';\nexport * from './useColorAreaState';\nexport * from './useColorSliderState';\nexport * from './useColorWheelState';\nexport * from './useColorFieldState';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, toFixedNumber} from '@react-stately/utils';\nimport {ColorAxes, ColorChannel, ColorChannelRange, ColorFormat, Color as IColor} from '@react-types/color';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {MessageDictionary} from '@internationalized/message';\nimport {NumberFormatter} from '@internationalized/number';\n\nconst messages = new MessageDictionary(intlMessages);\n\n/** Parses a color from a string value. Throws an error if the string could not be parsed. */\nexport function parseColor(value: string): IColor {\n  let res = RGBColor.parse(value) || HSBColor.parse(value) || HSLColor.parse(value);\n  if (res) {\n    return res;\n  }\n\n  throw new Error('Invalid color value: ' + value);\n}\n\nexport function normalizeColor(v: string | IColor) {\n  if (typeof v === 'string') {\n    return parseColor(v);\n  } else {\n    return v;\n  }\n}\n\nabstract class Color implements IColor {\n  abstract toFormat(format: ColorFormat): IColor;\n  abstract toString(format: ColorFormat | 'css'): string;\n  abstract clone(): IColor;\n  abstract getChannelRange(channel: ColorChannel): ColorChannelRange;\n  abstract formatChannelValue(channel: ColorChannel, locale: string): string;\n\n  toHexInt(): number {\n    return this.toFormat('rgb').toHexInt();\n  }\n\n  getChannelValue(channel: ColorChannel): number {\n    if (channel in this) {\n      return this[channel];\n    }\n\n    throw new Error('Unsupported color channel: ' + channel);\n  }\n\n  withChannelValue(channel: ColorChannel, value: number): IColor {\n    if (channel in this) {\n      let x = this.clone();\n      x[channel] = value;\n      return x;\n    }\n\n    throw new Error('Unsupported color channel: ' + channel);\n  }\n\n  getChannelName(channel: ColorChannel, locale: string) {\n    return messages.getStringForLocale(channel, locale);\n  }\n\n  abstract getColorSpace(): ColorFormat\n  getColorSpaceAxes(xyChannels: {xChannel?: ColorChannel, yChannel?: ColorChannel}): ColorAxes {\n    let {xChannel, yChannel} = xyChannels;\n    let xCh = xChannel || this.getColorChannels().find(c => c !== yChannel);\n    let yCh = yChannel || this.getColorChannels().find(c => c !== xCh);\n    let zCh = this.getColorChannels().find(c => c !== xCh && c !== yCh);\n\n    return {xChannel: xCh, yChannel: yCh, zChannel: zCh};\n  }\n  abstract getColorChannels(): [ColorChannel, ColorChannel, ColorChannel]\n}\n\nconst HEX_REGEX = /^#(?:([0-9a-f]{3})|([0-9a-f]{6}))$/i;\n\n// X = <negative/positive number with/without decimal places>\n// before/after a comma, 0 or more whitespaces are allowed\n// - rgb(X, X, X)\n// - rgba(X, X, X, X)\nconst RGB_REGEX = /rgb\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?)\\)|rgba\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d(.\\d+)?)\\)/;\n\nclass RGBColor extends Color {\n  constructor(private red: number, private green: number, private blue: number, private alpha: number) {\n    super();\n  }\n\n  static parse(value: string): RGBColor | void {\n    let m;\n    if ((m = value.match(HEX_REGEX))) {\n      if (m[1]) {\n        let r = parseInt(m[1][0] + m[1][0], 16);\n        let g = parseInt(m[1][1] + m[1][1], 16);\n        let b = parseInt(m[1][2] + m[1][2], 16);\n        return new RGBColor(r, g, b, 1);\n      } else if (m[2]) {\n        let r = parseInt(m[2][0] + m[2][1], 16);\n        let g = parseInt(m[2][2] + m[2][3], 16);\n        let b = parseInt(m[2][4] + m[2][5], 16);\n        return new RGBColor(r, g, b, 1);\n      }\n    }\n\n    if ((m = value.match(RGB_REGEX))) {\n      const [r, g, b, a] = (m[1] ?? m[2]).split(',').map(n => Number(n.trim()));\n      return new RGBColor(clamp(r, 0, 255), clamp(g, 0, 255), clamp(b, 0, 255), clamp(a ?? 1, 0, 1));\n    }\n  }\n\n  toString(format: ColorFormat | 'css') {\n    switch (format) {\n      case 'hex':\n        return '#' + (this.red.toString(16).padStart(2, '0') + this.green.toString(16).padStart(2, '0') + this.blue.toString(16).padStart(2, '0')).toUpperCase();\n      case 'hexa':\n        return '#' + (this.red.toString(16).padStart(2, '0') + this.green.toString(16).padStart(2, '0') + this.blue.toString(16).padStart(2, '0') + Math.round(this.alpha * 255).toString(16).padStart(2, '0')).toUpperCase();\n      case 'rgb':\n        return `rgb(${this.red}, ${this.green}, ${this.blue})`;\n      case 'css':\n      case 'rgba':\n        return `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;\n      default:\n        return this.toFormat(format).toString(format);\n    }\n  }\n\n  toFormat(format: ColorFormat): IColor {\n    switch (format) {\n      case 'hex':\n      case 'hexa':\n      case 'rgb':\n      case 'rgba':\n        return this;\n      case 'hsb':\n      case 'hsba':\n        return this.toHSB();\n      case 'hsl':\n      case 'hsla':\n        return this.toHSL();\n      default:\n        throw new Error('Unsupported color conversion: rgb -> ' + format);\n    }\n  }\n\n  toHexInt(): number {\n    return this.red << 16 | this.green << 8 | this.blue;\n  }\n\n  /**\n   * Converts an RGB color value to HSB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.\n   * @returns An HSBColor object.\n   */\n  private toHSB(): IColor {\n    const red = this.red / 255;\n    const green = this.green / 255;\n    const blue = this.blue / 255;\n    const min = Math.min(red, green, blue);\n    const brightness = Math.max(red, green, blue);\n    const chroma = brightness - min;\n    const saturation = brightness === 0 ? 0 : chroma / brightness;\n    let hue = 0; // achromatic\n\n    if (chroma !== 0) {\n      switch (brightness) {\n        case red:\n          hue = (green - blue) / chroma + (green < blue ? 6 : 0);\n          break;\n        case green:\n          hue = (blue - red) / chroma + 2;\n          break;\n        case blue:\n          hue = (red - green) / chroma + 4;\n          break;\n      }\n\n      hue /= 6;\n    }\n\n    return new HSBColor(\n      toFixedNumber(hue * 360, 2),\n      toFixedNumber(saturation * 100, 2),\n      toFixedNumber(brightness * 100, 2),\n      this.alpha\n    );\n  }\n\n  /**\n   * Converts an RGB color value to HSL.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.\n   * @returns An HSLColor object.\n   */\n  private toHSL(): IColor {\n    const red = this.red / 255;\n    const green = this.green / 255;\n    const blue = this.blue / 255;\n    const min = Math.min(red, green, blue);\n    const max = Math.max(red, green, blue);\n    const lightness = (max + min) / 2;\n    const chroma = max - min;\n    let hue: number;\n    let saturation: number;\n\n    if (chroma === 0) {\n      hue = saturation = 0; // achromatic\n    } else {\n      saturation = chroma / (lightness < .5 ? max + min : 2 - max - min);\n\n      switch (max) {\n        case red:\n          hue = (green - blue) / chroma + (green < blue ? 6 : 0);\n          break;\n        case green:\n          hue = (blue - red) / chroma + 2;\n          break;\n        case blue:\n          hue = (red - green) / chroma + 4;\n          break;\n      }\n\n      hue /= 6;\n    }\n\n    return new HSLColor(\n      toFixedNumber(hue * 360, 2),\n      toFixedNumber(saturation * 100, 2),\n      toFixedNumber(lightness * 100, 2),\n      this.alpha);\n  }\n\n  clone(): IColor {\n    return new RGBColor(this.red, this.green, this.blue, this.alpha);\n  }\n\n  getChannelRange(channel: ColorChannel): ColorChannelRange {\n    switch (channel) {\n      case 'red':\n      case 'green':\n      case 'blue':\n        return {minValue: 0x0, maxValue: 0xFF, step: 0x1, pageSize: 0x11};\n      case 'alpha':\n        return {minValue: 0, maxValue: 1, step: 0.01, pageSize: 0.1};\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n  }\n\n  formatChannelValue(channel: ColorChannel, locale: string) {\n    let options: Intl.NumberFormatOptions;\n    let value = this.getChannelValue(channel);\n    switch (channel) {\n      case 'red':\n      case 'green':\n      case 'blue':\n        options = {style: 'decimal'};\n        break;\n      case 'alpha':\n        options = {style: 'percent'};\n        break;\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n    return new NumberFormatter(locale, options).format(value);\n  }\n\n  getColorSpace(): ColorFormat {\n    return 'rgb';\n  }\n\n  private static colorChannels: [ColorChannel, ColorChannel, ColorChannel] = ['red', 'green', 'blue'];\n  getColorChannels(): [ColorChannel, ColorChannel, ColorChannel] {\n    return RGBColor.colorChannels;\n  }\n}\n\n// X = <negative/positive number with/without decimal places>\n// before/after a comma, 0 or more whitespaces are allowed\n// - hsb(X, X%, X%)\n// - hsba(X, X%, X%, X)\nconst HSB_REGEX = /hsb\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%)\\)|hsba\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d(.\\d+)?)\\)/;\n\nclass HSBColor extends Color {\n  constructor(private hue: number, private saturation: number, private brightness: number, private alpha: number) {\n    super();\n  }\n\n  static parse(value: string): HSBColor | void {\n    let m: RegExpMatchArray | void;\n    if ((m = value.match(HSB_REGEX))) {\n      const [h, s, b, a] = (m[1] ?? m[2]).split(',').map(n => Number(n.trim().replace('%', '')));\n      return new HSBColor(mod(h, 360), clamp(s, 0, 100), clamp(b, 0, 100), clamp(a ?? 1, 0, 1));\n    }\n  }\n\n  toString(format: ColorFormat | 'css') {\n    switch (format) {\n      case 'css':\n        return this.toHSL().toString('css');\n      case 'hex':\n        return this.toRGB().toString('hex');\n      case 'hexa':\n        return this.toRGB().toString('hexa');\n      case 'hsb':\n        return `hsb(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.brightness, 2)}%)`;\n      case 'hsba':\n        return `hsba(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.brightness, 2)}%, ${this.alpha})`;\n      default:\n        return this.toFormat(format).toString(format);\n    }\n  }\n\n  toFormat(format: ColorFormat): IColor {\n    switch (format) {\n      case 'hsb':\n      case 'hsba':\n        return this;\n      case 'hsl':\n      case 'hsla':\n        return this.toHSL();\n      case 'rgb':\n      case 'rgba':\n        return this.toRGB();\n      default:\n        throw new Error('Unsupported color conversion: hsb -> ' + format);\n    }\n  }\n\n  /**\n   * Converts a HSB color to HSL.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_HSL.\n   * @returns An HSLColor object.\n   */\n  private toHSL(): IColor {\n    let saturation = this.saturation / 100;\n    let brightness = this.brightness / 100;\n    let lightness = brightness * (1 - saturation / 2);\n    saturation = lightness === 0 || lightness === 1 ? 0 : (brightness - lightness) / Math.min(lightness, 1 - lightness);\n\n    return new HSLColor(\n      toFixedNumber(this.hue, 2),\n      toFixedNumber(saturation * 100, 2),\n        toFixedNumber(lightness * 100, 2),\n      this.alpha\n    );\n  }\n\n  /**\n   * Converts a HSV color value to RGB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB_alternative.\n   * @returns An RGBColor object.\n   */\n  private toRGB(): IColor {\n    let hue = this.hue;\n    let saturation = this.saturation / 100;\n    let brightness = this.brightness / 100;\n    let fn = (n: number, k = (n + hue / 60) % 6) => brightness - saturation * brightness * Math.max(Math.min(k, 4 - k, 1), 0);\n    return new RGBColor(\n      Math.round(fn(5) * 255),\n      Math.round(fn(3) * 255),\n      Math.round(fn(1) * 255),\n      this.alpha\n    );\n  }\n\n  clone(): IColor {\n    return new HSBColor(this.hue, this.saturation, this.brightness, this.alpha);\n  }\n\n  getChannelRange(channel: ColorChannel): ColorChannelRange {\n    switch (channel) {\n      case 'hue':\n        return {minValue: 0, maxValue: 360, step: 1, pageSize: 15};\n      case 'saturation':\n      case 'brightness':\n        return {minValue: 0, maxValue: 100, step: 1, pageSize: 10};\n      case 'alpha':\n        return {minValue: 0, maxValue: 1, step: 0.01, pageSize: 0.1};\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n  }\n\n  formatChannelValue(channel: ColorChannel, locale: string) {\n    let options: Intl.NumberFormatOptions;\n    let value = this.getChannelValue(channel);\n    switch (channel) {\n      case 'hue':\n        options = {style: 'unit', unit: 'degree', unitDisplay: 'narrow'};\n        break;\n      case 'saturation':\n      case 'brightness':\n        options = {style: 'percent'};\n        value /= 100;\n        break;\n      case 'alpha':\n        options = {style: 'percent'};\n        break;\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n    return new NumberFormatter(locale, options).format(value);\n  }\n\n  getColorSpace(): ColorFormat {\n    return 'hsb';\n  }\n\n  private static colorChannels: [ColorChannel, ColorChannel, ColorChannel] = ['hue', 'saturation', 'brightness'];\n  getColorChannels(): [ColorChannel, ColorChannel, ColorChannel] {\n    return HSBColor.colorChannels;\n  }\n}\n\n// X = <negative/positive number with/without decimal places>\n// before/after a comma, 0 or more whitespaces are allowed\n// - hsl(X, X%, X%)\n// - hsla(X, X%, X%, X)\nconst HSL_REGEX = /hsl\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%)\\)|hsla\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d(.\\d+)?)\\)/;\n\nfunction mod(n, m) {\n  return ((n % m) + m) % m;\n}\n\nclass HSLColor extends Color {\n  constructor(private hue: number, private saturation: number, private lightness: number, private alpha: number) {\n    super();\n  }\n\n  static parse(value: string): HSLColor | void {\n    let m: RegExpMatchArray | void;\n    if ((m = value.match(HSL_REGEX))) {\n      const [h, s, l, a] = (m[1] ?? m[2]).split(',').map(n => Number(n.trim().replace('%', '')));\n      return new HSLColor(mod(h, 360), clamp(s, 0, 100), clamp(l, 0, 100), clamp(a ?? 1, 0, 1));\n    }\n  }\n\n  toString(format: ColorFormat | 'css') {\n    switch (format) {\n      case 'hex':\n        return this.toRGB().toString('hex');\n      case 'hexa':\n        return this.toRGB().toString('hexa');\n      case 'hsl':\n        return `hsl(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.lightness, 2)}%)`;\n      case 'css':\n      case 'hsla':\n        return `hsla(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.lightness, 2)}%, ${this.alpha})`;\n      default:\n        return this.toFormat(format).toString(format);\n    }\n  }\n  toFormat(format: ColorFormat): IColor {\n    switch (format) {\n      case 'hsl':\n      case 'hsla':\n        return this;\n      case 'hsb':\n      case 'hsba':\n        return this.toHSB();\n      case 'rgb':\n      case 'rgba':\n        return this.toRGB();\n      default:\n        throw new Error('Unsupported color conversion: hsl -> ' + format);\n    }\n  }\n\n  /**\n   * Converts a HSL color to HSB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_HSV.\n   * @returns An HSBColor object.\n   */\n  private toHSB(): IColor {\n    let saturation = this.saturation / 100;\n    let lightness = this.lightness / 100;\n    let brightness = lightness + saturation * Math.min(lightness, 1 - lightness);\n    saturation = brightness === 0 ? 0 : 2 * (1 - lightness / brightness);\n    return new HSBColor(\n      toFixedNumber(this.hue, 2),\n      toFixedNumber(saturation * 100, 2),\n      toFixedNumber(brightness * 100, 2),\n      this.alpha\n    );\n  }\n\n  /**\n   * Converts a HSL color to RGB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative.\n   * @returns An RGBColor object.\n   */\n  private toRGB(): IColor {\n    let hue = this.hue;\n    let saturation = this.saturation / 100;\n    let lightness = this.lightness / 100;\n    let a = saturation * Math.min(lightness, 1 - lightness);\n    let fn = (n: number, k = (n + hue / 30) % 12) => lightness - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n    return new RGBColor(\n      Math.round(fn(0) * 255),\n      Math.round(fn(8) * 255),\n      Math.round(fn(4) * 255),\n      this.alpha\n    );\n  }\n\n  clone(): IColor {\n    return new HSLColor(this.hue, this.saturation, this.lightness, this.alpha);\n  }\n\n  getChannelRange(channel: ColorChannel): ColorChannelRange {\n    switch (channel) {\n      case 'hue':\n        return {minValue: 0, maxValue: 360, step: 1, pageSize: 15};\n      case 'saturation':\n      case 'lightness':\n        return {minValue: 0, maxValue: 100, step: 1, pageSize: 10};\n      case 'alpha':\n        return {minValue: 0, maxValue: 1, step: 0.01, pageSize: 0.1};\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n  }\n\n  formatChannelValue(channel: ColorChannel, locale: string) {\n    let options: Intl.NumberFormatOptions;\n    let value = this.getChannelValue(channel);\n    switch (channel) {\n      case 'hue':\n        options = {style: 'unit', unit: 'degree', unitDisplay: 'narrow'};\n        break;\n      case 'saturation':\n      case 'lightness':\n        options = {style: 'percent'};\n        value /= 100;\n        break;\n      case 'alpha':\n        options = {style: 'percent'};\n        break;\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n    return new NumberFormatter(locale, options).format(value);\n  }\n\n  getColorSpace(): ColorFormat {\n    return 'hsl';\n  }\n\n  private static colorChannels: [ColorChannel, ColorChannel, ColorChannel] = ['hue', 'saturation', 'lightness'];\n  getColorChannels(): [ColorChannel, ColorChannel, ColorChannel] {\n    return HSLColor.colorChannels;\n  }\n}\n", "const _temp0 = require(\"./ar-AE.json\");\nconst _temp1 = require(\"./bg-BG.json\");\nconst _temp2 = require(\"./cs-CZ.json\");\nconst _temp3 = require(\"./da-DK.json\");\nconst _temp4 = require(\"./de-DE.json\");\nconst _temp5 = require(\"./el-GR.json\");\nconst _temp6 = require(\"./en-US.json\");\nconst _temp7 = require(\"./es-ES.json\");\nconst _temp8 = require(\"./et-EE.json\");\nconst _temp9 = require(\"./fi-FI.json\");\nconst _temp10 = require(\"./fr-FR.json\");\nconst _temp11 = require(\"./he-IL.json\");\nconst _temp12 = require(\"./hr-HR.json\");\nconst _temp13 = require(\"./hu-HU.json\");\nconst _temp14 = require(\"./it-IT.json\");\nconst _temp15 = require(\"./ja-JP.json\");\nconst _temp16 = require(\"./ko-KR.json\");\nconst _temp17 = require(\"./lt-LT.json\");\nconst _temp18 = require(\"./lv-LV.json\");\nconst _temp19 = require(\"./nb-NO.json\");\nconst _temp20 = require(\"./nl-NL.json\");\nconst _temp21 = require(\"./pl-PL.json\");\nconst _temp22 = require(\"./pt-BR.json\");\nconst _temp23 = require(\"./pt-PT.json\");\nconst _temp24 = require(\"./ro-RO.json\");\nconst _temp25 = require(\"./ru-RU.json\");\nconst _temp26 = require(\"./sk-SK.json\");\nconst _temp27 = require(\"./sl-SI.json\");\nconst _temp28 = require(\"./sr-SP.json\");\nconst _temp29 = require(\"./sv-SE.json\");\nconst _temp30 = require(\"./tr-TR.json\");\nconst _temp31 = require(\"./uk-UA.json\");\nconst _temp32 = require(\"./zh-CN.json\");\nconst _temp33 = require(\"./zh-TW.json\");\nmodule.exports = {\n  \"ar-AE\": _temp0,\n  \"bg-BG\": _temp1,\n  \"cs-CZ\": _temp2,\n  \"da-DK\": _temp3,\n  \"de-DE\": _temp4,\n  \"el-GR\": _temp5,\n  \"en-US\": _temp6,\n  \"es-ES\": _temp7,\n  \"et-EE\": _temp8,\n  \"fi-FI\": _temp9,\n  \"fr-FR\": _temp10,\n  \"he-IL\": _temp11,\n  \"hr-HR\": _temp12,\n  \"hu-HU\": _temp13,\n  \"it-IT\": _temp14,\n  \"ja-JP\": _temp15,\n  \"ko-KR\": _temp16,\n  \"lt-LT\": _temp17,\n  \"lv-LV\": _temp18,\n  \"nb-NO\": _temp19,\n  \"nl-NL\": _temp20,\n  \"pl-PL\": _temp21,\n  \"pt-BR\": _temp22,\n  \"pt-PT\": _temp23,\n  \"ro-RO\": _temp24,\n  \"ru-RU\": _temp25,\n  \"sk-SK\": _temp26,\n  \"sl-SI\": _temp27,\n  \"sr-SP\": _temp28,\n  \"sv-SE\": _temp29,\n  \"tr-TR\": _temp30,\n  \"uk-UA\": _temp31,\n  \"zh-CN\": _temp32,\n  \"zh-TW\": _temp33\n}", "{\n  \"alpha\": \"\u0623\u0644\u0641\u0627\",\n  \"blue\": \"\u0623\u0632\u0631\u0642\",\n  \"brightness\": \"\u0627\u0644\u0633\u0637\u0648\u0639\",\n  \"green\": \"\u0623\u062E\u0636\u0631\",\n  \"hue\": \"\u062F\u0631\u062C\u0629 \u0627\u0644\u0644\u0648\u0646\",\n  \"lightness\": \"\u0627\u0644\u0625\u0636\u0627\u0621\u0629\",\n  \"red\": \"\u0623\u062D\u0645\u0631\",\n  \"saturation\": \"\u0627\u0644\u062A\u0634\u0628\u0639\"\n}\n", "{\n  \"alpha\": \"\u0410\u043B\u0444\u0430\",\n  \"blue\": \"\u0421\u0438\u043D\u044C\u043E\",\n  \"brightness\": \"\u042F\u0440\u043A\u043E\u0441\u0442\",\n  \"green\": \"\u0417\u0435\u043B\u0435\u043D\u043E\",\n  \"hue\": \"\u041E\u0442\u0442\u0435\u043D\u044A\u043A\",\n  \"lightness\": \"\u041B\u0435\u043A\u043E\u0442\u0430\",\n  \"red\": \"\u0427\u0435\u0440\u0432\u0435\u043D\u043E\",\n  \"saturation\": \"\u041D\u0430\u0441\u0438\u0442\u0435\u043D\u043E\u0441\u0442\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Modr\u00E1\",\n  \"brightness\": \"Jas\",\n  \"green\": \"Zelen\u00E1\",\n  \"hue\": \"Odst\u00EDn\",\n  \"lightness\": \"Sv\u011Btlost\",\n  \"red\": \"\u010Cerven\u00E1\",\n  \"saturation\": \"Sytost\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Bl\u00E5\",\n  \"brightness\": \"Lysstyrke\",\n  \"green\": \"Gr\u00F8n\",\n  \"hue\": \"Tone\",\n  \"lightness\": \"Lyshed\",\n  \"red\": \"R\u00F8d\",\n  \"saturation\": \"Farvem\u00E6tning\"\n}\n", "{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"Blau\",\n  \"brightness\": \"Helligkeit\",\n  \"green\": \"Gr\u00FCn\",\n  \"hue\": \"Farbton\",\n  \"lightness\": \"Leuchtkraft\",\n  \"red\": \"Rot\",\n  \"saturation\": \"S\u00E4ttigung\"\n}\n", "{\n  \"alpha\": \"\u0386\u03BB\u03C6\u03B1\",\n  \"blue\": \"\u039C\u03C0\u03BB\u03B5\",\n  \"brightness\": \"\u03A6\u03C9\u03C4\u03B5\u03B9\u03BD\u03CC\u03C4\u03B7\u03C4\u03B1\",\n  \"green\": \"\u03A0\u03C1\u03AC\u03C3\u03B9\u03BD\u03BF\",\n  \"hue\": \"\u03A4\u03CC\u03BD\u03BF\u03C2\",\n  \"lightness\": \"\u03A6\u03C9\u03C4\u03B5\u03B9\u03BD\u03CC\u03C4\u03B7\u03C4\u03B1\",\n  \"red\": \"\u039A\u03CC\u03BA\u03BA\u03B9\u03BD\u03BF\",\n  \"saturation\": \"\u039A\u03BF\u03C1\u03B5\u03C3\u03BC\u03CC\u03C2\"\n}\n", "{\n  \"hue\": \"Hue\",\n  \"saturation\": \"Saturation\",\n  \"lightness\": \"Lightness\",\n  \"brightness\": \"Brightness\",\n  \"red\": \"Red\",\n  \"green\": \"Green\",\n  \"blue\": \"Blue\",\n  \"alpha\": \"Alpha\"\n}\n", "{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"Azul\",\n  \"brightness\": \"Brillo\",\n  \"green\": \"Verde\",\n  \"hue\": \"Tono\",\n  \"lightness\": \"Luminosidad\",\n  \"red\": \"Rojo\",\n  \"saturation\": \"Saturaci\u00F3n\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Sinine\",\n  \"brightness\": \"Heledus\",\n  \"green\": \"Roheline\",\n  \"hue\": \"V\u00E4rv\",\n  \"lightness\": \"Valgus\",\n  \"red\": \"Punane\",\n  \"saturation\": \"K\u00FCllastus\"\n}\n", "{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"Sininen\",\n  \"brightness\": \"Kirkkaus\",\n  \"green\": \"Vihre\u00E4\",\n  \"hue\": \"S\u00E4vy\",\n  \"lightness\": \"Valom\u00E4\u00E4r\u00E4\",\n  \"red\": \"Punainen\",\n  \"saturation\": \"V\u00E4rikyll\u00E4isyys\"\n}\n", "{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"Bleu\",\n  \"brightness\": \"Luminosit\u00E9\",\n  \"green\": \"Vert\",\n  \"hue\": \"Teinte\",\n  \"lightness\": \"Luminosit\u00E9\",\n  \"red\": \"Rouge\",\n  \"saturation\": \"Saturation\"\n}\n", "{\n  \"alpha\": \"\u05D0\u05DC\u05E4\u05D0\",\n  \"blue\": \"\u05DB\u05D7\u05D5\u05DC\",\n  \"brightness\": \"\u05D1\u05D4\u05D9\u05E8\u05D5\u05EA\",\n  \"green\": \"\u05D9\u05E8\u05D5\u05E7\",\n  \"hue\": \"\u05D2\u05D5\u05D5\u05DF\",\n  \"lightness\": \"\u05DB\u05DE\u05D5\u05EA \u05D0\u05D5\u05E8\",\n  \"red\": \"\u05D0\u05D3\u05D5\u05DD\",\n  \"saturation\": \"\u05E8\u05D5\u05D5\u05D9\u05D4\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Plava\",\n  \"brightness\": \"Svjetlina\",\n  \"green\": \"Zelena\",\n  \"hue\": \"Nijansa\",\n  \"lightness\": \"Osvijetljenost\",\n  \"red\": \"Crvena\",\n  \"saturation\": \"Zasi\u0107enost\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"K\u00E9k\",\n  \"brightness\": \"F\u00E9nyess\u00E9g\",\n  \"green\": \"Z\u00F6ld\",\n  \"hue\": \"Sz\u00EDn\u00E1rnyalat\",\n  \"lightness\": \"Vil\u00E1goss\u00E1g\",\n  \"red\": \"Piros\",\n  \"saturation\": \"Tel\u00EDtetts\u00E9g\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Blu\",\n  \"brightness\": \"Luminosit\u00E0\",\n  \"green\": \"Verde\",\n  \"hue\": \"Tonalit\u00E0\",\n  \"lightness\": \"Luminosit\u00E0\",\n  \"red\": \"Rosso\",\n  \"saturation\": \"Saturazione\"\n}\n", "{\n  \"alpha\": \"\u30A2\u30EB\u30D5\u30A1\",\n  \"blue\": \"\u9752\",\n  \"brightness\": \"\u660E\u308B\u3055\",\n  \"green\": \"\u7DD1\",\n  \"hue\": \"\u8272\u76F8\",\n  \"lightness\": \"\u660E\u5EA6\",\n  \"red\": \"\u8D64\",\n  \"saturation\": \"\u5F69\u5EA6\"\n}\n", "{\n  \"alpha\": \"\uC54C\uD30C\",\n  \"blue\": \"\uD30C\uB791\",\n  \"brightness\": \"\uBA85\uB3C4\",\n  \"green\": \"\uCD08\uB85D\",\n  \"hue\": \"\uC0C9\uC870\",\n  \"lightness\": \"\uBC1D\uAE30\",\n  \"red\": \"\uBE68\uAC15\",\n  \"saturation\": \"\uCC44\uB3C4\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"M\u0117lyna\",\n  \"brightness\": \"Ry\u0161kumas\",\n  \"green\": \"\u017Dalia\",\n  \"hue\": \"Atspalvis\",\n  \"lightness\": \"\u0160viesumas\",\n  \"red\": \"Raudona\",\n  \"saturation\": \"\u012Esotinimas\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Zila\",\n  \"brightness\": \"Spilgtums\",\n  \"green\": \"Za\u013Ca\",\n  \"hue\": \"Nokr\u0101sa\",\n  \"lightness\": \"Gai\u0161ums\",\n  \"red\": \"Sarkana\",\n  \"saturation\": \"Pies\u0101tin\u0101jums\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Bl\u00E5\",\n  \"brightness\": \"Lysstyrke\",\n  \"green\": \"Gr\u00F8nn\",\n  \"hue\": \"Fargetone\",\n  \"lightness\": \"Lyshet\",\n  \"red\": \"R\u00F8d\",\n  \"saturation\": \"Metning\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Blauw\",\n  \"brightness\": \"Helderheid\",\n  \"green\": \"Groen\",\n  \"hue\": \"Kleurtoon\",\n  \"lightness\": \"Lichtsterkte\",\n  \"red\": \"Rood\",\n  \"saturation\": \"Verzadiging\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Niebieski\",\n  \"brightness\": \"Jasno\u015B\u0107\",\n  \"green\": \"Zielony\",\n  \"hue\": \"Odcie\u0144\",\n  \"lightness\": \"Jaskrawo\u015B\u0107\",\n  \"red\": \"Czerwony\",\n  \"saturation\": \"Nasycenie\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Azul\",\n  \"brightness\": \"Brilho\",\n  \"green\": \"Verde\",\n  \"hue\": \"Matiz\",\n  \"lightness\": \"Luminosidade\",\n  \"red\": \"Vermelho\",\n  \"saturation\": \"Satura\u00E7\u00E3o\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Azul\",\n  \"brightness\": \"Luminosidade\",\n  \"green\": \"Verde\",\n  \"hue\": \"Tonalidade\",\n  \"lightness\": \"Claridade\",\n  \"red\": \"Vermelho\",\n  \"saturation\": \"Satura\u00E7\u00E3o\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Albastru\",\n  \"brightness\": \"Luminozitate\",\n  \"green\": \"Verde\",\n  \"hue\": \"Nuan\u021B\u0103\",\n  \"lightness\": \"Luminozitate\",\n  \"red\": \"Ro\u0219u\",\n  \"saturation\": \"Satura\u021Bie\"\n}\n", "{\n  \"alpha\": \"\u0410\u043B\u044C\u0444\u0430\",\n  \"blue\": \"\u0421\u0438\u043D\u0438\u0439\",\n  \"brightness\": \"\u042F\u0440\u043A\u043E\u0441\u0442\u044C\",\n  \"green\": \"\u0417\u0435\u043B\u0435\u043D\u044B\u0439\",\n  \"hue\": \"\u041E\u0442\u0442\u0435\u043D\u043E\u043A\",\n  \"lightness\": \"\u041E\u0441\u0432\u0435\u0449\u0435\u043D\u043D\u043E\u0441\u0442\u044C\",\n  \"red\": \"\u041A\u0440\u0430\u0441\u043D\u044B\u0439\",\n  \"saturation\": \"\u041D\u0430\u0441\u044B\u0449\u0435\u043D\u043D\u043E\u0441\u0442\u044C\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Modr\u00E1\",\n  \"brightness\": \"Jas\",\n  \"green\": \"Zelen\u00E1\",\n  \"hue\": \"Odtie\u0148\",\n  \"lightness\": \"Svetlos\u0165\",\n  \"red\": \"\u010Cerven\u00E1\",\n  \"saturation\": \"S\u00FDtos\u0165\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Modra\",\n  \"brightness\": \"Svetlost\",\n  \"green\": \"Zelena\",\n  \"hue\": \"Barva\",\n  \"lightness\": \"Lahkost\",\n  \"red\": \"Rde\u010Da\",\n  \"saturation\": \"Nasi\u010Denost\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Plava\",\n  \"brightness\": \"Osvetljenost\",\n  \"green\": \"Zelena\",\n  \"hue\": \"Nijansa\",\n  \"lightness\": \"Osvetljenje\",\n  \"red\": \"Crvena\",\n  \"saturation\": \"Zasi\u0107enje\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Bl\u00E5tt\",\n  \"brightness\": \"Ljusstyrka\",\n  \"green\": \"Gr\u00F6nt\",\n  \"hue\": \"Nyans\",\n  \"lightness\": \"Ljushet\",\n  \"red\": \"R\u00F6tt\",\n  \"saturation\": \"M\u00E4ttnad\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Mavi\",\n  \"brightness\": \"Parlakl\u0131k\",\n  \"green\": \"Ye\u015Fil\",\n  \"hue\": \"Ton\",\n  \"lightness\": \"Canl\u0131l\u0131k\",\n  \"red\": \"K\u0131rm\u0131z\u0131\",\n  \"saturation\": \"Doygunluk\"\n}\n", "{\n  \"alpha\": \"\u0410\u043B\u044C\u0444\u0430\",\n  \"blue\": \"\u0421\u0438\u043D\u0456\u0439\",\n  \"brightness\": \"\u042F\u0441\u043A\u0440\u0430\u0432\u0456\u0441\u0442\u044C\",\n  \"green\": \"\u0417\u0435\u043B\u0435\u043D\u0438\u0439\",\n  \"hue\": \"\u0422\u043E\u043D\",\n  \"lightness\": \"\u041E\u0441\u0432\u0456\u0442\u043B\u0435\u043D\u0456\u0441\u0442\u044C\",\n  \"red\": \"\u0427\u0435\u0440\u0432\u043E\u043D\u0438\u0439\",\n  \"saturation\": \"\u041D\u0430\u0441\u0438\u0447\u0435\u043D\u0456\u0441\u0442\u044C\"\n}\n", "{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"\u84DD\u8272\",\n  \"brightness\": \"\u4EAE\u5EA6\",\n  \"green\": \"\u7EFF\u8272\",\n  \"hue\": \"\u8272\u76F8\",\n  \"lightness\": \"\u660E\u4EAE\u5EA6\",\n  \"red\": \"\u7EA2\u8272\",\n  \"saturation\": \"\u9971\u548C\u5EA6\"\n}\n", "{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"\u85CD\u8272\",\n  \"brightness\": \"\u4EAE\u5EA6\",\n  \"green\": \"\u7DA0\u8272\",\n  \"hue\": \"\u8272\u76F8\",\n  \"lightness\": \"\u660E\u4EAE\",\n  \"red\": \"\u7D05\u8272\",\n  \"saturation\": \"\u98FD\u548C\u5EA6\"\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, snapValueToStep, useControlledState} from '@react-stately/utils';\nimport {Color, ColorAreaProps, ColorChannel} from '@react-types/color';\nimport {normalizeColor, parseColor} from './Color';\nimport {useMemo, useRef, useState} from 'react';\n\nexport interface ColorAreaState {\n  /** The current color value displayed by the color area. */\n  readonly value: Color,\n  /** Sets the current color value. If a string is passed, it will be parsed to a Color. */\n  setValue(value: string | Color): void,\n\n  /** The current value of the horizontal axis channel displayed by the color area. */\n  xValue: number,\n  /** Sets the value for the horizontal axis channel displayed by the color area, and triggers `onChange`. */\n  setXValue(value: number): void,\n\n  /** The current value of the vertical axis channel displayed by the color area. */\n  yValue: number,\n  /** Sets the value for the vertical axis channel displayed by the color area, and triggers `onChange`. */\n  setYValue(value: number): void,\n\n  /** Sets the x and y channels of the current color value based on a percentage of the width and height of the color area, and triggers `onChange`. */\n  setColorFromPoint(x: number, y: number): void,\n  /** Returns the coordinates of the thumb relative to the upper left corner of the color area as a percentage. */\n  getThumbPosition(): {x: number, y: number},\n\n  /** Increments the value of the horizontal axis channel by the channel step or page amount. */\n  incrementX(stepSize?: number): void,\n  /** Decrements the value of the horizontal axis channel by the channel step or page amount. */\n  decrementX(stepSize?: number): void,\n\n  /** Increments the value of the vertical axis channel by the channel step or page amount. */\n  incrementY(stepSize?: number): void,\n  /** Decrements the value of the vertical axis channel by the channel step or page amount. */\n  decrementY(stepSize?: number): void,\n\n  /** Whether the color area is currently being dragged. */\n  readonly isDragging: boolean,\n  /** Sets whether the color area is being dragged. */\n  setDragging(value: boolean): void,\n\n  /** Returns the xChannel, yChannel and zChannel names based on the color value. */\n  channels: {xChannel: ColorChannel, yChannel: ColorChannel, zChannel: ColorChannel},\n  xChannelStep: number,\n  yChannelStep: number,\n  xChannelPageStep: number,\n  yChannelPageStep: number,\n\n  /** Returns the color that should be displayed in the color area thumb instead of `value`. */\n  getDisplayColor(): Color\n}\n\nconst DEFAULT_COLOR = parseColor('#ffffff');\n/**\n * Provides state management for a color area component.\n * Color area allows users to adjust two channels of an HSL, HSB or RGB color value against a two-dimensional gradient background.\n */\nexport function useColorAreaState(props: ColorAreaProps): ColorAreaState {\n  let {\n    value,\n    defaultValue,\n    xChannel,\n    yChannel,\n    onChange,\n    onChangeEnd\n  } = props;\n\n  if (!value && !defaultValue) {\n    defaultValue = DEFAULT_COLOR;\n  }\n\n  let [color, setColor] = useControlledState(value && normalizeColor(value), defaultValue && normalizeColor(defaultValue), onChange);\n  let valueRef = useRef(color);\n  valueRef.current = color;\n\n  let channels = useMemo(() =>\n    valueRef.current.getColorSpaceAxes({xChannel, yChannel}),\n    [xChannel, yChannel]\n  );\n\n  let xChannelRange = color.getChannelRange(channels.xChannel);\n  let yChannelRange = color.getChannelRange(channels.yChannel);\n  let {minValue: minValueX, maxValue: maxValueX, step: stepX, pageSize: pageSizeX} = xChannelRange;\n  let {minValue: minValueY, maxValue: maxValueY, step: stepY, pageSize: pageSizeY} = yChannelRange;\n\n  let [isDragging, setDragging] = useState(false);\n  let isDraggingRef = useRef(false).current;\n\n  let xValue = color.getChannelValue(channels.xChannel);\n  let yValue = color.getChannelValue(channels.yChannel);\n  let setXValue = (v: number) => {\n    if (v === xValue) {\n      return;\n    }\n    valueRef.current = color.withChannelValue(channels.xChannel, v);\n    setColor(valueRef.current);\n  };\n  let setYValue = (v: number) => {\n    if (v === yValue) {\n      return;\n    }\n    valueRef.current = color.withChannelValue(channels.yChannel, v);\n    setColor(valueRef.current);\n  };\n\n  return {\n    channels,\n    xChannelStep: stepX,\n    yChannelStep: stepY,\n    xChannelPageStep: pageSizeX,\n    yChannelPageStep: pageSizeY,\n    value: color,\n    setValue(value) {\n      let c = normalizeColor(value);\n      valueRef.current = c;\n      setColor(c);\n    },\n    xValue,\n    setXValue,\n    yValue,\n    setYValue,\n    setColorFromPoint(x: number, y: number) {\n      let newXValue = minValueX + clamp(x, 0, 1) * (maxValueX - minValueX);\n      let newYValue = minValueY + (1 - clamp(y, 0, 1)) * (maxValueY - minValueY);\n      let newColor:Color;\n      if (newXValue !== xValue) {\n        // Round new value to multiple of step, clamp value between min and max\n        newXValue = snapValueToStep(newXValue, minValueX, maxValueX, stepX);\n        newColor = color.withChannelValue(channels.xChannel, newXValue);\n      }\n      if (newYValue !== yValue) {\n        // Round new value to multiple of step, clamp value between min and max\n        newYValue = snapValueToStep(newYValue, minValueY, maxValueY, stepY);\n        newColor = (newColor || color).withChannelValue(channels.yChannel, newYValue);\n      }\n      if (newColor) {\n        setColor(newColor);\n      }\n    },\n    getThumbPosition() {\n      let x = (xValue - minValueX) / (maxValueX - minValueX);\n      let y = 1 - (yValue - minValueY) / (maxValueY - minValueY);\n      return {x, y};\n    },\n    incrementX(stepSize) {\n      setXValue(xValue + stepSize > maxValueX ? maxValueX : snapValueToStep(xValue + stepSize, minValueX, maxValueX, stepX));\n    },\n    incrementY(stepSize) {\n      setYValue(yValue + stepSize > maxValueY ? maxValueY : snapValueToStep(yValue + stepSize, minValueY, maxValueY, stepY));\n    },\n    decrementX(stepSize) {\n      setXValue(snapValueToStep(xValue - stepSize, minValueX, maxValueX, stepX));\n    },\n    decrementY(stepSize) {\n      setYValue(snapValueToStep(yValue - stepSize, minValueY, maxValueY, stepY));\n    },\n    setDragging(isDragging) {\n      let wasDragging = isDraggingRef;\n      isDraggingRef = isDragging;\n\n      if (onChangeEnd && !isDragging && wasDragging) {\n        onChangeEnd(valueRef.current);\n      }\n\n      setDragging(isDragging);\n    },\n    isDragging,\n    getDisplayColor() {\n      return color.withChannelValue('alpha', 1);\n    }\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Color, ColorSliderProps} from '@react-types/color';\nimport {normalizeColor, parseColor} from './Color';\nimport {SliderState, useSliderState} from '@react-stately/slider';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface ColorSliderState extends SliderState {\n  /** The current color value represented by the color slider. */\n  readonly value: Color,\n  /** Sets the current color value. If a string is passed, it will be parsed to a Color. */\n  setValue(value: string | Color): void,\n  /** Returns the color that should be displayed in the slider instead of `value` or the optional parameter. */\n  getDisplayColor(): Color\n}\n\n\ninterface ColorSliderStateOptions extends ColorSliderProps {\n  /** The locale to use for formatting the color channel value. */\n  locale: string\n}\n\n/**\n * Provides state management for a color slider component.\n * Color sliders allow users to adjust an individual channel of a color value.\n */\nexport function useColorSliderState(props: ColorSliderStateOptions): ColorSliderState {\n  let {channel, value, defaultValue, onChange, locale, ...otherProps} = props;\n  if (value == null && defaultValue == null) {\n    throw new Error('useColorSliderState requires a value or defaultValue');\n  }\n\n  let [color, setColor] = useControlledState(value && normalizeColor(value), defaultValue && normalizeColor(defaultValue), onChange);\n  let sliderState = useSliderState({\n    ...color.getChannelRange(channel),\n    ...otherProps,\n    // Unused except in getThumbValueLabel, which is overridden below. null to appease TypeScript.\n    numberFormatter: null,\n    value: [color.getChannelValue(channel)],\n    onChange([v]) {\n      setColor(color.withChannelValue(channel, v));\n    },\n    onChangeEnd([v]) {\n      // onChange will have already been called with the right value, this is just to trigger onChangeEnd\n      if (props.onChangeEnd) {\n        props.onChangeEnd(color.withChannelValue(channel, v));\n      }\n    }\n  });\n\n  let {step, pageSize} = color.getChannelRange(channel);\n  return {\n    ...sliderState,\n    value: color,\n    setValue(value) {\n      setColor(normalizeColor(value));\n    },\n    getDisplayColor() {\n      switch (channel) {\n        case 'hue':\n          return parseColor(`hsl(${color.getChannelValue('hue')}, 100%, 50%)`);\n        case 'lightness':\n        case 'brightness':\n        case 'saturation':\n        case 'red':\n        case 'green':\n        case 'blue':\n          return color.withChannelValue('alpha', 1);\n        case 'alpha': {\n          return color;\n        }\n        default:\n          throw new Error('Unknown color channel: ' + channel);\n      }\n    },\n    getThumbValueLabel() {\n      return color.formatChannelValue(channel, locale);\n    },\n    step,\n    pageSize\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Color, ColorWheelProps} from '@react-types/color';\nimport {normalizeColor, parseColor} from './Color';\nimport {useControlledState} from '@react-stately/utils';\nimport {useRef, useState} from 'react';\n\nexport interface ColorWheelState {\n  /** The current color value represented by the color wheel. */\n  readonly value: Color,\n  /** Sets the color value represented by the color wheel, and triggers `onChange`. */\n  setValue(value: string | Color): void,\n\n  /** The current value of the hue channel displayed by the color wheel. */\n  readonly hue: number,\n  /** Sets the hue channel of the current color value and triggers `onChange`. */\n  setHue(value: number): void,\n\n  /** Sets the hue channel of the current color value based on the given coordinates and radius of the color wheel, and triggers `onChange`. */\n  setHueFromPoint(x: number, y: number, radius: number): void,\n  /** Returns the coordinates of the thumb relative to the center point of the color wheel. */\n  getThumbPosition(radius: number): {x: number, y: number},\n\n  /** Increments the hue by the given amount (defaults to 1). */\n  increment(stepSize?: number): void,\n  /** Decrements the hue by the given amount (defaults to 1). */\n  decrement(stepSize?: number): void,\n\n  /** Whether the color wheel is currently being dragged. */\n  readonly isDragging: boolean,\n  /** Sets whether the color wheel is being dragged. */\n  setDragging(value: boolean): void,\n  /** Returns the color that should be displayed in the color wheel instead of `value`. */\n  getDisplayColor(): Color,\n  step: number,\n  pageStep: number\n}\n\nconst DEFAULT_COLOR = parseColor('hsl(0, 100%, 50%)');\n\nfunction roundToStep(value: number, step: number): number {\n  return Math.round(value / step) * step;\n}\n\nfunction mod(n: number, m: number) {\n  return ((n % m) + m) % m;\n}\n\nfunction roundDown(v: number) {\n  let r = Math.floor(v);\n  if (r === v) {\n    return v - 1;\n  } else {\n    return r;\n  }\n}\n\nfunction degToRad(deg: number) {\n  return deg * Math.PI / 180;\n}\n\nfunction radToDeg(rad: number) {\n  return rad * 180 / Math.PI;\n}\n\n// 0deg = 3 o'clock. increases clockwise\nfunction angleToCartesian(angle: number, radius: number): {x: number, y: number} {\n  let rad = degToRad(360 - angle + 90);\n  let x = Math.sin(rad) * (radius);\n  let y = Math.cos(rad) * (radius);\n  return {x, y};\n}\n\nfunction cartesianToAngle(x: number, y: number, radius: number): number {\n  let deg = radToDeg(Math.atan2(y / radius, x / radius));\n  return (deg + 360) % 360;\n}\n\n/**\n * Provides state management for a color wheel component.\n * Color wheels allow users to adjust the hue of an HSL or HSB color value on a circular track.\n */\nexport function useColorWheelState(props: ColorWheelProps): ColorWheelState {\n  let {defaultValue, onChange, onChangeEnd} = props;\n\n  if (!props.value && !defaultValue) {\n    defaultValue = DEFAULT_COLOR;\n  }\n\n  let [value, setValue] = useControlledState(normalizeColor(props.value), normalizeColor(defaultValue), onChange);\n  let valueRef = useRef(value);\n  valueRef.current = value;\n\n  let channelRange = value.getChannelRange('hue');\n  let {minValue: minValueX, maxValue: maxValueX, step: step, pageSize: pageStep} = channelRange;\n  let [isDragging, setDragging] = useState(false);\n  let isDraggingRef = useRef(false).current;\n\n  let hue = value.getChannelValue('hue');\n  function setHue(v: number) {\n    if (v > 360) {\n      // Make sure you can always get back to 0.\n      v = 0;\n    }\n    v = roundToStep(mod(v, 360), step);\n    if (hue !== v) {\n      let color = value.withChannelValue('hue', v);\n      valueRef.current = color;\n      setValue(color);\n    }\n  }\n\n  return {\n    value,\n    step,\n    pageStep,\n    setValue(v) {\n      let color = normalizeColor(v);\n      valueRef.current = color;\n      setValue(color);\n    },\n    hue,\n    setHue,\n    setHueFromPoint(x, y, radius) {\n      setHue(cartesianToAngle(x, y, radius));\n    },\n    getThumbPosition(radius) {\n      return angleToCartesian(value.getChannelValue('hue'), radius);\n    },\n    increment(stepSize = 1) {\n      let s = Math.max(stepSize, step);\n      let newValue = hue + s;\n      if (newValue >= maxValueX) {\n        // Make sure you can always get back to 0.\n        newValue = minValueX;\n      }\n      setHue(roundToStep(mod(newValue, 360), s));\n    },\n    decrement(stepSize = 1) {\n      let s = Math.max(stepSize, step);\n      if (hue === 0) {\n        // We can't just subtract step because this might be the case:\n        // |(previous step) - 0| < step size\n        setHue(roundDown(360 / s) * s);\n      } else {\n        setHue(roundToStep(mod(hue - s, 360), s));\n      }\n    },\n    setDragging(isDragging) {\n      let wasDragging = isDraggingRef;\n      isDraggingRef = isDragging;\n\n      if (onChangeEnd && !isDragging && wasDragging) {\n        onChangeEnd(valueRef.current);\n      }\n\n      setDragging(isDragging);\n    },\n    isDragging,\n    getDisplayColor() {\n      return value.toFormat('hsl').withChannelValue('saturation', 100).withChannelValue('lightness', 50);\n    }\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Color, ColorFieldProps} from '@react-types/color';\nimport {parseColor} from './Color';\nimport {useColor} from './useColor';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useRef, useState} from 'react';\n\nexport interface ColorFieldState {\n  /**\n   * The current text value of the input. Updated as the user types,\n   * and formatted according to `formatOptions` on blur.\n   */\n  readonly inputValue: string,\n  /**\n   * The currently parsed color value, or null if the field is empty.\n   * Updated based on the `inputValue` as the user types.\n   */\n  readonly colorValue: Color,\n  /** Sets the current text value of the input. */\n  setInputValue(value: string): void,\n  /**\n   * Updates the input value based on the currently parsed color value.\n   * Typically this is called when the field is blurred.\n   */\n  commit(): void,\n  /** Increments the current input value to the next step boundary, and fires `onChange`. */\n  increment(): void,\n  /** Decrements the current input value to the next step boundary, and fires `onChange`. */\n  decrement(): void,\n  /** Sets the current value to the maximum color value, and fires `onChange`. */\n  incrementToMax(): void,\n  /** Sets the current value to the minimum color value, and fires `onChange`. */\n  decrementToMin(): void,\n  /**\n   * Validates a user input string.\n   * Values can be partially entered, and may be valid even if they cannot currently be parsed to a color.\n   * Can be used to implement validation as a user types.\n   */\n  validate(value: string): boolean\n}\n\nconst MIN_COLOR = parseColor('#000000');\nconst MAX_COLOR = parseColor('#FFFFFF');\nconst MIN_COLOR_INT = MIN_COLOR.toHexInt();\nconst MAX_COLOR_INT = MAX_COLOR.toHexInt();\n\n/**\n * Provides state management for a color field component. Color fields allow\n * users to enter and adjust a hex color value.\n */\nexport function useColorFieldState(\n  props: ColorFieldProps\n): ColorFieldState {\n  let {\n    value,\n    defaultValue,\n    onChange\n  } = props;\n  let {step} = MIN_COLOR.getChannelRange('red');\n\n  let initialValue = useColor(value);\n  let initialDefaultValue = useColor(defaultValue);\n  let [colorValue, setColorValue] = useControlledState<Color>(initialValue, initialDefaultValue, onChange);\n  let [inputValue, setInputValue] = useState(() => (value || defaultValue) && colorValue ? colorValue.toString('hex') : '');\n\n  let safelySetColorValue = (newColor: Color) => {\n    if (!colorValue || !newColor) {\n      setColorValue(newColor);\n      return;\n    }\n    if (newColor.toHexInt() !== colorValue.toHexInt()) {\n      setColorValue(newColor);\n      return;\n    }\n  };\n\n  let prevValue = useRef(colorValue);\n  if (prevValue.current !== colorValue) {\n    setInputValue(colorValue ? colorValue.toString('hex') : '');\n    prevValue.current = colorValue;\n  }\n\n\n  let parsedValue = useMemo(() => {\n    let color;\n    try {\n      color = parseColor(inputValue.startsWith('#') ? inputValue : `#${inputValue}`);\n    } catch (err) {\n      color = null;\n    }\n    return color;\n  }, [parseColor, inputValue]);\n  let parsed = useRef(null);\n  parsed.current = parsedValue;\n\n  let commit = () => {\n    // Set to empty state if input value is empty\n    if (!inputValue.length) {\n      safelySetColorValue(null);\n      setInputValue(value === undefined ? '' : colorValue.toString('hex'));\n      return;\n    }\n\n    // if it failed to parse, then reset input to formatted version of current number\n    if (parsed.current == null) {\n      setInputValue(colorValue ? colorValue.toString('hex') : '');\n      return;\n    }\n\n    safelySetColorValue(parsed.current);\n    // in a controlled state, the numberValue won't change, so we won't go back to our old input without help\n    let newColorValue = '';\n    if (colorValue) {\n      newColorValue = colorValue.toString('hex');\n    }\n    setInputValue(newColorValue);\n  };\n\n  let increment = () => {\n    let newValue = addColorValue(parsed.current, step);\n    // if we've arrived at the same value that was previously in the state, the\n    // input value should be updated to match\n    // ex type 4, press increment, highlight the number in the input, type 4 again, press increment\n    // you'd be at 5, then incrementing to 5 again, so no re-render would happen and 4 would be left in the input\n    if (newValue === colorValue) {\n      setInputValue(newValue.toString('hex'));\n    }\n    safelySetColorValue(newValue);\n  };\n  let decrement = () => {\n    let newValue = addColorValue(parsed.current, -step);\n    // if we've arrived at the same value that was previously in the state, the\n    // input value should be updated to match\n    // ex type 4, press increment, highlight the number in the input, type 4 again, press increment\n    // you'd be at 5, then incrementing to 5 again, so no re-render would happen and 4 would be left in the input\n    if (newValue === colorValue) {\n      setInputValue(newValue.toString('hex'));\n    }\n    safelySetColorValue(newValue);\n  };\n  let incrementToMax = () => safelySetColorValue(MAX_COLOR);\n  let decrementToMin = () => safelySetColorValue(MIN_COLOR);\n\n  let validate = (value: string) => value === '' || !!value.match(/^#?[0-9a-f]{0,6}$/i)?.[0];\n\n  return {\n    validate,\n    colorValue,\n    inputValue,\n    setInputValue,\n    commit,\n    increment,\n    incrementToMax,\n    decrement,\n    decrementToMin\n  };\n}\n\nfunction addColorValue(color: Color, step: number) {\n  let newColor = color ? color : MIN_COLOR;\n  let colorInt = newColor.toHexInt();\n\n  let clampInt = Math.min(Math.max(colorInt + step, MIN_COLOR_INT), MAX_COLOR_INT);\n  if (clampInt !== colorInt) {\n    let newColorString = `#${clampInt.toString(16).padStart(6, '0').toUpperCase()}`;\n    newColor = parseColor(newColorString);\n  }\n  return newColor;\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Color} from '@react-types/color';\nimport {parseColor} from './Color';\nimport {useMemo} from 'react';\n\nexport function useColor(value: string | Color) {\n  return useMemo(() => {\n    if (typeof value === 'string') {\n      try {\n        return parseColor(value);\n      } catch (err) {\n        return undefined;\n      }\n    }\n    return value;\n  }, [value]);\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/// <reference types=\"css-module-types\" />\n\nexport * from './ColorArea';\nexport * from './ColorWheel';\nexport * from './ColorSlider';\nexport * from './ColorField';\n", "/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, dimensionValue, useFocusableRef, useStyleProps} from '@react-spectrum/utils';\nimport {ColorThumb} from './ColorThumb';\nimport {FocusableRef} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ReactElement, useRef} from 'react';\nimport {SpectrumColorAreaProps} from '@react-types/color';\nimport styles from '@adobe/spectrum-css-temp/components/colorarea/vars.css';\nimport {useColorArea} from '@react-aria/color';\nimport {useColorAreaState} from '@react-stately/color';\nimport {useFocusRing} from '@react-aria/focus';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nfunction ColorArea(props: SpectrumColorAreaProps, ref: FocusableRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n\n  let {isDisabled} = props;\n  let size = props.size && dimensionValue(props.size);\n  let {styleProps} = useStyleProps(props);\n\n  let inputXRef = useRef();\n  let inputYRef = useRef();\n  let containerRef = useFocusableRef(ref, inputXRef);\n\n  let state = useColorAreaState(props);\n\n  let {\n    colorAreaProps,\n    gradientProps,\n    xInputProps,\n    yInputProps,\n    thumbProps\n  } = useColorArea({...props, inputXRef, inputYRef, containerRef}, state);\n  let {focusProps, isFocusVisible} = useFocusRing();\n\n  return (\n    <div\n      {...colorAreaProps}\n      className={\n        classNames(\n          styles,\n          'spectrum-ColorArea',\n          {\n            'is-disabled': isDisabled\n          },\n          styleProps.className\n        )\n      }\n      ref={containerRef}\n      style={{\n        ...colorAreaProps.style,\n        ...styleProps.style,\n        // Workaround around https://github.com/adobe/spectrum-css/issues/1032\n        width: size,\n        height: size\n      }}>\n      <div {...gradientProps} className={classNames(styles, 'spectrum-ColorArea-gradient')} />\n      <ColorThumb\n        value={state.getDisplayColor()}\n        isFocused={isFocusVisible}\n        isDisabled={isDisabled}\n        isDragging={state.isDragging}\n        className={classNames(styles, 'spectrum-ColorArea-handle')}\n        {...thumbProps}>\n        <div role=\"presentation\">\n          <input className={classNames(styles, 'spectrum-ColorArea-slider')} {...mergeProps(xInputProps, focusProps)} ref={inputXRef} />\n          <input className={classNames(styles, 'spectrum-ColorArea-slider')} {...mergeProps(yInputProps, focusProps)} ref={inputYRef} />\n        </div>\n      </ColorThumb>\n    </div>\n  );\n}\n\nlet _ColorArea = React.forwardRef(ColorArea) as (props: SpectrumColorAreaProps & {ref?: FocusableRef<HTMLDivElement>}) => ReactElement;\nexport {_ColorArea as ColorArea};\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames} from '@react-spectrum/utils';\nimport {Color} from '@react-types/color';\nimport {DOMProps} from '@react-types/shared';\nimport React, {ReactElement} from 'react';\nimport stylesHandle from '@adobe/spectrum-css-temp/components/colorhandle/vars.css';\nimport stylesLoupe from '@adobe/spectrum-css-temp/components/colorloupe/vars.css';\nimport {useId} from '@react-aria/utils';\n\ninterface ColorThumbProps extends DOMProps {\n  value: Color,\n  isDisabled?: boolean,\n  isDragging?: boolean, // shows the color loupe\n  isFocused?: boolean, // makes the circle larger\n  className?: string,\n  children?: ReactElement\n}\n\nfunction ColorThumb(props: ColorThumbProps) {\n  let {value, isDisabled, isDragging, isFocused, children, className = '', ...otherProps} = props;\n\n  let patternId = useId();\n\n  let valueCSS = value.toString('css');\n\n  return (\n    <div className={classNames(stylesHandle, 'spectrum-ColorHandle', {'is-focused': isFocused, 'is-disabled': isDisabled}) + ' ' + className} {...otherProps}>\n      <div className={classNames(stylesHandle, 'spectrum-ColorHandle-color')} style={{backgroundColor: valueCSS}} />\n      <svg className={classNames(stylesLoupe, 'spectrum-ColorLoupe',  {'is-open': isDragging})} aria-hidden=\"true\">\n        <pattern id={patternId} x=\"0\" y=\"0\" width=\"16\" height=\"16\" patternUnits=\"userSpaceOnUse\">\n          <rect className={classNames(stylesLoupe, 'spectrum-ColorLoupe-inner-background')} x=\"0\" y=\"0\" width=\"16\" height=\"16\" />\n          <rect className={classNames(stylesLoupe, 'spectrum-ColorLoupe-inner-checker')} x=\"0\" y=\"0\" width=\"8\" height=\"8\" />\n          <rect className={classNames(stylesLoupe, 'spectrum-ColorLoupe-inner-checker')} x=\"8\" y=\"8\" width=\"8\" height=\"8\" />\n        </pattern>\n        <path\n          className={classNames(stylesLoupe, 'spectrum-ColorLoupe-inner')}\n          d=\"M25 1a24 24 0 0124 24c0 16.255-24 40-24 40S1 41.255 1 25A24 24 0 0125 1z\"\n          fill={`url(#${patternId})`} />\n        <path\n          className={classNames(stylesLoupe, 'spectrum-ColorLoupe-inner')}\n          d=\"M25 1a24 24 0 0124 24c0 16.255-24 40-24 40S1 41.255 1 25A24 24 0 0125 1z\"\n          fill={valueCSS} />\n        <path\n          className={classNames(stylesLoupe, 'spectrum-ColorLoupe-outer')}\n          d=\"M25 3A21.98 21.98 0 003 25c0 6.2 4 14.794 11.568 24.853A144.233 144.233 0 0025 62.132a144.085 144.085 0 0010.4-12.239C42.99 39.816 47 31.209 47 25A21.98 21.98 0 0025 3m0-2a24 24 0 0124 24c0 16.255-24 40-24 40S1 41.255 1 25A24 24 0 0125 1z\" />\n      </svg>\n      {children}\n    </div>\n  );\n}\n\nexport {ColorThumb};\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n", "/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, dimensionValue, useFocusableRef, useStyleProps} from '@react-spectrum/utils';\nimport {ColorThumb} from './ColorThumb';\nimport {FocusableRef} from '@react-types/shared';\nimport React, {useCallback, useEffect, useRef, useState} from 'react';\nimport {SpectrumColorWheelProps} from '@react-types/color';\nimport styles from '@adobe/spectrum-css-temp/components/colorwheel/vars.css';\nimport {useColorWheel} from '@react-aria/color';\nimport {useColorWheelState} from '@react-stately/color';\nimport {useFocusRing} from '@react-aria/focus';\nimport {useProviderProps} from '@react-spectrum/provider';\nimport {useResizeObserver} from '@react-aria/utils';\n\nconst WHEEL_THICKNESS = 24;\n\nfunction ColorWheel(props: SpectrumColorWheelProps, ref: FocusableRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n\n  let {isDisabled} = props;\n  let size = props.size && dimensionValue(props.size);\n  let {styleProps} = useStyleProps(props);\n\n  let inputRef = useRef(null);\n  let containerRef = useFocusableRef(ref, inputRef);\n\n  let [wheelRadius, setWheelRadius] = useState<number | null>(null);\n  let [wheelThickness, setWheelThickness] = useState(WHEEL_THICKNESS);\n\n  let resizeHandler = useCallback(() => {\n    if (containerRef.current) {\n      setWheelRadius(containerRef.current.offsetWidth / 2);\n      let thickness = window.getComputedStyle(containerRef.current)\n        .getPropertyValue('--spectrum-colorwheel-track-thickness');\n      if (thickness) {\n        setWheelThickness(parseInt(thickness, 10));\n      }\n    }\n  }, [containerRef, setWheelRadius, setWheelThickness]);\n\n  useEffect(() => {\n    // the size observer's fallback to the window resize event doesn't fire on mount\n    if (wheelRadius == null) {\n      resizeHandler();\n    }\n  }, [wheelRadius, resizeHandler]);\n\n  useResizeObserver({\n    ref: containerRef,\n    onResize: resizeHandler\n  });\n\n  let state = useColorWheelState(props);\n\n  let {trackProps, inputProps, thumbProps} = useColorWheel({\n    ...props,\n    innerRadius: wheelRadius - wheelThickness,\n    outerRadius: wheelRadius\n  }, state, inputRef);\n\n  let {focusProps, isFocusVisible} = useFocusRing();\n\n  return (\n    <div\n      className={\n        classNames(\n          styles,\n          'spectrum-ColorWheel',\n          {\n            'is-disabled': isDisabled\n          },\n          styleProps.className\n        )\n      }\n      ref={containerRef}\n      style={{\n        ...styleProps.style,\n        // Workaround around https://github.com/adobe/spectrum-css/issues/1032\n        // @ts-ignore\n        'width': size,\n        'height': size\n      }}>\n      <div {...trackProps} className={classNames(styles, 'spectrum-ColorWheel-gradient')} />\n      <ColorThumb\n        value={state.getDisplayColor()}\n        isFocused={isFocusVisible}\n        isDisabled={isDisabled}\n        isDragging={state.isDragging}\n        className={classNames(styles, 'spectrum-ColorWheel-handle')}\n        {...thumbProps}>\n        <input {...focusProps} className={classNames(styles, 'spectrum-ColorWheel-slider')} {...inputProps} ref={inputRef} />\n      </ColorThumb>\n    </div>\n  );\n}\n\n/**\n * ColorWheels allow users to adjust the hue of an HSL or HSB color value on a circular track.\n */\nlet _ColorWheel = React.forwardRef(ColorWheel);\nexport {_ColorWheel as ColorWheel};\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, useFocusableRef, useStyleProps} from '@react-spectrum/utils';\nimport {ColorThumb} from './ColorThumb';\nimport {Flex} from '@react-spectrum/layout';\nimport {FocusableRef} from '@react-types/shared';\nimport {Label} from '@react-spectrum/label';\nimport React, {useRef, useState} from 'react';\nimport {SpectrumColorSliderProps} from '@react-types/color';\nimport styles from '@adobe/spectrum-css-temp/components/colorslider/vars.css';\nimport {useColorSlider} from '@react-aria/color';\nimport {useColorSliderState} from '@react-stately/color';\nimport {useFocus, useFocusVisible} from '@react-aria/interactions';\nimport {useLocale} from '@react-aria/i18n';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nfunction ColorSlider(props: SpectrumColorSliderProps, ref: FocusableRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n\n  let {\n    isDisabled,\n    channel,\n    orientation,\n    label,\n    showValueLabel,\n    'aria-label': ariaLabel\n  } = props;\n  let vertical = orientation === 'vertical';\n\n  let {styleProps} = useStyleProps(props);\n  let {locale} = useLocale();\n\n  let inputRef = useRef();\n  let trackRef = useRef();\n  let domRef = useFocusableRef(ref, inputRef);\n\n  let state = useColorSliderState({...props, locale});\n\n  // If vertical and a label is provided, use it as an aria-label instead.\n  if (vertical && label) {\n    ariaLabel = ariaLabel || (typeof label === 'string' ? label : null);\n    label = null;\n  }\n\n  // If no external label, aria-label or aria-labelledby is provided,\n  // default to displaying the localized channel value.\n  // Specifically check if label is undefined. If label is `null` then display no visible label.\n  // A default aria-label is provided by useColorSlider in that case.\n  if (label === undefined && !ariaLabel && !props['aria-labelledby'] && !vertical) {\n    label = state.value.getChannelName(channel, locale);\n  }\n\n  // Show the value label by default if there is a visible label\n  if (showValueLabel == null) {\n    showValueLabel = !!label;\n  }\n\n  let {inputProps, thumbProps, trackProps, labelProps, outputProps} = useColorSlider({\n    ...props,\n    label,\n    'aria-label': ariaLabel,\n    trackRef,\n    inputRef\n  }, state);\n\n  let {isFocusVisible} = useFocusVisible();\n  let [isFocused, setIsFocused] = useState(false);\n  let {focusProps} = useFocus({\n    isDisabled,\n    onFocusChange: setIsFocused\n  });\n\n  let alignLabel;\n  if (vertical) {\n    alignLabel = 'center';\n  } else if (label != null && showValueLabel) {\n    alignLabel = 'space-between';\n  } else if (label != null) {\n    alignLabel = 'flex-start';\n  } else if (showValueLabel) {\n    alignLabel = 'flex-end';\n  }\n\n  return (\n    <div\n      ref={domRef}\n      {...styleProps}\n      className={classNames(\n        styles,\n        {\n          'spectrum-ColorSlider-container--horizontal': !vertical,\n          'spectrum-ColorSlider-container--vertical': vertical\n        }\n      )}>\n      {label &&\n        <Flex direction=\"row\" justifyContent={alignLabel}>\n          <Label {...labelProps}>{label}</Label>\n          {showValueLabel && <Label elementType=\"span\"><output {...outputProps}>{state.value.formatChannelValue(channel, locale)}</output></Label>}\n        </Flex>\n      }\n      <div\n        {...trackProps}\n        ref={trackRef}\n        className={classNames(\n          styles,\n          'spectrum-ColorSlider', {\n            'is-disabled': isDisabled,\n            'spectrum-ColorSlider--vertical': vertical\n          }\n        )\n      }>\n        <ColorThumb\n          value={state.getDisplayColor()}\n          isFocused={isFocused && isFocusVisible}\n          isDisabled={isDisabled}\n          isDragging={state.isThumbDragging(0)}\n          className={classNames(styles, 'spectrum-ColorSlider-handle')}\n          {...thumbProps}>\n          <input {...inputProps} {...focusProps} ref={inputRef} className={classNames(styles, 'spectrum-ColorSlider-slider')} />\n        </ColorThumb>\n      </div>\n    </div>\n  );\n}\n\n/**\n * ColorSliders allow users to adjust an individual channel of a color value.\n */\nlet _ColorSlider = React.forwardRef(ColorSlider);\nexport {_ColorSlider as ColorSlider};\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames} from '@react-spectrum/utils';\nimport React, {RefObject, useRef} from 'react';\nimport {SpectrumColorFieldProps} from '@react-types/color';\nimport styles from './colorfield.css';\nimport {TextFieldBase} from '@react-spectrum/textfield';\nimport {TextFieldRef} from '@react-types/textfield';\nimport {useColorField} from '@react-aria/color';\nimport {useColorFieldState} from '@react-stately/color';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nfunction ColorField(props: SpectrumColorFieldProps, ref: RefObject<TextFieldRef>) {\n  props = useProviderProps(props);\n  let {\n    // These disabled props are handled by the state hook\n    value,          // eslint-disable-line @typescript-eslint/no-unused-vars\n    defaultValue,   // eslint-disable-line @typescript-eslint/no-unused-vars\n    onChange,       // eslint-disable-line @typescript-eslint/no-unused-vars\n    ...otherProps\n  } = props;\n  let state = useColorFieldState(props);\n  let inputRef = useRef<HTMLInputElement & HTMLTextAreaElement>();\n  let {\n    labelProps,\n    inputProps\n  } = useColorField(otherProps, state, inputRef);\n\n  return (\n    <TextFieldBase\n      {...otherProps}\n      ref={ref}\n      inputRef={inputRef}\n      labelProps={labelProps}\n      inputProps={inputProps}\n      inputClassName={classNames(styles, 'react-spectrum-ColorField-input')} />\n  );\n}\n\n/**\n * ColorFields allow users to enter a color in #rrggbb hexadecimal format.\n */\nconst _ColorField = React.forwardRef(ColorField);\nexport {_ColorField as ColorField};\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n.react-spectrum-ColorField-input {\n  direction: ltr;\n  text-align: start;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AGAA,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;;ACA5B,4BAAiB,KAAK,MAAM;AlCkC5B,4BAAiB;EACf,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;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",
  "names": []
}
