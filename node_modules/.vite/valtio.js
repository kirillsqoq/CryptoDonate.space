import {
  require_react
} from "./chunk-XNOQ2MXE.js";
import {
  __toESM
} from "./chunk-FH3PLF5R.js";

// node_modules/valtio/esm/index.js
var import_react = __toESM(require_react());

// node_modules/proxy-compare/dist/index.modern.js
var e = Symbol();
var t = Symbol();
var r = Symbol();
var n = Object.getPrototypeOf;
var o = /* @__PURE__ */ new WeakMap();
var s = (e2) => e2 && (o.has(e2) ? o.get(e2) : n(e2) === Object.prototype || n(e2) === Array.prototype);
var c = (e2) => typeof e2 == "object" && e2 !== null;
var l = (n2, o2) => {
  let s2 = false;
  const c2 = (e2, t2) => {
    if (!s2) {
      let r2 = e2.a.get(n2);
      r2 || (r2 = /* @__PURE__ */ new Set(), e2.a.set(n2, r2)), r2.add(t2);
    }
  }, l2 = { f: o2, get(e2, t2) {
    return t2 === r ? n2 : (c2(this, t2), a(e2[t2], this.a, this.c));
  }, has(e2, r2) {
    return r2 === t ? (s2 = true, this.a.delete(n2), true) : (c2(this, r2), r2 in e2);
  }, ownKeys(t2) {
    return c2(this, e), Reflect.ownKeys(t2);
  } };
  return o2 && (l2.set = l2.deleteProperty = () => false), l2;
};
var a = (e2, t2, o2) => {
  if (!s(e2))
    return e2;
  const c2 = e2[r] || e2, a2 = ((e3) => Object.isFrozen(e3) || Object.values(Object.getOwnPropertyDescriptors(e3)).some((e4) => !e4.writable))(c2);
  let i2 = o2 && o2.get(c2);
  return i2 && i2.f === a2 || (i2 = l(c2, a2), i2.p = new Proxy(a2 ? ((e3) => {
    if (Array.isArray(e3))
      return Array.from(e3);
    const t3 = Object.getOwnPropertyDescriptors(e3);
    return Object.values(t3).forEach((e4) => {
      e4.configurable = true;
    }), Object.create(n(e3), t3);
  })(c2) : c2, i2), o2 && o2.set(c2, i2)), i2.a = t2, i2.c = o2, i2.p;
};
var i = (e2, t2) => {
  const r2 = Reflect.ownKeys(e2), n2 = Reflect.ownKeys(t2);
  return r2.length !== n2.length || r2.some((e3, t3) => e3 !== n2[t3]);
};
var u = (t2, r2, n2, o2) => {
  if (Object.is(t2, r2))
    return false;
  if (!c(t2) || !c(r2))
    return true;
  const s2 = n2.get(t2);
  if (!s2)
    return true;
  if (o2) {
    const e2 = o2.get(t2);
    if (e2 && e2.n === r2)
      return e2.g;
    o2.set(t2, { n: r2, g: false });
  }
  let l2 = null;
  for (const c2 of s2) {
    const s3 = c2 === e ? i(t2, r2) : u(t2[c2], r2[c2], n2, o2);
    if (s3 !== true && s3 !== false || (l2 = s3), l2)
      break;
  }
  return l2 === null && (l2 = true), o2 && o2.set(t2, { n: r2, g: l2 }), l2;
};
var y = (e2) => s(e2) && e2[r] || null;
var b = (e2, t2 = true) => {
  o.set(e2, t2);
};
var g = (e2, t2) => {
  const r2 = [], n2 = /* @__PURE__ */ new WeakSet(), o2 = (e3, s2) => {
    if (n2.has(e3))
      return;
    c(e3) && n2.add(e3);
    const l2 = t2.get(e3);
    l2 ? l2.forEach((t3) => {
      o2(e3[t3], s2 ? [...s2, t3] : [t3]);
    }) : s2 && r2.push(s2);
  };
  return o2(e2), r2;
};

// node_modules/valtio/esm/vanilla.js
var import_meta = {};
var VERSION = Symbol();
var LISTENERS = Symbol();
var SNAPSHOT = Symbol();
var HANDLER = Symbol();
var PROMISE_RESULT = Symbol();
var PROMISE_ERROR = Symbol();
var refSet = /* @__PURE__ */ new WeakSet();
function ref(o2) {
  refSet.add(o2);
  return o2;
}
var isObject = (x) => typeof x === "object" && x !== null;
var canProxy = (x) => isObject(x) && !refSet.has(x) && (Array.isArray(x) || !(Symbol.iterator in x)) && !(x instanceof WeakMap) && !(x instanceof WeakSet) && !(x instanceof Error) && !(x instanceof Number) && !(x instanceof Date) && !(x instanceof String) && !(x instanceof RegExp) && !(x instanceof ArrayBuffer);
var proxyCache = /* @__PURE__ */ new WeakMap();
var globalVersion = 1;
var snapshotCache = /* @__PURE__ */ new WeakMap();
function proxy(initialObject = {}) {
  if (!isObject(initialObject)) {
    throw new Error("object required");
  }
  const found = proxyCache.get(initialObject);
  if (found) {
    return found;
  }
  let version = globalVersion;
  const listeners = /* @__PURE__ */ new Set();
  const notifyUpdate = (op, nextVersion) => {
    if (!nextVersion) {
      nextVersion = ++globalVersion;
    }
    if (version !== nextVersion) {
      version = nextVersion;
      listeners.forEach((listener) => listener(op, nextVersion));
    }
  };
  const propListeners = /* @__PURE__ */ new Map();
  const getPropListener = (prop) => {
    let propListener = propListeners.get(prop);
    if (!propListener) {
      propListener = (op, nextVersion) => {
        const newOp = [...op];
        newOp[1] = [prop, ...newOp[1]];
        notifyUpdate(newOp, nextVersion);
      };
      propListeners.set(prop, propListener);
    }
    return propListener;
  };
  const popPropListener = (prop) => {
    const propListener = propListeners.get(prop);
    propListeners.delete(prop);
    return propListener;
  };
  const createSnapshot = (target, receiver) => {
    const cache = snapshotCache.get(receiver);
    if ((cache == null ? void 0 : cache[0]) === version) {
      return cache[1];
    }
    const snapshot2 = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));
    b(snapshot2, true);
    snapshotCache.set(receiver, [version, snapshot2]);
    Reflect.ownKeys(target).forEach((key) => {
      const value = Reflect.get(target, key, receiver);
      if (refSet.has(value)) {
        b(value, false);
        snapshot2[key] = value;
      } else if (value instanceof Promise) {
        if (PROMISE_RESULT in value) {
          snapshot2[key] = value[PROMISE_RESULT];
        } else {
          const errorOrPromise = value[PROMISE_ERROR] || value;
          Object.defineProperty(snapshot2, key, {
            get() {
              if (PROMISE_RESULT in value) {
                return value[PROMISE_RESULT];
              }
              throw errorOrPromise;
            }
          });
        }
      } else if (value == null ? void 0 : value[LISTENERS]) {
        snapshot2[key] = value[SNAPSHOT];
      } else {
        snapshot2[key] = value;
      }
    });
    Object.freeze(snapshot2);
    return snapshot2;
  };
  const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));
  const handler = {
    get(target, prop, receiver) {
      if (prop === VERSION) {
        return version;
      }
      if (prop === LISTENERS) {
        return listeners;
      }
      if (prop === SNAPSHOT) {
        return createSnapshot(target, receiver);
      }
      if (prop === HANDLER) {
        return handler;
      }
      return Reflect.get(target, prop, receiver);
    },
    deleteProperty(target, prop) {
      const prevValue = Reflect.get(target, prop);
      const childListeners = prevValue == null ? void 0 : prevValue[LISTENERS];
      if (childListeners) {
        childListeners.delete(popPropListener(prop));
      }
      const deleted = Reflect.deleteProperty(target, prop);
      if (deleted) {
        notifyUpdate(["delete", [prop], prevValue]);
      }
      return deleted;
    },
    is: Object.is,
    canProxy,
    set(target, prop, value, receiver) {
      var _a;
      const prevValue = Reflect.get(target, prop, receiver);
      if (this.is(prevValue, value)) {
        return true;
      }
      const childListeners = prevValue == null ? void 0 : prevValue[LISTENERS];
      if (childListeners) {
        childListeners.delete(popPropListener(prop));
      }
      if (isObject(value)) {
        value = y(value) || value;
      }
      let nextValue;
      if ((_a = Object.getOwnPropertyDescriptor(target, prop)) == null ? void 0 : _a.set) {
        nextValue = value;
      } else if (value instanceof Promise) {
        nextValue = value.then((v) => {
          nextValue[PROMISE_RESULT] = v;
          notifyUpdate(["resolve", [prop], v]);
          return v;
        }).catch((e2) => {
          nextValue[PROMISE_ERROR] = e2;
          notifyUpdate(["reject", [prop], e2]);
        });
      } else if (value == null ? void 0 : value[LISTENERS]) {
        nextValue = value;
        nextValue[LISTENERS].add(getPropListener(prop));
      } else if (this.canProxy(value)) {
        nextValue = proxy(value);
        nextValue[LISTENERS].add(getPropListener(prop));
      } else {
        nextValue = value;
      }
      Reflect.set(target, prop, nextValue, receiver);
      notifyUpdate(["set", [prop], value, prevValue]);
      return true;
    }
  };
  const proxyObject = new Proxy(baseObject, handler);
  proxyCache.set(initialObject, proxyObject);
  Reflect.ownKeys(initialObject).forEach((key) => {
    const desc = Object.getOwnPropertyDescriptor(initialObject, key);
    if (desc.get || desc.set) {
      Object.defineProperty(baseObject, key, desc);
    } else {
      proxyObject[key] = initialObject[key];
    }
  });
  return proxyObject;
}
function getVersion(proxyObject) {
  return isObject(proxyObject) ? proxyObject[VERSION] : void 0;
}
function subscribe(proxyObject, callback, notifyInSync) {
  if ((import_meta.env && import_meta.env.MODE) !== "production" && !(proxyObject == null ? void 0 : proxyObject[LISTENERS])) {
    console.warn("Please use proxy object");
  }
  let promise;
  const ops = [];
  const listener = (op) => {
    ops.push(op);
    if (notifyInSync) {
      callback(ops.splice(0));
      return;
    }
    if (!promise) {
      promise = Promise.resolve().then(() => {
        promise = void 0;
        callback(ops.splice(0));
      });
    }
  };
  proxyObject[LISTENERS].add(listener);
  return () => {
    proxyObject[LISTENERS].delete(listener);
  };
}
function snapshot(proxyObject) {
  if ((import_meta.env && import_meta.env.MODE) !== "production" && !(proxyObject == null ? void 0 : proxyObject[SNAPSHOT])) {
    console.warn("Please use proxy object");
  }
  return proxyObject[SNAPSHOT];
}
function getHandler(proxyObject) {
  if ((import_meta.env && import_meta.env.MODE) !== "production" && !(proxyObject == null ? void 0 : proxyObject[HANDLER])) {
    console.warn("Please use proxy object");
  }
  return proxyObject[HANDLER];
}

// node_modules/valtio/esm/index.js
var import_meta2 = {};
var TARGET = "_uMS_T";
var GET_VERSION = "_uMS_V";
function createMutableSource(target, getVersion2) {
  return {
    [TARGET]: target,
    [GET_VERSION]: getVersion2
  };
}
function useMutableSource(source, getSnapshot, subscribe2) {
  const lastVersion = (0, import_react.useRef)();
  const currentVersion = source[GET_VERSION](source[TARGET]);
  const [state, setState] = (0, import_react.useState)(() => [
    source,
    getSnapshot,
    subscribe2,
    currentVersion,
    getSnapshot(source[TARGET])
  ]);
  let currentSnapshot = state[4];
  if (state[0] !== source || state[1] !== getSnapshot || state[2] !== subscribe2) {
    currentSnapshot = getSnapshot(source[TARGET]);
    setState([
      source,
      getSnapshot,
      subscribe2,
      currentVersion,
      currentSnapshot
    ]);
  } else if (currentVersion !== state[3] && currentVersion !== lastVersion.current) {
    currentSnapshot = getSnapshot(source[TARGET]);
    if (!Object.is(currentSnapshot, state[4])) {
      setState([
        source,
        getSnapshot,
        subscribe2,
        currentVersion,
        currentSnapshot
      ]);
    }
  }
  (0, import_react.useEffect)(() => {
    let didUnsubscribe = false;
    const checkForUpdates = () => {
      if (didUnsubscribe) {
        return;
      }
      try {
        const nextSnapshot = getSnapshot(source[TARGET]);
        const nextVersion = source[GET_VERSION](source[TARGET]);
        lastVersion.current = nextVersion;
        setState((prev) => {
          if (prev[0] !== source || prev[1] !== getSnapshot || prev[2] !== subscribe2) {
            return prev;
          }
          if (Object.is(prev[4], nextSnapshot)) {
            return prev;
          }
          return [
            prev[0],
            prev[1],
            prev[2],
            nextVersion,
            nextSnapshot
          ];
        });
      } catch (e2) {
        setState((prev) => [...prev]);
      }
    };
    const unsubscribe = subscribe2(source[TARGET], checkForUpdates);
    checkForUpdates();
    return () => {
      didUnsubscribe = true;
      unsubscribe();
    };
  }, [source, getSnapshot, subscribe2]);
  return currentSnapshot;
}
var isSSR = typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var useIsomorphicLayoutEffect = isSSR ? import_react.useEffect : import_react.useLayoutEffect;
var useAffectedDebugValue = (state, affected) => {
  const pathList = (0, import_react.useRef)();
  (0, import_react.useEffect)(() => {
    pathList.current = g(state, affected);
  });
  (0, import_react.useDebugValue)(pathList.current);
};
var mutableSourceCache = /* @__PURE__ */ new WeakMap();
var getMutableSource = (proxyObject) => {
  if (!mutableSourceCache.has(proxyObject)) {
    mutableSourceCache.set(proxyObject, createMutableSource(proxyObject, getVersion));
  }
  return mutableSourceCache.get(proxyObject);
};
function useSnapshot(proxyObject, options) {
  const forceUpdate = (0, import_react.useReducer)((c2) => c2 + 1, 0)[1];
  const affected = /* @__PURE__ */ new WeakMap();
  const lastAffected = (0, import_react.useRef)();
  const prevSnapshot = (0, import_react.useRef)();
  const lastSnapshot = (0, import_react.useRef)();
  useIsomorphicLayoutEffect(() => {
    lastSnapshot.current = prevSnapshot.current = snapshot(proxyObject);
  }, [proxyObject]);
  useIsomorphicLayoutEffect(() => {
    lastAffected.current = affected;
    if (prevSnapshot.current !== lastSnapshot.current && u(prevSnapshot.current, lastSnapshot.current, affected, /* @__PURE__ */ new WeakMap())) {
      prevSnapshot.current = lastSnapshot.current;
      forceUpdate();
    }
  });
  const notifyInSync = options == null ? void 0 : options.sync;
  const sub = (0, import_react.useCallback)((proxyObject2, cb) => subscribe(proxyObject2, () => {
    const nextSnapshot = snapshot(proxyObject2);
    lastSnapshot.current = nextSnapshot;
    try {
      if (lastAffected.current && !u(prevSnapshot.current, nextSnapshot, lastAffected.current, /* @__PURE__ */ new WeakMap())) {
        return;
      }
    } catch (e2) {
    }
    prevSnapshot.current = nextSnapshot;
    cb();
  }, notifyInSync), [notifyInSync]);
  const currSnapshot = useMutableSource(getMutableSource(proxyObject), snapshot, sub);
  if ((import_meta2.env && import_meta2.env.MODE) !== "production") {
    useAffectedDebugValue(currSnapshot, affected);
  }
  const proxyCache2 = (0, import_react.useMemo)(() => /* @__PURE__ */ new WeakMap(), []);
  return a(currSnapshot, affected, proxyCache2);
}
export {
  getVersion,
  proxy,
  ref,
  snapshot,
  subscribe,
  getHandler as unstable_getHandler,
  useSnapshot
};
//# sourceMappingURL=valtio.js.map
