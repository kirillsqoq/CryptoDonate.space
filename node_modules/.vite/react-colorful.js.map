{
  "version": 3,
  "sources": ["../react-colorful/src/hooks/useEventCallback.ts", "../react-colorful/src/utils/clamp.ts", "../react-colorful/src/components/common/Interactive.tsx", "../react-colorful/src/utils/format.ts", "../react-colorful/src/components/common/Pointer.tsx", "../react-colorful/src/utils/round.ts", "../react-colorful/src/utils/convert.ts", "../react-colorful/src/components/common/Hue.tsx", "../react-colorful/src/components/common/Saturation.tsx", "../react-colorful/src/utils/compare.ts", "../react-colorful/src/hooks/useColorManipulation.ts", "../react-colorful/src/utils/nonce.ts", "../react-colorful/src/hooks/useIsomorphicLayoutEffect.ts", "../react-colorful/src/hooks/useStyleSheet.ts", "../react-colorful/src/components/common/ColorPicker.tsx", "../react-colorful/src/components/HexColorPicker.tsx", "../react-colorful/src/components/common/Alpha.tsx", "../react-colorful/src/components/common/AlphaColorPicker.tsx", "../react-colorful/src/components/HslaColorPicker.tsx", "../react-colorful/src/components/HslaStringColorPicker.tsx", "../react-colorful/src/components/HslColorPicker.tsx", "../react-colorful/src/components/HslStringColorPicker.tsx", "../react-colorful/src/components/HsvaColorPicker.tsx", "../react-colorful/src/components/HsvaStringColorPicker.tsx", "../react-colorful/src/components/HsvColorPicker.tsx", "../react-colorful/src/components/HsvStringColorPicker.tsx", "../react-colorful/src/components/RgbaColorPicker.tsx", "../react-colorful/src/components/RgbaStringColorPicker.tsx", "../react-colorful/src/components/RgbColorPicker.tsx", "../react-colorful/src/components/RgbStringColorPicker.tsx", "../react-colorful/src/utils/validate.ts", "../react-colorful/src/components/common/ColorInput.tsx", "../react-colorful/src/components/HexColorInput.tsx"],
  "sourcesContent": ["import { useRef } from \"react\";\n\n// Saves incoming handler to the ref in order to avoid \"useCallback hell\"\nexport function useEventCallback<T>(handler?: (value: T) => void): (value: T) => void {\n  const callbackRef = useRef(handler);\n  const fn = useRef((value: T) => {\n    callbackRef.current && callbackRef.current(value);\n  });\n  callbackRef.current = handler;\n\n  return fn.current;\n}\n", "// Clamps a value between an upper and lower bound.\n// We use ternary operators because it makes the minified code\n// 2 times shorter then `Math.min(Math.max(a,b),c)`\nexport const clamp = (number: number, min = 0, max = 1): number => {\n  return number > max ? max : number < min ? min : number;\n};\n", "import React, { useRef, useMemo, useEffect } from \"react\";\n\nimport { useEventCallback } from \"../../hooks/useEventCallback\";\nimport { clamp } from \"../../utils/clamp\";\n\nexport interface Interaction {\n  left: number;\n  top: number;\n}\n\n// Check if an event was triggered by touch\nconst isTouch = (event: MouseEvent | TouchEvent): event is TouchEvent => \"touches\" in event;\n\n// Finds a proper touch point by its identifier\nconst getTouchPoint = (touches: TouchList, touchId: null | number): Touch => {\n  for (let i = 0; i < touches.length; i++) {\n    if (touches[i].identifier === touchId) return touches[i];\n  }\n  return touches[0];\n};\n\n// Finds the proper window object to fix iframe embedding issues\nconst getParentWindow = (node?: HTMLDivElement | null): Window => {\n  return (node && node.ownerDocument.defaultView) || self;\n};\n\n// Returns a relative position of the pointer inside the node's bounding box\nconst getRelativePosition = (\n  node: HTMLDivElement,\n  event: MouseEvent | TouchEvent,\n  touchId: null | number\n): Interaction => {\n  const rect = node.getBoundingClientRect();\n\n  // Get user's pointer position from `touches` array if it's a `TouchEvent`\n  const pointer = isTouch(event) ? getTouchPoint(event.touches, touchId) : (event as MouseEvent);\n\n  return {\n    left: clamp((pointer.pageX - (rect.left + getParentWindow(node).pageXOffset)) / rect.width),\n    top: clamp((pointer.pageY - (rect.top + getParentWindow(node).pageYOffset)) / rect.height),\n  };\n};\n\n// Browsers introduced an intervention, making touch events passive by default.\n// This workaround removes `preventDefault` call from the touch handlers.\n// https://github.com/facebook/react/issues/19651\nconst preventDefaultMove = (event: MouseEvent | TouchEvent): void => {\n  !isTouch(event) && event.preventDefault();\n};\n\n// Prevent mobile browsers from handling mouse events (conflicting with touch ones).\n// If we detected a touch interaction before, we prefer reacting to touch events only.\nconst isInvalid = (event: MouseEvent | TouchEvent, hasTouch: boolean): boolean => {\n  return hasTouch && !isTouch(event);\n};\n\ninterface Props {\n  onMove: (interaction: Interaction) => void;\n  onKey: (offset: Interaction) => void;\n  children: React.ReactNode;\n}\n\nconst InteractiveBase = ({ onMove, onKey, ...rest }: Props) => {\n  const container = useRef<HTMLDivElement>(null);\n  const onMoveCallback = useEventCallback<Interaction>(onMove);\n  const onKeyCallback = useEventCallback<Interaction>(onKey);\n  const touchId = useRef<null | number>(null);\n  const hasTouch = useRef(false);\n\n  const [handleMoveStart, handleKeyDown, toggleDocumentEvents] = useMemo(() => {\n    const handleMoveStart = ({ nativeEvent }: React.MouseEvent | React.TouchEvent) => {\n      const el = container.current;\n      if (!el) return;\n\n      // Prevent text selection\n      preventDefaultMove(nativeEvent);\n\n      if (isInvalid(nativeEvent, hasTouch.current) || !el) return;\n\n      if (isTouch(nativeEvent)) {\n        hasTouch.current = true;\n        const changedTouches = nativeEvent.changedTouches || [];\n        if (changedTouches.length) touchId.current = changedTouches[0].identifier;\n      }\n\n      el.focus();\n      onMoveCallback(getRelativePosition(el, nativeEvent, touchId.current));\n      toggleDocumentEvents(true);\n    };\n\n    const handleMove = (event: MouseEvent | TouchEvent) => {\n      // Prevent text selection\n      preventDefaultMove(event);\n\n      // If user moves the pointer outside of the window or iframe bounds and release it there,\n      // `mouseup`/`touchend` won't be fired. In order to stop the picker from following the cursor\n      // after the user has moved the mouse/finger back to the document, we check `event.buttons`\n      // and `event.touches`. It allows us to detect that the user is just moving his pointer\n      // without pressing it down\n      const isDown = isTouch(event) ? event.touches.length > 0 : event.buttons > 0;\n\n      if (isDown && container.current) {\n        onMoveCallback(getRelativePosition(container.current, event, touchId.current));\n      } else {\n        toggleDocumentEvents(false);\n      }\n    };\n\n    const handleMoveEnd = () => toggleDocumentEvents(false);\n\n    const handleKeyDown = (event: React.KeyboardEvent) => {\n      const keyCode = event.which || event.keyCode;\n\n      // Ignore all keys except arrow ones\n      if (keyCode < 37 || keyCode > 40) return;\n      // Do not scroll page by arrow keys when document is focused on the element\n      event.preventDefault();\n      // Send relative offset to the parent component.\n      // We use codes (37\u2190, 38\u2191, 39\u2192, 40\u2193) instead of keys ('ArrowRight', 'ArrowDown', etc)\n      // to reduce the size of the library\n      onKeyCallback({\n        left: keyCode === 39 ? 0.05 : keyCode === 37 ? -0.05 : 0,\n        top: keyCode === 40 ? 0.05 : keyCode === 38 ? -0.05 : 0,\n      });\n    };\n\n    function toggleDocumentEvents(state?: boolean) {\n      const touch = hasTouch.current;\n      const el = container.current;\n      const parentWindow = getParentWindow(el);\n\n      // Add or remove additional pointer event listeners\n      const toggleEvent = state ? parentWindow.addEventListener : parentWindow.removeEventListener;\n      toggleEvent(touch ? \"touchmove\" : \"mousemove\", handleMove);\n      toggleEvent(touch ? \"touchend\" : \"mouseup\", handleMoveEnd);\n    }\n\n    return [handleMoveStart, handleKeyDown, toggleDocumentEvents];\n  }, [onKeyCallback, onMoveCallback]);\n\n  // Remove window event listeners before unmounting\n  useEffect(() => toggleDocumentEvents, [toggleDocumentEvents]);\n\n  return (\n    <div\n      {...rest}\n      onTouchStart={handleMoveStart}\n      onMouseDown={handleMoveStart}\n      className=\"react-colorful__interactive\"\n      ref={container}\n      onKeyDown={handleKeyDown}\n      tabIndex={0}\n      role=\"slider\"\n    />\n  );\n};\n\nexport const Interactive = React.memo(InteractiveBase);\n", "export const formatClassName = (names: unknown[]): string => names.filter(Boolean).join(\" \");\n", "import React from \"react\";\nimport { formatClassName } from \"../../utils/format\";\n\ninterface Props {\n  className?: string;\n  top?: number;\n  left: number;\n  color: string;\n}\n\nexport const Pointer = ({ className, color, left, top = 0.5 }: Props): JSX.Element => {\n  const nodeClassName = formatClassName([\"react-colorful__pointer\", className]);\n\n  const style = {\n    top: `${top * 100}%`,\n    left: `${left * 100}%`,\n  };\n\n  return (\n    <div className={nodeClassName} style={style}>\n      <div className=\"react-colorful__pointer-fill\" style={{ backgroundColor: color }} />\n    </div>\n  );\n};\n", "export const round = (number: number, digits = 0, base = Math.pow(10, digits)): number => {\n  return Math.round(base * number) / base;\n};\n", "import { round } from \"./round\";\nimport { RgbaColor, RgbColor, HslaColor, HslColor, HsvaColor, HsvColor } from \"../types\";\n\n/**\n * Valid CSS <angle> units.\n * https://developer.mozilla.org/en-US/docs/Web/CSS/angle\n */\nconst angleUnits: Record<string, number> = {\n  grad: 360 / 400,\n  turn: 360,\n  rad: 360 / (Math.PI * 2),\n};\n\nexport const hexToHsva = (hex: string): HsvaColor => rgbaToHsva(hexToRgba(hex));\n\nexport const hexToRgba = (hex: string): RgbaColor => {\n  if (hex[0] === \"#\") hex = hex.substr(1);\n\n  if (hex.length < 6) {\n    return {\n      r: parseInt(hex[0] + hex[0], 16),\n      g: parseInt(hex[1] + hex[1], 16),\n      b: parseInt(hex[2] + hex[2], 16),\n      a: 1,\n    };\n  }\n\n  return {\n    r: parseInt(hex.substr(0, 2), 16),\n    g: parseInt(hex.substr(2, 2), 16),\n    b: parseInt(hex.substr(4, 2), 16),\n    a: 1,\n  };\n};\n\nexport const parseHue = (value: string, unit = \"deg\"): number => {\n  return Number(value) * (angleUnits[unit] || 1);\n};\n\nexport const hslaStringToHsva = (hslString: string): HsvaColor => {\n  const matcher = /hsla?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  const match = matcher.exec(hslString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return hslaToHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    l: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1),\n  });\n};\n\nexport const hslStringToHsva = hslaStringToHsva;\n\nexport const hslaToHsva = ({ h, s, l, a }: HslaColor): HsvaColor => {\n  s *= (l < 50 ? l : 100 - l) / 100;\n\n  return {\n    h: h,\n    s: s > 0 ? ((2 * s) / (l + s)) * 100 : 0,\n    v: l + s,\n    a,\n  };\n};\n\nexport const hsvaToHex = (hsva: HsvaColor): string => rgbaToHex(hsvaToRgba(hsva));\n\nexport const hsvaToHsla = ({ h, s, v, a }: HsvaColor): HslaColor => {\n  const hh = ((200 - s) * v) / 100;\n\n  return {\n    h: round(h),\n    s: round(hh > 0 && hh < 200 ? ((s * v) / 100 / (hh <= 100 ? hh : 200 - hh)) * 100 : 0),\n    l: round(hh / 2),\n    a: round(a, 2),\n  };\n};\n\nexport const hsvaToHslString = (hsva: HsvaColor): string => {\n  const { h, s, l } = hsvaToHsla(hsva);\n  return `hsl(${h}, ${s}%, ${l}%)`;\n};\n\nexport const hsvaToHsvString = (hsva: HsvaColor): string => {\n  const { h, s, v } = roundHsva(hsva);\n  return `hsv(${h}, ${s}%, ${v}%)`;\n};\n\nexport const hsvaToHsvaString = (hsva: HsvaColor): string => {\n  const { h, s, v, a } = roundHsva(hsva);\n  return `hsva(${h}, ${s}%, ${v}%, ${a})`;\n};\n\nexport const hsvaToHslaString = (hsva: HsvaColor): string => {\n  const { h, s, l, a } = hsvaToHsla(hsva);\n  return `hsla(${h}, ${s}%, ${l}%, ${a})`;\n};\n\nexport const hsvaToRgba = ({ h, s, v, a }: HsvaColor): RgbaColor => {\n  h = (h / 360) * 6;\n  s = s / 100;\n  v = v / 100;\n\n  const hh = Math.floor(h),\n    b = v * (1 - s),\n    c = v * (1 - (h - hh) * s),\n    d = v * (1 - (1 - h + hh) * s),\n    module = hh % 6;\n\n  return {\n    r: round([v, c, b, b, d, v][module] * 255),\n    g: round([d, v, v, c, b, b][module] * 255),\n    b: round([b, b, d, v, v, c][module] * 255),\n    a: round(a, 2),\n  };\n};\n\nexport const hsvaToRgbString = (hsva: HsvaColor): string => {\n  const { r, g, b } = hsvaToRgba(hsva);\n  return `rgb(${r}, ${g}, ${b})`;\n};\n\nexport const hsvaToRgbaString = (hsva: HsvaColor): string => {\n  const { r, g, b, a } = hsvaToRgba(hsva);\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n};\n\nexport const hsvaStringToHsva = (hsvString: string): HsvaColor => {\n  const matcher = /hsva?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  const match = matcher.exec(hsvString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return roundHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    v: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1),\n  });\n};\n\nexport const hsvStringToHsva = hsvaStringToHsva;\n\nexport const rgbaStringToHsva = (rgbaString: string): HsvaColor => {\n  const matcher = /rgba?\\(?\\s*(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  const match = matcher.exec(rgbaString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return rgbaToHsva({\n    r: Number(match[1]) / (match[2] ? 100 / 255 : 1),\n    g: Number(match[3]) / (match[4] ? 100 / 255 : 1),\n    b: Number(match[5]) / (match[6] ? 100 / 255 : 1),\n    a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? 100 : 1),\n  });\n};\n\nexport const rgbStringToHsva = rgbaStringToHsva;\n\nconst format = (number: number) => {\n  const hex = number.toString(16);\n  return hex.length < 2 ? \"0\" + hex : hex;\n};\n\nexport const rgbaToHex = ({ r, g, b }: RgbaColor): string => {\n  return \"#\" + format(r) + format(g) + format(b);\n};\n\nexport const rgbaToHsva = ({ r, g, b, a }: RgbaColor): HsvaColor => {\n  const max = Math.max(r, g, b);\n  const delta = max - Math.min(r, g, b);\n\n  // prettier-ignore\n  const hh = delta\n    ? max === r\n      ? (g - b) / delta\n      : max === g\n        ? 2 + (b - r) / delta\n        : 4 + (r - g) / delta\n    : 0;\n\n  return {\n    h: round(60 * (hh < 0 ? hh + 6 : hh)),\n    s: round(max ? (delta / max) * 100 : 0),\n    v: round((max / 255) * 100),\n    a,\n  };\n};\n\nexport const roundHsva = (hsva: HsvaColor): HsvaColor => ({\n  h: round(hsva.h),\n  s: round(hsva.s),\n  v: round(hsva.v),\n  a: round(hsva.a, 2),\n});\n\nexport const rgbaToRgb = ({ r, g, b }: RgbaColor): RgbColor => ({ r, g, b });\n\nexport const hslaToHsl = ({ h, s, l }: HslaColor): HslColor => ({ h, s, l });\n\nexport const hsvaToHsv = (hsva: HsvaColor): HsvColor => {\n  const { h, s, v } = roundHsva(hsva);\n  return { h, s, v };\n};\n", "import React from \"react\";\n\nimport { Interactive, Interaction } from \"./Interactive\";\nimport { Pointer } from \"./Pointer\";\n\nimport { hsvaToHslString } from \"../../utils/convert\";\nimport { formatClassName } from \"../../utils/format\";\nimport { clamp } from \"../../utils/clamp\";\nimport { round } from \"../../utils/round\";\n\ninterface Props {\n  className?: string;\n  hue: number;\n  onChange: (newHue: { h: number }) => void;\n}\n\nconst HueBase = ({ className, hue, onChange }: Props) => {\n  const handleMove = (interaction: Interaction) => {\n    onChange({ h: 360 * interaction.left });\n  };\n\n  const handleKey = (offset: Interaction) => {\n    // Hue measured in degrees of the color circle ranging from 0 to 360\n    onChange({\n      h: clamp(hue + offset.left * 360, 0, 360),\n    });\n  };\n\n  const nodeClassName = formatClassName([\"react-colorful__hue\", className]);\n\n  return (\n    <div className={nodeClassName}>\n      <Interactive\n        onMove={handleMove}\n        onKey={handleKey}\n        aria-label=\"Hue\"\n        aria-valuetext={round(hue)}\n      >\n        <Pointer\n          className=\"react-colorful__hue-pointer\"\n          left={hue / 360}\n          color={hsvaToHslString({ h: hue, s: 100, v: 100, a: 1 })}\n        />\n      </Interactive>\n    </div>\n  );\n};\n\nexport const Hue = React.memo(HueBase);\n", "import React from \"react\";\nimport { Interactive, Interaction } from \"./Interactive\";\nimport { Pointer } from \"./Pointer\";\nimport { HsvaColor } from \"../../types\";\nimport { hsvaToHslString } from \"../../utils/convert\";\nimport { clamp } from \"../../utils/clamp\";\nimport { round } from \"../../utils/round\";\n\ninterface Props {\n  hsva: HsvaColor;\n  onChange: (newColor: { s: number; v: number }) => void;\n}\n\nconst SaturationBase = ({ hsva, onChange }: Props) => {\n  const handleMove = (interaction: Interaction) => {\n    onChange({\n      s: interaction.left * 100,\n      v: 100 - interaction.top * 100,\n    });\n  };\n\n  const handleKey = (offset: Interaction) => {\n    // Saturation and brightness always fit into [0, 100] range\n    onChange({\n      s: clamp(hsva.s + offset.left * 100, 0, 100),\n      v: clamp(hsva.v - offset.top * 100, 0, 100),\n    });\n  };\n\n  const containerStyle = {\n    backgroundColor: hsvaToHslString({ h: hsva.h, s: 100, v: 100, a: 1 }),\n  };\n\n  return (\n    <div className=\"react-colorful__saturation\" style={containerStyle}>\n      <Interactive\n        onMove={handleMove}\n        onKey={handleKey}\n        aria-label=\"Color\"\n        aria-valuetext={`Saturation ${round(hsva.s)}%, Brightness ${round(hsva.v)}%`}\n      >\n        <Pointer\n          className=\"react-colorful__saturation-pointer\"\n          top={1 - hsva.v / 100}\n          left={hsva.s / 100}\n          color={hsvaToHslString(hsva)}\n        />\n      </Interactive>\n    </div>\n  );\n};\n\nexport const Saturation = React.memo(SaturationBase);\n", "import { hexToRgba } from \"./convert\";\nimport { ObjectColor } from \"../types\";\n\nexport const equalColorObjects = (first: ObjectColor, second: ObjectColor): boolean => {\n  if (first === second) return true;\n\n  for (const prop in first) {\n    // The following allows for a type-safe calling of this function (first & second have to be HSL, HSV, or RGB)\n    // with type-unsafe iterating over object keys. TS does not allow this without an index (`[key: string]: number`)\n    // on an object to define how iteration is normally done. To ensure extra keys are not allowed on our types,\n    // we must cast our object to unknown (as RGB demands `r` be a key, while `Record<string, x>` does not care if\n    // there is or not), and then as a type TS can iterate over.\n    if (\n      ((first as unknown) as Record<string, number>)[prop] !==\n      ((second as unknown) as Record<string, number>)[prop]\n    )\n      return false;\n  }\n\n  return true;\n};\n\nexport const equalColorString = (first: string, second: string): boolean => {\n  return first.replace(/\\s/g, \"\") === second.replace(/\\s/g, \"\");\n};\n\nexport const equalHex = (first: string, second: string): boolean => {\n  if (first.toLowerCase() === second.toLowerCase()) return true;\n\n  // To compare colors like `#FFF` and `ffffff` we convert them into RGB objects\n  return equalColorObjects(hexToRgba(first), hexToRgba(second));\n};\n", "import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { ColorModel, AnyColor, HsvaColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { useEventCallback } from \"./useEventCallback\";\n\nexport function useColorManipulation<T extends AnyColor>(\n  colorModel: ColorModel<T>,\n  color: T,\n  onChange?: (color: T) => void\n): [HsvaColor, (color: Partial<HsvaColor>) => void] {\n  // Save onChange callback in the ref for avoiding \"useCallback hell\"\n  const onChangeCallback = useEventCallback<T>(onChange);\n\n  // No matter which color model is used (HEX, RGB(A) or HSL(A)),\n  // all internal calculations are based on HSVA model\n  const [hsva, updateHsva] = useState<HsvaColor>(() => colorModel.toHsva(color));\n\n  // By using this ref we're able to prevent extra updates\n  // and the effects recursion during the color conversion\n  const cache = useRef({ color, hsva });\n\n  // Update local HSVA-value if `color` property value is changed,\n  // but only if that's not the same color that we just sent to the parent\n  useEffect(() => {\n    if (!colorModel.equal(color, cache.current.color)) {\n      const newHsva = colorModel.toHsva(color);\n      cache.current = { hsva: newHsva, color };\n      updateHsva(newHsva);\n    }\n  }, [color, colorModel]);\n\n  // Trigger `onChange` callback only if an updated color is different from cached one;\n  // save the new color to the ref to prevent unnecessary updates\n  useEffect(() => {\n    let newColor;\n    if (\n      !equalColorObjects(hsva, cache.current.hsva) &&\n      !colorModel.equal((newColor = colorModel.fromHsva(hsva)), cache.current.color)\n    ) {\n      cache.current = { hsva, color: newColor };\n      onChangeCallback(newColor);\n    }\n  }, [hsva, colorModel, onChangeCallback]);\n\n  // Merge the current HSVA color object with updated params.\n  // For example, when a child component sends `h` or `s` only\n  const handleChange = useCallback((params: Partial<HsvaColor>) => {\n    updateHsva((current) => Object.assign({}, current, params));\n  }, []);\n\n  return [hsva, handleChange];\n}\n", "declare const __webpack_nonce__: string | undefined;\nlet nonce: string | undefined;\n\n/**\n * Returns a nonce hash included by Webpack or the one defined manually by developer.\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce\n * https://webpack.js.org/guides/csp/\n */\nexport const getNonce = (): string | undefined => {\n  if (nonce) return nonce;\n  if (typeof __webpack_nonce__ !== \"undefined\") return __webpack_nonce__;\n  return undefined;\n};\n\n/**\n * Signs the style tag with a base64-encoded string (nonce) to conforms to Content Security Policies.\n * This function has to be invoked before any picker is rendered if you aren't using Webpack for CSP.\n */\nexport const setNonce = (hash: string): void => {\n  nonce = hash;\n};\n", "import { useLayoutEffect, useEffect } from \"react\";\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nexport const useIsomorphicLayoutEffect =\n  typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\n", "import { RefObject } from \"react\";\n\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport { getNonce } from \"../utils/nonce\";\n\n// Bundler is configured to load this as a processed minified CSS-string\nimport styles from \"../css/styles.css\";\n\nconst styleElementMap: Map<Document, HTMLStyleElement> = new Map();\n\n/**\n * Injects CSS code into the document's <head>\n */\nexport const useStyleSheet = (nodeRef: RefObject<HTMLDivElement>): void => {\n  useIsomorphicLayoutEffect(() => {\n    const parentDocument = nodeRef.current ? nodeRef.current.ownerDocument : document;\n\n    if (typeof parentDocument !== \"undefined\" && !styleElementMap.has(parentDocument)) {\n      const styleElement = parentDocument.createElement(\"style\");\n      styleElement.innerHTML = styles;\n      styleElementMap.set(parentDocument, styleElement);\n\n      // Conform to CSP rules by setting `nonce` attribute to the inline styles\n      const nonce = getNonce();\n      if (nonce) styleElement.setAttribute(\"nonce\", nonce);\n\n      parentDocument.head.appendChild(styleElement);\n    }\n  }, []);\n};\n", "import React, { useRef } from \"react\";\n\nimport { Hue } from \"./Hue\";\nimport { Saturation } from \"./Saturation\";\n\nimport { ColorModel, ColorPickerBaseProps, AnyColor } from \"../../types\";\nimport { useColorManipulation } from \"../../hooks/useColorManipulation\";\nimport { useStyleSheet } from \"../../hooks/useStyleSheet\";\nimport { formatClassName } from \"../../utils/format\";\n\ninterface Props<T extends AnyColor> extends Partial<ColorPickerBaseProps<T>> {\n  colorModel: ColorModel<T>;\n}\n\nexport const ColorPicker = <T extends AnyColor>({\n  className,\n  colorModel,\n  color = colorModel.defaultColor,\n  onChange,\n  ...rest\n}: Props<T>): JSX.Element => {\n  const nodeRef = useRef<HTMLDivElement>(null);\n  useStyleSheet(nodeRef);\n\n  const [hsva, updateHsva] = useColorManipulation<T>(colorModel, color, onChange);\n\n  const nodeClassName = formatClassName([\"react-colorful\", className]);\n\n  return (\n    <div {...rest} ref={nodeRef} className={nodeClassName}>\n      <Saturation hsva={hsva} onChange={updateHsva} />\n      <Hue hue={hsva.h} onChange={updateHsva} className=\"react-colorful__last-control\" />\n    </div>\n  );\n};\n", "import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalHex } from \"../utils/compare\";\nimport { hexToHsva, hsvaToHex } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"000\",\n  toHsva: hexToHsva,\n  fromHsva: hsvaToHex,\n  equal: equalHex,\n};\n\nexport const HexColorPicker = (props: Partial<ColorPickerBaseProps<string>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { Interactive, Interaction } from \"./Interactive\";\nimport { Pointer } from \"./Pointer\";\n\nimport { hsvaToHslaString } from \"../../utils/convert\";\nimport { formatClassName } from \"../../utils/format\";\nimport { clamp } from \"../../utils/clamp\";\nimport { round } from \"../../utils/round\";\nimport { HsvaColor } from \"../../types\";\n\ninterface Props {\n  className?: string;\n  hsva: HsvaColor;\n  onChange: (newAlpha: { a: number }) => void;\n}\n\nexport const Alpha = ({ className, hsva, onChange }: Props): JSX.Element => {\n  const handleMove = (interaction: Interaction) => {\n    onChange({ a: interaction.left });\n  };\n\n  const handleKey = (offset: Interaction) => {\n    // Alpha always fit into [0, 1] range\n    onChange({ a: clamp(hsva.a + offset.left) });\n  };\n\n  // We use `Object.assign` instead of the spread operator\n  // to prevent adding the polyfill (about 150 bytes gzipped)\n  const colorFrom = hsvaToHslaString(Object.assign({}, hsva, { a: 0 }));\n  const colorTo = hsvaToHslaString(Object.assign({}, hsva, { a: 1 }));\n\n  const gradientStyle = {\n    backgroundImage: `linear-gradient(90deg, ${colorFrom}, ${colorTo})`,\n  };\n\n  const nodeClassName = formatClassName([\"react-colorful__alpha\", className]);\n\n  return (\n    <div className={nodeClassName}>\n      <div className=\"react-colorful__alpha-gradient\" style={gradientStyle} />\n      <Interactive\n        onMove={handleMove}\n        onKey={handleKey}\n        aria-label=\"Alpha\"\n        aria-valuetext={`${round(hsva.a * 100)}%`}\n      >\n        <Pointer\n          className=\"react-colorful__alpha-pointer\"\n          left={hsva.a}\n          color={hsvaToHslaString(hsva)}\n        />\n      </Interactive>\n    </div>\n  );\n};\n", "import React, { useRef } from \"react\";\n\nimport { Hue } from \"./Hue\";\nimport { Saturation } from \"./Saturation\";\nimport { Alpha } from \"./Alpha\";\n\nimport { ColorModel, ColorPickerBaseProps, AnyColor } from \"../../types\";\nimport { useColorManipulation } from \"../../hooks/useColorManipulation\";\nimport { useStyleSheet } from \"../../hooks/useStyleSheet\";\nimport { formatClassName } from \"../../utils/format\";\n\ninterface Props<T extends AnyColor> extends Partial<ColorPickerBaseProps<T>> {\n  colorModel: ColorModel<T>;\n}\n\nexport const AlphaColorPicker = <T extends AnyColor>({\n  className,\n  colorModel,\n  color = colorModel.defaultColor,\n  onChange,\n  ...rest\n}: Props<T>): JSX.Element => {\n  const nodeRef = useRef<HTMLDivElement>(null);\n  useStyleSheet(nodeRef);\n\n  const [hsva, updateHsva] = useColorManipulation<T>(colorModel, color, onChange);\n\n  const nodeClassName = formatClassName([\"react-colorful\", className]);\n\n  return (\n    <div {...rest} ref={nodeRef} className={nodeClassName}>\n      <Saturation hsva={hsva} onChange={updateHsva} />\n      <Hue hue={hsva.h} onChange={updateHsva} />\n      <Alpha hsva={hsva} onChange={updateHsva} className=\"react-colorful__last-control\" />\n    </div>\n  );\n};\n", "import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, HslaColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { hslaToHsva, hsvaToHsla } from \"../utils/convert\";\n\nconst colorModel: ColorModel<HslaColor> = {\n  defaultColor: { h: 0, s: 0, l: 0, a: 1 },\n  toHsva: hslaToHsva,\n  fromHsva: hsvaToHsla,\n  equal: equalColorObjects,\n};\n\nexport const HslaColorPicker = (props: Partial<ColorPickerBaseProps<HslaColor>>): JSX.Element => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { hslaStringToHsva, hsvaToHslaString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsla(0, 0%, 0%, 1)\",\n  toHsva: hslaStringToHsva,\n  fromHsva: hsvaToHslaString,\n  equal: equalColorString,\n};\n\nexport const HslaStringColorPicker = (\n  props: Partial<ColorPickerBaseProps<string>>\n): JSX.Element => <AlphaColorPicker {...props} colorModel={colorModel} />;\n", "import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, HslColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { hslaToHsva, hsvaToHsla, hslaToHsl } from \"../utils/convert\";\n\nconst colorModel: ColorModel<HslColor> = {\n  defaultColor: { h: 0, s: 0, l: 0 },\n  toHsva: ({ h, s, l }) => hslaToHsva({ h, s, l, a: 1 }),\n  fromHsva: (hsva) => hslaToHsl(hsvaToHsla(hsva)),\n  equal: equalColorObjects,\n};\n\nexport const HslColorPicker = (props: Partial<ColorPickerBaseProps<HslColor>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { hslStringToHsva, hsvaToHslString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsl(0, 0%, 0%)\",\n  toHsva: hslStringToHsva,\n  fromHsva: hsvaToHslString,\n  equal: equalColorString,\n};\n\nexport const HslStringColorPicker = (props: Partial<ColorPickerBaseProps<string>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, HsvaColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { roundHsva } from \"../utils/convert\";\n\nconst colorModel: ColorModel<HsvaColor> = {\n  defaultColor: { h: 0, s: 0, v: 0, a: 1 },\n  toHsva: (hsva) => hsva,\n  fromHsva: roundHsva,\n  equal: equalColorObjects,\n};\n\nexport const HsvaColorPicker = (props: Partial<ColorPickerBaseProps<HsvaColor>>): JSX.Element => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { hsvaStringToHsva, hsvaToHsvaString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsva(0, 0%, 0%, 1)\",\n  toHsva: hsvaStringToHsva,\n  fromHsva: hsvaToHsvaString,\n  equal: equalColorString,\n};\n\nexport const HsvaStringColorPicker = (\n  props: Partial<ColorPickerBaseProps<string>>\n): JSX.Element => <AlphaColorPicker {...props} colorModel={colorModel} />;\n", "import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, HsvColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { hsvaToHsv } from \"../utils/convert\";\n\nconst colorModel: ColorModel<HsvColor> = {\n  defaultColor: { h: 0, s: 0, v: 0 },\n  toHsva: ({ h, s, v }) => ({ h, s, v, a: 1 }),\n  fromHsva: hsvaToHsv,\n  equal: equalColorObjects,\n};\n\nexport const HsvColorPicker = (props: Partial<ColorPickerBaseProps<HsvColor>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { hsvStringToHsva, hsvaToHsvString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsv(0, 0%, 0%)\",\n  toHsva: hsvStringToHsva,\n  fromHsva: hsvaToHsvString,\n  equal: equalColorString,\n};\n\nexport const HsvStringColorPicker = (props: Partial<ColorPickerBaseProps<string>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, RgbaColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { rgbaToHsva, hsvaToRgba } from \"../utils/convert\";\n\nconst colorModel: ColorModel<RgbaColor> = {\n  defaultColor: { r: 0, g: 0, b: 0, a: 1 },\n  toHsva: rgbaToHsva,\n  fromHsva: hsvaToRgba,\n  equal: equalColorObjects,\n};\n\nexport const RgbaColorPicker = (props: Partial<ColorPickerBaseProps<RgbaColor>>): JSX.Element => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { rgbaStringToHsva, hsvaToRgbaString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"rgba(0, 0, 0, 1)\",\n  toHsva: rgbaStringToHsva,\n  fromHsva: hsvaToRgbaString,\n  equal: equalColorString,\n};\n\nexport const RgbaStringColorPicker = (\n  props: Partial<ColorPickerBaseProps<string>>\n): JSX.Element => <AlphaColorPicker {...props} colorModel={colorModel} />;\n", "import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, RgbColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { rgbaToHsva, hsvaToRgba, rgbaToRgb } from \"../utils/convert\";\n\nconst colorModel: ColorModel<RgbColor> = {\n  defaultColor: { r: 0, g: 0, b: 0 },\n  toHsva: ({ r, g, b }) => rgbaToHsva({ r, g, b, a: 1 }),\n  fromHsva: (hsva) => rgbaToRgb(hsvaToRgba(hsva)),\n  equal: equalColorObjects,\n};\n\nexport const RgbColorPicker = (props: Partial<ColorPickerBaseProps<RgbColor>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { rgbStringToHsva, hsvaToRgbString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"rgb(0, 0, 0)\",\n  toHsva: rgbStringToHsva,\n  fromHsva: hsvaToRgbString,\n  equal: equalColorString,\n};\n\nexport const RgbStringColorPicker = (props: Partial<ColorPickerBaseProps<string>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n", "const matcher = /^#?([0-9A-F]{3,8})$/i;\n\nexport const validHex = (value: string, alpha?: boolean): boolean => {\n  const match = matcher.exec(value);\n  const length = match ? match[1].length : 0;\n\n  return (\n    length === 3 || // '#rgb' format\n    length === 6 || // '#rrggbb' format\n    (!!alpha && length === 4) || // '#rgba' format\n    (!!alpha && length === 8) // '#rrggbbaa' format\n  );\n};\n", "import React, { useState, useEffect, useCallback } from \"react\";\n\nimport { useEventCallback } from \"../../hooks/useEventCallback\";\nimport { ColorInputBaseProps } from \"../../types\";\n\ninterface Props extends ColorInputBaseProps {\n  /** Blocks typing invalid characters and limits string length */\n  escape: (value: string) => string;\n  /** Checks that value is valid color string */\n  validate: (value: string) => boolean;\n  /** Processes value before displaying it in the input */\n  format?: (value: string) => string;\n  /** Processes value before sending it in `onChange` */\n  process?: (value: string) => string;\n}\n\nexport const ColorInput = (props: Props): JSX.Element => {\n  const { color = \"\", onChange, onBlur, escape, validate, format, process, ...rest } = props;\n  const [value, setValue] = useState(() => escape(color));\n  const onChangeCallback = useEventCallback<string>(onChange);\n  const onBlurCallback = useEventCallback<React.FocusEvent<HTMLInputElement>>(onBlur);\n\n  // Trigger `onChange` handler only if the input value is a valid color\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const inputValue = escape(e.target.value);\n      setValue(inputValue);\n      if (validate(inputValue)) onChangeCallback(process ? process(inputValue) : inputValue);\n    },\n    [escape, process, validate, onChangeCallback]\n  );\n\n  // Take the color from props if the last typed color (in local state) is not valid\n  const handleBlur = useCallback(\n    (e: React.FocusEvent<HTMLInputElement>) => {\n      if (!validate(e.target.value)) setValue(escape(color));\n      onBlurCallback(e);\n    },\n    [color, escape, validate, onBlurCallback]\n  );\n\n  // Update the local state when `color` property value is changed\n  useEffect(() => {\n    setValue(escape(color));\n  }, [color, escape]);\n\n  return (\n    <input\n      {...rest}\n      value={format ? format(value) : value}\n      spellCheck=\"false\" // the element should not be checked for spelling errors\n      onChange={handleChange}\n      onBlur={handleBlur}\n    />\n  );\n};\n", "import React, { useCallback } from \"react\";\nimport { ColorInputBaseProps } from \"../types\";\n\nimport { validHex } from \"../utils/validate\";\nimport { ColorInput } from \"./common/ColorInput\";\n\ninterface HexColorInputProps extends ColorInputBaseProps {\n  /** Enables `#` prefix displaying */\n  prefixed?: boolean;\n  /** Allows `#rgba` and `#rrggbbaa` color formats */\n  alpha?: boolean;\n}\n\n/** Adds \"#\" symbol to the beginning of the string */\nconst prefix = (value: string) => \"#\" + value;\n\nexport const HexColorInput = (props: HexColorInputProps): JSX.Element => {\n  const { prefixed, alpha, ...rest } = props;\n\n  /** Escapes all non-hexadecimal characters including \"#\" */\n  const escape = useCallback(\n    (value: string) => value.replace(/([^0-9A-F]+)/gi, \"\").substr(0, alpha ? 8 : 6),\n    [alpha]\n  );\n\n  /** Validates hexadecimal strings */\n  const validate = useCallback((value: string) => validHex(value, alpha), [alpha]);\n\n  return (\n    <ColorInput\n      {...rest}\n      escape={escape}\n      format={prefixed ? prefix : undefined}\n      process={prefix}\n      validate={validate}\n    />\n  );\n};\n"],
  "mappings": "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",
  "names": []
}
