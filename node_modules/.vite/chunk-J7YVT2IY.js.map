{
  "version": 3,
  "sources": ["../@react-stately/collections/dist/packages/@react-stately/collections/src/index.ts", "../@react-stately/collections/dist/packages/@react-stately/collections/src/Item.ts", "../@react-stately/collections/dist/packages/@react-stately/collections/src/Section.ts", "../@react-stately/collections/dist/packages/@react-stately/collections/src/types.ts", "../@react-stately/collections/dist/packages/@react-stately/collections/src/useCollection.ts", "../@react-stately/collections/dist/packages/@react-stately/collections/src/CollectionBuilder.ts", "../@react-stately/collections/dist/packages/@react-stately/collections/src/getItemCount.ts", "../@react-aria/button/dist/packages/@react-aria/button/src/index.ts", "../@react-aria/button/dist/packages/@react-aria/button/src/useButton.ts", "../@react-aria/button/dist/packages/@react-aria/button/src/useToggleButton.ts", "../@react-stately/checkbox/dist/packages/@react-stately/checkbox/src/index.ts", "../@react-stately/checkbox/dist/packages/@react-stately/checkbox/src/useCheckboxGroupState.ts", "../@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/index.ts", "../@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Layout.ts", "../@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/LayoutInfo.ts", "../@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Point.ts", "../@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Rect.ts", "../@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Size.ts", "../@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/ReusableView.ts", "../@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/useVirtualizerState.ts", "../@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Virtualizer.ts", "../@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/tween.ts", "../@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/utils.ts", "../@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/OverscanManager.ts", "../@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Transaction.ts", "../@react-stately/selection/dist/packages/@react-stately/selection/src/index.ts", "../@react-stately/selection/dist/packages/@react-stately/selection/src/useMultipleSelectionState.ts", "../@react-stately/selection/dist/packages/@react-stately/selection/src/Selection.ts", "../@react-stately/selection/dist/packages/@react-stately/selection/src/SelectionManager.ts", "../@react-stately/selection/dist/packages/@react-stately/selection/src/types.ts", "../@react-stately/grid/dist/packages/@react-stately/grid/src/index.ts", "../@react-stately/grid/dist/packages/@react-stately/grid/src/useGridState.ts", "../@react-stately/grid/dist/packages/@react-stately/grid/src/GridCollection.ts", "../@react-aria/dialog/dist/packages/@react-aria/dialog/src/index.ts", "../@react-aria/dialog/dist/packages/@react-aria/dialog/src/useDialog.ts", "../@react-stately/overlays/dist/packages/@react-stately/overlays/src/index.ts", "../@react-stately/overlays/dist/packages/@react-stately/overlays/src/useOverlayTriggerState.ts", "../@react-aria/toggle/dist/packages/@react-aria/toggle/src/index.ts", "../@react-aria/toggle/dist/packages/@react-aria/toggle/src/useToggle.ts", "../@react-aria/selection/dist/packages/@react-aria/selection/src/index.ts", "../@react-aria/selection/dist/packages/@react-aria/selection/src/useSelectableCollection.ts", "../@react-aria/selection/dist/packages/@react-aria/selection/src/utils.ts", "../@react-aria/selection/dist/packages/@react-aria/selection/src/useTypeSelect.ts", "../@react-aria/selection/dist/packages/@react-aria/selection/src/useSelectableItem.ts", "../@react-aria/selection/dist/packages/@react-aria/selection/src/useSelectableList.ts", "../@react-aria/selection/dist/packages/@react-aria/selection/src/ListKeyboardDelegate.ts", "../@react-aria/grid/dist/packages/@react-aria/grid/src/index.ts", "../@react-aria/grid/dist/packages/@react-aria/grid/src/GridKeyboardDelegate.ts", "../@react-aria/grid/dist/packages/@react-aria/grid/src/useGrid.ts", "../@react-aria/grid/dist/packages/@react-aria/grid/src/utils.ts", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/*.js", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/ar-AE.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/bg-BG.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/cs-CZ.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/da-DK.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/de-DE.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/el-GR.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/en-US.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/es-ES.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/et-EE.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/fi-FI.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/fr-FR.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/he-IL.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/hr-HR.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/hu-HU.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/it-IT.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/ja-JP.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/ko-KR.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/lt-LT.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/lv-LV.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/nb-NO.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/nl-NL.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/pl-PL.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/pt-BR.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/pt-PT.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/ro-RO.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/ru-RU.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/sk-SK.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/sl-SI.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/sr-SP.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/sv-SE.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/tr-TR.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/uk-UA.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/zh-CN.json", "../@react-aria/grid/dist/packages/@react-aria/grid/intl/zh-TW.json", "../@react-aria/grid/dist/packages/@react-aria/grid/src/useHighlightSelectionDescription.ts", "../@react-aria/grid/dist/packages/@react-aria/grid/src/useGridRowGroup.ts", "../@react-aria/grid/dist/packages/@react-aria/grid/src/useGridRow.ts", "../@react-aria/grid/dist/packages/@react-aria/grid/src/useGridCell.ts", "../@react-aria/grid/dist/packages/@react-aria/grid/src/useGridSelectionCheckbox.ts"],
  "sourcesContent": ["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './Item';\nexport * from './Section';\nexport * from './types';\nexport * from './useCollection';\nexport * from './getItemCount';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ItemElement, ItemProps} from '@react-types/shared';\nimport {PartialNode} from './types';\nimport React, {ReactElement} from 'react';\n\nfunction Item<T>(props: ItemProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nItem.getCollectionNode = function* getCollectionNode<T>(props: ItemProps<T>, context: any): Generator<PartialNode<T>> {\n  let {childItems, title, children} = props;\n\n  let rendered = props.title || props.children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'] || '';\n\n  // suppressTextValueWarning is used in components like Tabs, which don't have type to select support.\n  if (!textValue && !context?.suppressTextValueWarning) {\n    console.warn('<Item> with non-plain text contents is unsupported by type to select for accessibility. Please add a `textValue` prop.');\n  }\n\n  yield {\n    type: 'item',\n    props: props,\n    rendered,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: hasChildItems(props),\n    *childNodes() {\n      if (childItems) {\n        for (let child of childItems) {\n          yield {\n            type: 'item',\n            value: child\n          };\n        }\n      } else if (title) {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          items.push({\n            type: 'item',\n            element: child as ItemElement<T>\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\nfunction hasChildItems<T>(props: ItemProps<T>) {\n  if (props.hasChildItems != null) {\n    return props.hasChildItems;\n  }\n\n  if (props.childItems) {\n    return true;\n  }\n\n  if (props.title && React.Children.count(props.children) > 0) {\n    return true;\n  }\n\n  return false;\n}\n\n// We don't want getCollectionNode to show up in the type definition\nlet _Item = Item as <T>(props: ItemProps<T>) => JSX.Element;\nexport {_Item as Item};\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from './types';\nimport React, {ReactElement} from 'react';\nimport {SectionProps} from '@react-types/shared';\n\nfunction Section<T>(props: SectionProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nSection.getCollectionNode = function* getCollectionNode<T>(props: SectionProps<T>): Generator<PartialNode<T>> {\n  let {children, title, items} = props;\n  yield {\n    type: 'section',\n    hasChildNodes: true,\n    rendered: title,\n    'aria-label': props['aria-label'],\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items) {\n          throw new Error('props.children was a function but props.items is missing');\n        }\n    \n        for (let item of items) {\n          yield {\n            type: 'item',\n            value: item,\n            renderer: children\n          };\n        }\n      } else {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          items.push({\n            type: 'item',\n            element: child\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\n// We don't want getCollectionNode to show up in the type definition\nlet _Section = Section as <T>(props: SectionProps<T>) => JSX.Element;\nexport {_Section as Section};\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ItemRenderer} from '@react-types/shared';\nimport {Key, ReactElement, ReactNode} from 'react';\n\nexport interface PartialNode<T> {\n  type?: string,\n  key?: Key,\n  value?: T,\n  element?: ReactElement,\n  wrapper?: (element: ReactElement) => ReactElement,\n  rendered?: ReactNode,\n  textValue?: string,\n  'aria-label'?: string,\n  index?: number,\n  renderer?: ItemRenderer<T>,\n  hasChildNodes?: boolean,\n  childNodes?: () => IterableIterator<PartialNode<T>>,\n  props?: any,\n  shouldInvalidate?: (context: unknown) => boolean\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, Node} from '@react-types/shared';\nimport {CollectionBuilder} from './CollectionBuilder';\nimport {useMemo, useRef} from 'react';\n\ntype CollectionFactory<T, C extends Collection<Node<T>>> = (node: Iterable<Node<T>>, prev: C | null) => C;\n\nexport function useCollection<T extends object, C extends Collection<Node<T>> = Collection<Node<T>>>(props: CollectionBase<T>, factory: CollectionFactory<T, C>, context?: unknown, invalidators: Array<any> = []): C {\n  let builder = useMemo(() => new CollectionBuilder<T>(), []);\n\n  let prev = useRef<C>(null);\n  return useMemo(() => {\n    let nodes = builder.build(props, context);\n    prev.current = factory(nodes, prev.current);\n    return prev.current;\n  // Don't invalidate when any prop changes, just the two we care about.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [builder, props.children, props.items, context, ...invalidators]);\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, CollectionElement, Node} from '@react-types/shared';\nimport {PartialNode} from './types';\nimport React, {Key, ReactElement} from 'react';\n\ninterface CollectionBuilderState {\n  renderer?: (value: any) => ReactElement\n}\n\nexport class CollectionBuilder<T extends object> {\n  private context?: unknown;\n  private cache: WeakMap<T, Node<T>> = new WeakMap();\n\n  build(props: CollectionBase<T>, context?: unknown) {\n    this.context = context;\n    return iterable(() => this.iterateCollection(props));\n  }\n\n  private *iterateCollection(props: CollectionBase<T>) {\n    let {children, items} = props;\n\n    if (typeof children === 'function') {\n      if (!items) {\n        throw new Error('props.children was a function but props.items is missing');\n      }\n\n      for (let item of props.items) {\n        yield* this.getFullNode({\n          value: item\n        }, {renderer: children});\n      }\n    } else {\n      let items: CollectionElement<T>[] = [];\n      React.Children.forEach(children, child => {\n        items.push(child);\n      });\n\n      let index = 0;\n      for (let item of items) {\n        let nodes = this.getFullNode({\n          element: item,\n          index: index\n        }, {});\n\n        for (let node of nodes) {\n          index++;\n          yield node;\n        }\n      }\n    }\n  }\n\n  private getKey(item: CollectionElement<T>, partialNode: PartialNode<T>, state: CollectionBuilderState, parentKey?: Key): Key {\n    if (item.key != null) {\n      return item.key;\n    }\n\n    if (partialNode.type === 'cell' && partialNode.key != null) {\n      return `${parentKey}${partialNode.key}`;\n    }\n\n    let v = partialNode.value as any;\n    if (v != null) {\n      let key = v.key ?? v.id;\n      if (key == null) {\n        throw new Error('No key found for item');\n      }\n\n      return key;\n    }\n\n    return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;\n  }\n\n  private getChildState(state: CollectionBuilderState, partialNode: PartialNode<T>) {\n    return {\n      renderer: partialNode.renderer || state.renderer\n    };\n  }\n\n  private *getFullNode(partialNode: PartialNode<T>, state: CollectionBuilderState, parentKey?: Key, parentNode?: Node<T>): Generator<Node<T>> {\n    // If there's a value instead of an element on the node, and a parent renderer function is available,\n    // use it to render an element for the value.\n    let element = partialNode.element;\n    if (!element && partialNode.value && state && state.renderer) {\n      let cached = this.cache.get(partialNode.value);\n      if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {\n        cached.index = partialNode.index;\n        cached.parentKey = parentNode ? parentNode.key : null;\n        yield cached;\n        return;\n      }\n\n      element = state.renderer(partialNode.value);\n    }\n\n    // If there's an element with a getCollectionNode function on its type, then it's a supported component.\n    // Call this function to get a partial node, and recursively build a full node from there.\n    if (React.isValidElement(element)) {\n      let type = element.type as any;\n      if (typeof type !== 'function' && typeof type.getCollectionNode !== 'function') {\n        let name = typeof element.type === 'function' ? element.type.name : element.type;\n        throw new Error(`Unknown element <${name}> in collection.`);\n      }\n\n      let childNodes = type.getCollectionNode(element.props, this.context) as Generator<PartialNode<T>, void, Node<T>[]>;\n      let index = partialNode.index;\n      let result = childNodes.next();\n      while (!result.done && result.value) {\n        let childNode = result.value;\n\n        partialNode.index = index;\n\n        let nodeKey = childNode.key;\n        if (!nodeKey) {\n          nodeKey = childNode.element ? null : this.getKey(element as CollectionElement<T>, partialNode, state, parentKey);\n        }\n\n        let nodes = this.getFullNode({\n          ...childNode,\n          key: nodeKey,\n          index,\n          wrapper: compose(partialNode.wrapper, childNode.wrapper)\n        }, this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);\n\n        let children = [...nodes];\n        for (let node of children) {\n          // Cache the node based on its value\n          node.value = childNode.value || partialNode.value;\n          if (node.value) {\n            this.cache.set(node.value, node);\n          }\n\n          // The partial node may have specified a type for the child in order to specify a constraint.\n          // Verify that the full node that was built recursively matches this type.\n          if (partialNode.type && node.type !== partialNode.type) {\n            throw new Error(`Unsupported type <${capitalize(node.type)}> in <${capitalize(parentNode.type)}>. Only <${capitalize(partialNode.type)}> is supported.`);\n          }\n\n          index++;\n          yield node;\n        }\n\n        result = childNodes.next(children);\n      }\n\n      return;\n    }\n\n    // Ignore invalid elements\n    if (partialNode.key == null) {\n      return;\n    }\n\n    // Create full node\n    let builder = this;\n    let node: Node<T> = {\n      type: partialNode.type,\n      props: partialNode.props,\n      key: partialNode.key,\n      parentKey: parentNode ? parentNode.key : null,\n      value: partialNode.value,\n      level: parentNode ? parentNode.level + 1 : 0,\n      index: partialNode.index,\n      rendered: partialNode.rendered,\n      textValue: partialNode.textValue,\n      'aria-label': partialNode['aria-label'],\n      wrapper: partialNode.wrapper,\n      shouldInvalidate: partialNode.shouldInvalidate,\n      hasChildNodes: partialNode.hasChildNodes,\n      childNodes: iterable(function *() {\n        if (!partialNode.hasChildNodes) {\n          return;\n        }\n\n        let index = 0;\n        for (let child of partialNode.childNodes()) {\n          // Ensure child keys are globally unique by prepending the parent node's key\n          if (child.key != null) {\n            // TODO: Remove this line entirely and enforce that users always provide unique keys.\n            // Currently this line will have issues when a parent has a key `a` and a child with key `bc`\n            // but another parent has key `ab` and its child has a key `c`. The combined keys would result in both\n            // children having a key of `abc`.\n            child.key = `${node.key}${child.key}`;\n          }\n\n          child.index = index;\n          let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);\n          for (let node of nodes) {\n            index++;\n            yield node;\n          }\n        }\n      })\n    };\n\n    yield node;\n  }\n}\n\n// Wraps an iterator function as an iterable object, and caches the results.\nfunction iterable<T>(iterator: () => IterableIterator<Node<T>>): Iterable<Node<T>> {\n  let cache = [];\n  let iterable = null;\n  return {\n    *[Symbol.iterator]() {\n      for (let item of cache) {\n        yield item;\n      }\n\n      if (!iterable) {\n        iterable = iterator();\n      }\n\n      for (let item of iterable) {\n        cache.push(item);\n        yield item;\n      }\n    }\n  };\n}\n\ntype Wrapper = (element: ReactElement) => ReactElement;\nfunction compose(outer: Wrapper | void, inner: Wrapper | void): Wrapper {\n  if (outer && inner) {\n    return (element) => outer(inner(element));\n  }\n\n  if (outer) {\n    return outer;\n  }\n\n  if (inner) {\n    return inner;\n  }\n}\n\nfunction capitalize(str: string) {\n  return str[0].toUpperCase() + str.slice(1);\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Node} from '@react-types/shared';\n\nconst cache = new WeakMap<Iterable<unknown>, number>();\n\nexport function getItemCount<T>(collection: Iterable<Node<T>>): number {\n  let count = cache.get(collection);\n  if (count != null) {\n    return count;\n  }\n\n  count = 0;\n  for (let item of collection) {\n    if (item.type === 'section') {\n      count += getItemCount(item.childNodes);\n    } else {\n      count++;\n    }\n  }\n\n  cache.set(collection, count);\n  return count;\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useButton';\nexport * from './useToggleButton';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaButtonProps} from '@react-types/button';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\n\nexport interface ButtonAria<T> {\n  /** Props for the button element. */\n  buttonProps: T,\n  /** Whether the button is currently pressed. */\n  isPressed: boolean\n}\n\n// Order with overrides is important: 'button' should be default\nexport function useButton(props: AriaButtonProps<'button'>, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useButton(props: AriaButtonProps<'a'>, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useButton(props: AriaButtonProps<'div'>, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useButton(props: AriaButtonProps<'input'>, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useButton(props: AriaButtonProps<'span'>, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<HTMLElement>): ButtonAria<HTMLAttributes<HTMLElement>>;\n/**\n * Provides the behavior and accessibility implementation for a button component. Handles mouse, keyboard, and touch interactions,\n * focus behavior, and ARIA props for both native button elements and custom element types.\n * @param props - Props to be applied to the button.\n * @param ref - A ref to a DOM element for the button.\n */\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  let {\n    elementType = 'button',\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href,\n    target,\n    rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n  if (elementType === 'button') {\n    additionalProps = {\n      type,\n      disabled: isDisabled\n    };\n  } else {\n    additionalProps = {\n      role: 'button',\n      tabIndex: isDisabled ? undefined : 0,\n      href: elementType === 'a' && isDisabled ? undefined : href,\n      target: elementType === 'a' ? target : undefined,\n      type: elementType === 'input' ? type : undefined,\n      disabled: elementType === 'input' ? isDisabled : undefined,\n      'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n      rel: elementType === 'a' ? rel : undefined\n    };\n  }\n\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n    preventFocusOnPress,\n    ref\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  if (allowFocusWhenDisabled) {\n    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  }\n  let buttonProps = mergeProps(focusableProps, pressProps, filterDOMProps(props, {labelable: true}));\n\n  return {\n    isPressed, // Used to indicate press state for visual\n    buttonProps: mergeProps(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      onClick: (e) => {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaToggleButtonProps} from '@react-types/button';\nimport {ButtonAria, useButton} from './useButton';\nimport {chain} from '@react-aria/utils';\nimport {mergeProps} from '@react-aria/utils';\nimport {ToggleState} from '@react-stately/toggle';\n\nexport function useToggleButton(props: AriaToggleButtonProps<'a'>, state: ToggleState, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'button'>, state: ToggleState, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'div'>, state: ToggleState, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'input'>, state: ToggleState, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'span'>, state: ToggleState, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<HTMLElement>): ButtonAria<HTMLAttributes<HTMLElement>>;\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  const {isSelected} = state;\n  const {isPressed, buttonProps} = useButton({\n    ...props,\n    onPress: chain(state.toggle, props.onPress)\n  }, ref);\n\n  return {\n    isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useCheckboxGroupState';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (!selectedValues.includes(value)) {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      }\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      } else {\n        setValue(selectedValues.concat(value));\n      }\n    }\n  };\n\n  return state;\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './Layout';\nexport * from './LayoutInfo';\nexport * from './Point';\nexport * from './Rect';\nexport * from './Size';\nexport * from './ReusableView';\nexport type {InvalidationContext} from './types';\n\nexport * from './useVirtualizerState';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {InvalidationContext} from './types';\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\n// import {Point} from './Point';\nimport {Rect} from './Rect';\nimport {Size} from './Size';\nimport {Virtualizer} from './Virtualizer';\n// import { DragTarget, DropTarget } from '@react-types/shared';\n\n/**\n * [CollectionView]{@link CollectionView} supports arbitrary layout objects, which compute what views are visible, and how\n * to position and style them. However, layouts do not create the views themselves directly. Instead,\n * layouts produce lightweight {@link LayoutInfo} objects which describe various properties of a view,\n * such as its position and size. The {@link CollectionView} is then responsible for creating the actual\n * views as needed, based on this layout information.\n *\n * Every layout extends from the {@link Layout} abstract base class. Layouts must implement a minimum of the\n * two methods listed below. All other methods can be optionally overridden to implement custom behavior.\n *\n * @see {@link getVisibleLayoutInfos}\n * @see {@link getLayoutInfo}\n */\nexport abstract class Layout<T extends object> {\n  /** The CollectionView the layout is currently attached to. */\n  virtualizer: Virtualizer<T, any, any>;\n\n  /**\n   * Returns whether the layout should invalidate in response to\n   * visible rectangle changes. By default, it only invalidates\n   * when the collection view's size changes. Return true always\n   * to make the layout invalidate while scrolling (e.g. sticky headers).\n   */\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    // By default, invalidate when the size changes\n    return newRect.width !== oldRect.width\n        || newRect.height !== oldRect.height;\n  }\n\n  /**\n   * This method allows the layout to perform any pre-computation\n   * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n   * Called by the collection view before {@link getVisibleLayoutInfos}\n   * or {@link getLayoutInfo} are called.\n   */\n  validate(invalidationContext: InvalidationContext<T, any>) {} // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Returns an array of {@link LayoutInfo} objects which are inside the given rectangle.\n   * Should be implemented by subclasses.\n   * @param rect The rectangle that should contain the returned LayoutInfo objects.\n   */\n  abstract getVisibleLayoutInfos(rect: Rect): LayoutInfo[];\n\n  /**\n   * Returns a {@link LayoutInfo} for the given key.\n   * Should be implemented by subclasses.\n   * @param key The key of the LayoutInfo to retrieve.\n   */\n  abstract getLayoutInfo(key: Key): LayoutInfo;\n\n  /**\n   * Returns size of the content. By default, it returns collectionView's size.\n   */\n  abstract getContentSize(): Size;\n\n  /**\n   * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n   * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n   * @param point The point at which the drag occurred.\n   */\n  // getDragTarget(point: Point): DragTarget | null {\n  //   let target = this.virtualizer.keyAtPoint(point);\n  //   if (!target) {\n  //     return null;\n  //   }\n\n  //   return {\n  //     type: 'item',\n  //     key: target\n  //   };\n  // }\n\n  /**\n   * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n   * to reject the drop. The dropped items will be inserted before the resulting target.\n   * @param point The point at which the drop occurred.\n   */\n  // getDropTarget(point: Point): DropTarget | null {\n  //   return null;\n  // }\n\n  /**\n   * Returns the starting attributes for an animated insertion.\n   * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n   * The default implementation just returns its input.\n   *\n   * @param layoutInfo The proposed LayoutInfo for this view.\n   */\n  getInitialLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n\n  /**\n   * Returns the ending attributes for an animated removal.\n   * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n   * to the one returned by this method. The default implementation returns its input.\n   *\n   * @param layoutInfo The original LayoutInfo for this view.\n   */\n  getFinalLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {Rect} from './Rect';\n\n/**\n * Instances of this lightweight class are created by {@link Layout} subclasses\n * to represent each view in the {@link CollectionView}. LayoutInfo objects describe\n * various properties of a view, such as its position and size, and style information.\n * The collection view uses this information when creating actual views to display.\n */\nexport class LayoutInfo {\n  /**\n   * A string representing the view type. Should be `'item'` for item views.\n   * Other types are used by supplementary views.\n   */\n  type: string;\n\n  /**\n   * A unique key for this view. For item views, it should match the content key.\n   */\n  key: Key;\n\n  /**\n   * The key for a parent layout info, if any.\n   */\n  parentKey: Key | null;\n\n  /**\n   * The rectangle describing the size and position of this view.\n   */\n  rect: Rect;\n\n  /**\n   * Whether the size is estimated. `false` by default.\n   */\n  estimatedSize: boolean;\n\n  /**\n   * Whether the layout info sticks to the viewport when scrolling.\n   */\n  isSticky: boolean;\n\n  /**\n   * The view's opacity. 1 by default.\n   */\n  opacity: number;\n\n  /**\n   * A CSS transform string to apply to the view. `null` by default.\n   */\n  transform: string | null;\n\n  /**\n   * The z-index of the view. 0 by default.\n   */\n  zIndex: number;\n\n  /**\n   * Whether the layout info allows its contents to overflow its container.\n   * @default false\n   */\n  allowOverflow: boolean;\n\n  /**\n   * @param type A string representing the view type. Should be `'item'` for item views.\n                            Other types are used by supplementary views.\n   * @param key The unique key for this view.\n   * @param rect The rectangle describing the size and position of this view.\n   */\n  constructor(type: string, key: Key, rect: Rect) {\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n\n  /**\n   * Returns a copy of the LayoutInfo.\n   */\n  copy(): LayoutInfo {\n    let res = new LayoutInfo(this.type, this.key, this.rect.copy());\n    res.estimatedSize = this.estimatedSize;\n    res.opacity = this.opacity;\n    res.transform = this.transform;\n    res.parentKey = this.parentKey;\n    res.isSticky = this.isSticky;\n    res.zIndex = this.zIndex;\n    res.allowOverflow = this.allowOverflow;\n    return res;\n  }\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Point {\n  /** The x-coordinate of the point. */\n  x: number;\n\n  /** The y-coordinate of the point. */\n  y: number;\n\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns a copy of this point.\n   */\n  copy(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Checks if two points are equal.\n   */\n  equals(point: Point): boolean {\n    return this.x === point.x && this.y === point.y;\n  }\n\n  /**\n   * Returns true if this point is the origin.\n   */\n  isOrigin(): boolean {\n    return this.x === 0 && this.y === 0;\n  }\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Size} from './Size';\n\nexport type RectCorner = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\n/**\n * Represents a rectangle.\n */\nexport class Rect {\n  /** The x-coordinate of the rectangle. */\n  x: number;\n\n  /** The y-coordinate of the rectangle. */\n  y: number;\n\n  /** The width of the rectangle. */\n  width: number;\n\n  /** The height of the rectangle. */\n  height: number;\n\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * The maximum x-coordinate in the rectangle.\n   */\n  get maxX(): number {\n    return this.x + this.width;\n  }\n\n  /**\n   * The maximum y-coordinate in the rectangle.\n   */\n  get maxY(): number {\n    return this.y + this.height;\n  }\n\n  /**\n   * The area of the rectangle.\n   */\n  get area(): number {\n    return this.width * this.height;\n  }\n\n  /**\n   * The top left corner of the rectangle.\n   */\n  get topLeft(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * The top right corner of the rectangle.\n   */\n  get topRight(): Point {\n    return new Point(this.maxX, this.y);\n  }\n\n  /**\n   * The bottom left corner of the rectangle.\n   */\n  get bottomLeft(): Point {\n    return new Point(this.x, this.maxY);\n  }\n\n  /**\n   * The bottom right corner of the rectangle.\n   */\n  get bottomRight(): Point {\n    return new Point(this.maxX, this.maxY);\n  }\n\n  /**\n   * Returns whether this rectangle intersects another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  intersects(rect: Rect): boolean {\n    return this.x <= rect.x + rect.width\n        && rect.x <= this.x + this.width\n        && this.y <= rect.y + rect.height\n        && rect.y <= this.y + this.height;\n  }\n\n  /**\n   * Returns whether this rectangle fully contains another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  containsRect(rect: Rect): boolean {\n    return this.x <= rect.x\n        && this.y <= rect.y\n        && this.maxX >= rect.maxX\n        && this.maxY >= rect.maxY;\n  }\n\n  /**\n   * Returns whether the rectangle contains the given point.\n   * @param point - The point to check.\n   */\n  containsPoint(point: Point): boolean {\n    return this.x <= point.x\n        && this.y <= point.y\n        && this.maxX >= point.x\n        && this.maxY >= point.y;\n  }\n\n  /**\n   * Returns the first corner of this rectangle (from top to bottom, left to right)\n   * that is contained in the given rectangle, or null of the rectangles do not intersect.\n   * @param rect - The rectangle to check.\n   */\n  getCornerInRect(rect: Rect): RectCorner | null {\n    for (let key of ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']) {\n      if (rect.containsPoint(this[key])) {\n        return key as RectCorner;\n      }\n    }\n\n    return null;\n  }\n\n  equals(rect: Rect) {\n    return rect.x === this.x\n        && rect.y === this.y\n        && rect.width === this.width\n        && rect.height === this.height;\n  }\n\n  pointEquals(point: Point | Rect) {\n    return this.x === point.x\n        && this.y === point.y;\n  }\n\n  sizeEquals(size: Size | Rect) {\n    return this.width === size.width\n        && this.height === size.height;\n  }\n\n  /**\n   * Returns a copy of this rectangle.\n   */\n  copy(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Size {\n  width: number;\n  height: number;\n\n  constructor(width = 0, height = 0) {\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Returns a copy of this size.\n   */\n  copy(): Size {\n    return new Size(this.width, this.height);\n  }\n\n  /**\n   * Returns whether this size is equal to another one.\n   */\n  equals(other: Size): boolean {\n    return this.width === other.width\n        && this.height === other.height;\n  }\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {Virtualizer} from './Virtualizer';\n\nlet KEY = 0;\n\n/**\n * [CollectionView]{@link CollectionView} creates instances of the [ReusableView]{@link ReusableView} class to\n * represent views currently being displayed. ReusableViews manage a DOM node, handle\n * applying {@link LayoutInfo} objects to the view, and render content\n * as needed. Subclasses must implement the {@link render} method at a\n * minimum. Other methods can be overridden to customize behavior.\n */\nexport class ReusableView<T extends object, V> {\n  /** The CollectionVirtualizer this view is a part of. */\n  virtualizer: Virtualizer<T, V, unknown>;\n\n  /** The LayoutInfo this view is currently representing. */\n  layoutInfo: LayoutInfo | null;\n\n  /** The content currently being displayed by this view, set by the collection view. */\n  content: T;\n\n  rendered: V;\n\n  viewType: string;\n  key: Key;\n\n  constructor(virtualizer: Virtualizer<T, V, unknown>) {\n    this.virtualizer = virtualizer;\n    this.key = ++KEY;\n  }\n\n  /**\n   * Prepares the view for reuse. Called just before the view is removed from the DOM.\n   */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection} from '@react-types/shared';\nimport {Key, useCallback, useEffect, useMemo, useState} from 'react';\nimport {Layout} from './Layout';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {Virtualizer} from './Virtualizer';\n\ninterface VirtualizerProps<T extends object, V, W> {\n  renderView(type: string, content: T): V,\n  renderWrapper(\n    parent: ReusableView<T, V> | null,\n    reusableView: ReusableView<T, V>,\n    children: ReusableView<T, V>[],\n    renderChildren: (views: ReusableView<T, V>[]) => W[]\n  ): W,\n  layout: Layout<T>,\n  collection: Collection<T>,\n  onVisibleRectChange(rect: Rect): void,\n  getScrollAnchor?(rect: Rect): Key,\n  transitionDuration?: number\n}\n\nexport interface VirtualizerState<T extends object, V, W> {\n  visibleViews: W[],\n  setVisibleRect: (rect: Rect) => void,\n  contentSize: Size,\n  isAnimating: boolean,\n  virtualizer: Virtualizer<T, V, W>,\n  isScrolling: boolean,\n  startScrolling: () => void,\n  endScrolling: () => void\n}\n\nexport function useVirtualizerState<T extends object, V, W>(opts: VirtualizerProps<T, V, W>): VirtualizerState<T, V, W> {\n  let [visibleViews, setVisibleViews] = useState<W[]>([]);\n  let [contentSize, setContentSize] = useState(new Size());\n  let [isAnimating, setAnimating] = useState(false);\n  let [isScrolling, setScrolling] = useState(false);\n  let virtualizer = useMemo(() => new Virtualizer<T, V, W>(), []);\n\n  virtualizer.delegate = {\n    setVisibleViews,\n    setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: () => setAnimating(true),\n    endAnimations: () => setAnimating(false),\n    getScrollAnchor: opts.getScrollAnchor\n  };\n\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n\n  useLayoutEffect(() => {\n    virtualizer.afterRender();\n  });\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => virtualizer.willUnmount();\n  }, []);\n\n  return {\n    virtualizer,\n    visibleViews,\n    setVisibleRect: useCallback((rect) => {\n      virtualizer.visibleRect = rect;\n    }, [virtualizer]),\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling: useCallback(() => {\n      virtualizer.startScrolling();\n      setScrolling(true);\n    }, [virtualizer]),\n    endScrolling: useCallback(() => {\n      virtualizer.endScrolling();\n      setScrolling(false);\n    }, [virtualizer])\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CancelablePromise, easeOut, tween} from './tween';\nimport {Collection} from '@react-types/shared';\nimport {concatIterators, difference} from './utils';\nimport {\n  InvalidationContext,\n  ScrollAnchor,\n  ScrollToItemOptions,\n  VirtualizerDelegate,\n  VirtualizerOptions\n} from './types';\nimport {Key} from 'react';\nimport {Layout} from './Layout';\nimport {LayoutInfo} from './LayoutInfo';\nimport {OverscanManager} from './OverscanManager';\nimport {Point} from './Point';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {Transaction} from './Transaction';\n\n/**\n * The CollectionView class renders a scrollable collection of data using customizable layouts,\n * and manages animated updates to the data over time. It supports very large collections by\n * only rendering visible views to the DOM, reusing them as you scroll. Collection views can\n * present any type of view, including non-item views such as section headers and footers.\n * Optionally, the {@link EditableCollectionView} subclass can be used to enable user interaction\n * with the collection, including drag and drop, multiple selection, and keyboard interacton.\n *\n * Collection views get their data from a {@link DataSource} object that you provide. Items are\n * grouped into sections by the data source, and the collection view calls its methods to retrieve\n * the data. When data changes, the data source emits change events, and the collection view\n * updates as appropriate, optionally with an animated transition. There is one built-in data source\n * implementation, {@link ArrayDataSource}, which renders content from a 2d array.\n *\n * Collection views use {@link Layout} objects to compute what views should be visible, and how\n * to position and style them. This means that collection views can have their items arranged in\n * a stack, a grid, a circle, or any other layout you can think of. The layout can be changed\n * dynamically at runtime as well, optionally with an animated transition between the layouts.\n *\n * Layouts produce information on what views should appear in the collection view, but do not create\n * the views themselves directly. It is the responsibility of the {@link CollectionViewDelegate} object\n * to create instances of {@link ReusableView} subclasses which render the items into DOM nodes.\n * The delegate determines what type of view to display for each item, and creates instances of\n * views as needed by the collection view. Those views are then reused by the collection view as\n * the user scrolls through the content.\n */\nexport class Virtualizer<T extends object, V, W> {\n  /**\n   * The collection view delegate. The delegate is used by the collection view\n   * to create and configure views.\n   */\n  delegate: VirtualizerDelegate<T, V, W>;\n\n  /** The duration of animated layout changes, in milliseconds. Default is 500ms. */\n  transitionDuration: number;\n\n  /**\n   * Whether to enable scroll anchoring. This will attempt to restore the scroll position\n   * after layout changes outside the viewport. Default is off.\n   */\n  anchorScrollPosition: boolean;\n\n  /** Whether to anchor the scroll position when at the top of the content. Default is off. */\n  anchorScrollPositionAtTop: boolean;\n\n  /**\n   * Whether to overscan the visible area to pre-render items slightly outside and\n   * improve performance. Default is on.\n   */\n  shouldOverscan: boolean;\n\n  private _collection: Collection<T>;\n  private _layout: Layout<T>;\n  private _contentSize: Size;\n  private _visibleRect: Rect;\n  private _visibleLayoutInfos: Map<Key, LayoutInfo>;\n  private _reusableViews: {[type: string]: ReusableView<T, V>[]};\n  private _visibleViews: Map<Key, ReusableView<T, V>>;\n  private _renderedContent: WeakMap<T, V>;\n  private _children: Set<ReusableView<T, V>>;\n  private _invalidationContext: InvalidationContext<T, V> | null;\n  private _overscanManager: OverscanManager;\n  private _relayoutRaf: number | null;\n  private _scrollAnimation: CancelablePromise<void> | null;\n  private _isScrolling: boolean;\n  private _sizeUpdateQueue: Map<Key, Size>;\n  private _animatedContentOffset: Point;\n  private _transaction: Transaction<T, V> | null;\n  private _nextTransaction: Transaction<T, V> | null;\n  private _transactionQueue: Transaction<T, V>[];\n\n  constructor(options: VirtualizerOptions<T, V, W> = {}) {\n    this._contentSize = new Size;\n    this._visibleRect = new Rect;\n\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new OverscanManager();\n\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new Point(0, 0);\n\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n\n    // Set options from passed object if given\n    this.transitionDuration = options.transitionDuration ?? 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n    for (let key of ['delegate', 'size', 'layout', 'collection']) {\n      if (options[key]) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n  _setContentSize(size: Size) {\n    this._contentSize = size;\n    this.delegate.setContentSize(size);\n  }\n\n  _setContentOffset(offset: Point) {\n    let rect = new Rect(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n    this.delegate.setVisibleRect(rect);\n  }\n\n  /**\n   * Get the size of the scrollable content.\n   */\n  get contentSize(): Size {\n    return this._contentSize;\n  }\n\n  /**\n   * Get the collection view's currently visible rectangle.\n   */\n  get visibleRect(): Rect {\n    return this._visibleRect;\n  }\n\n  /**\n   * Set the collection view's currently visible rectangle.\n   */\n  set visibleRect(rect: Rect) {\n    this._setVisibleRect(rect);\n  }\n\n  _setVisibleRect(rect: Rect, forceUpdate = false) {\n    let current = this._visibleRect;\n\n    // Ignore if the rects are equal\n    if (rect.equals(current)) {\n      return;\n    }\n\n    if (this.shouldOverscan) {\n      this._overscanManager.setVisibleRect(rect);\n    }\n\n    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n\n    this._resetAnimatedContentOffset();\n    this._visibleRect = rect;\n\n    if (shouldInvalidate) {\n      this.relayout({\n        offsetChanged: !rect.pointEquals(current),\n        sizeChanged: !rect.sizeEquals(current)\n      });\n    } else {\n      this.updateSubviews(forceUpdate);\n    }\n  }\n\n  get collection(): Collection<T> {\n    return this._collection;\n  }\n\n  set collection(data: Collection<T>) {\n    this._setData(data);\n  }\n\n  private _setData(data: Collection<T>) {\n    if (data === this._collection) {\n      return;\n    }\n\n    if (this._collection) {\n      this._runTransaction(() => {\n        this._collection = data;\n      }, this.transitionDuration > 0);\n    } else {\n      this._collection = data;\n      this.reloadData();\n    }\n  }\n\n  /**\n   * Reloads the data from the data source and relayouts the collection view.\n   * Does not animate any changes. Equivalent to re-assigning the same data source\n   * to the collection view.\n   */\n  reloadData() {\n    this.relayout({\n      contentChanged: true\n    });\n  }\n\n  /**\n   * Returns the item with the given key.\n   */\n  getItem(key: Key) {\n    return this._collection ? this._collection.getItem(key) : null;\n  }\n\n  /**\n   * Get the collection view's layout.\n   */\n  get layout(): Layout<T> {\n    return this._layout;\n  }\n\n  /**\n   * Set the collection view's layout.\n   */\n  set layout(layout: Layout<T>) {\n    this.setLayout(layout);\n  }\n\n  /**\n   * Sets the collection view's layout, optionally with an animated transition\n   * from the current layout to the new layout.\n   * @param layout The layout to switch to.\n   * @param animated Whether to animate the layout change.\n   */\n  setLayout(layout: Layout<T>, animated = false) {\n    if (layout === this._layout) {\n      return;\n    }\n\n    let applyLayout = () => {\n      if (this._layout) {\n        // @ts-ignore\n        this._layout.virtualizer = null;\n      }\n\n      layout.virtualizer = this;\n      this._layout = layout;\n    };\n\n    if (animated) {\n      // Animated layout transitions are really simple, thanks to our transaction support.\n      // We just set the layout inside a transaction action, which runs after the initial\n      // layout infos for the animation are retrieved from the previous layout. Then, the\n      // final layout infos are retrieved from the new layout, and animations occur.\n      this._runTransaction(applyLayout);\n    } else {\n      applyLayout();\n      this.relayout();\n    }\n  }\n\n  private _getReuseType(layoutInfo: LayoutInfo, content: T | null) {\n    if (layoutInfo.type === 'item' && content) {\n      let type = this.delegate.getType ? this.delegate.getType(content) : 'item';\n      let reuseType = type === 'item' ? 'item' : layoutInfo.type + '_' + type;\n      return {type, reuseType};\n    }\n\n    return {\n      type: layoutInfo.type,\n      reuseType: layoutInfo.type\n    };\n  }\n\n  getReusableView(layoutInfo: LayoutInfo): ReusableView<T, V> {\n    let content = this.getItem(layoutInfo.key);\n    let {reuseType} = this._getReuseType(layoutInfo, content);\n\n    if (!this._reusableViews[reuseType]) {\n      this._reusableViews[reuseType] = [];\n    }\n\n    let reusable = this._reusableViews[reuseType];\n    let view = reusable.length > 0\n      ? reusable.pop()\n      : new ReusableView<T, V>(this);\n\n    view.viewType = reuseType;\n\n    if (!this._animatedContentOffset.isOrigin()) {\n      layoutInfo = layoutInfo.copy();\n      layoutInfo.rect.x += this._animatedContentOffset.x;\n      layoutInfo.rect.y += this._animatedContentOffset.y;\n    }\n\n    view.layoutInfo = layoutInfo;\n\n    this._renderView(view);\n    return view;\n  }\n\n  private _renderView(reusableView: ReusableView<T, V>) {\n    let {type, key} = reusableView.layoutInfo;\n    reusableView.content = this.getItem(key);\n    reusableView.rendered = this._renderContent(type, reusableView.content);\n  }\n\n  private _renderContent(type: string, content: T) {\n    let cached = this._renderedContent.get(content);\n    if (cached != null) {\n      return cached;\n    }\n\n    let rendered = this.delegate.renderView(type, content);\n    if (content) {\n      this._renderedContent.set(content, rendered);\n    }\n    return rendered;\n  }\n\n  /**\n   * Returns an array of all currently visible views, including both\n   * item views and supplementary views.\n   */\n  get visibleViews(): ReusableView<T, V>[] {\n    return Array.from(this._visibleViews.values());\n  }\n\n  /**\n   * Gets the visible view for the given type and key. Returns null if\n   * the view is not currently visible.\n   *\n   * @param key The key of the view to retrieve.\n   */\n  getView(key: Key): ReusableView<T, V> | null {\n    return this._visibleViews.get(key) || null;\n  }\n\n  /**\n   * Returns an array of visible views matching the given type.\n   * @param type The view type to find.\n   */\n  getViewsOfType(type: string): ReusableView<T, V>[] {\n    return this.visibleViews.filter(v => v.layoutInfo && v.layoutInfo.type === type);\n  }\n\n  /**\n   * Returns the key for the given view. Returns null\n   * if the view is not currently visible.\n   */\n  keyForView(view: ReusableView<T, V>): Key | null {\n    if (view && view.layoutInfo) {\n      return view.layoutInfo.key;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns the key for the item view currently at the given point.\n   */\n  keyAtPoint(point: Point): Key | null {\n    let rect = new Rect(point.x, point.y, 1, 1);\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n\n    let layoutInfo = layoutInfos[0];\n    if (!layoutInfo) {\n      return null;\n    }\n\n    return layoutInfo.key;\n  }\n\n  /**\n   * Cleanup for when the Virtualizer will be unmounted.\n   */\n  willUnmount() {\n    cancelAnimationFrame(this._relayoutRaf);\n  }\n\n  /**\n   * Triggers a layout invalidation, and updates the visible subviews.\n   */\n  relayout(context: InvalidationContext<T, V> = {}) {\n    // Ignore relayouts while animating the scroll position\n    if (this._scrollAnimation || typeof requestAnimationFrame === 'undefined') {\n      return;\n    }\n\n    // If we already scheduled a relayout, extend the invalidation\n    // context so we coalesce multiple relayouts in the same frame.\n    if (this._invalidationContext) {\n      Object.assign(this._invalidationContext, context);\n      return;\n    }\n\n    this._invalidationContext = context;\n    this._relayoutRaf = requestAnimationFrame(() => {\n      this._relayoutRaf = null;\n      this.relayoutNow();\n    });\n  }\n\n  /**\n   * Performs a relayout immediately. Prefer {@link relayout} over this method\n   * where possible, since it coalesces multiple layout passes in the same tick.\n   */\n  relayoutNow(context: InvalidationContext<T, V> = this._invalidationContext || {}) {\n    // Cancel the scheduled relayout, since we're doing it now.\n    if (this._relayoutRaf) {\n      cancelAnimationFrame(this._relayoutRaf);\n      this._relayoutRaf = null;\n      // Update the provided context with the current invalidationContext since we are cancelling\n      // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n      context = {...this._invalidationContext, ...context};\n    }\n\n    // Reset the invalidation context\n    this._invalidationContext = null;\n\n    // Do nothing if we don't have a layout or content, or we are\n    // in the middle of an animated scroll transition.\n    if (!this.layout || !this._collection || this._scrollAnimation) {\n      return;\n    }\n\n    let scrollAnchor = this._getScrollAnchor();\n\n    // Trigger the beforeLayout hook, if provided\n    if (typeof context.beforeLayout === 'function') {\n      context.beforeLayout();\n    }\n\n    // Validate the layout\n    this.layout.validate(context);\n    this._setContentSize(this.layout.getContentSize());\n\n    // Trigger the afterLayout hook, if provided\n    if (typeof context.afterLayout === 'function') {\n      context.afterLayout();\n    }\n\n    // Adjust scroll position based on scroll anchor, and constrain.\n    // If the content changed, scroll to the top.\n    let visibleRect = this.getVisibleRect();\n    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n\n    let hasLayoutUpdates = false;\n    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n      // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n      // Save the difference between the current and new content offsets, and apply it to the\n      // individual content items instead. At the end of the animation, we'll reset and set the\n      // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n      // the scroll animation and the content animation.\n      if (context.animated || !this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n        hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      } else {\n        this._setContentOffset(new Point(contentOffsetX, contentOffsetY));\n      }\n    } else {\n      hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n    }\n\n    // Apply layout infos, unless this is coming from an animated transaction\n    if (!(context.transaction && context.animated)) {\n      this._applyLayoutInfos();\n    }\n\n    // Wait for animations, and apply the afterAnimation hook, if provided\n    if (context.animated && hasLayoutUpdates) {\n      this._enableTransitions();\n\n      let done = () => {\n        this._disableTransitions();\n\n        // Reset scroll position after animations (see above comment).\n        if (!this._animatedContentOffset.isOrigin()) {\n          // Get the content offset to scroll to, taking _animatedContentOffset into account.\n          let {x, y} = this.getVisibleRect();\n          this._resetAnimatedContentOffset();\n          this._setContentOffset(new Point(x, y));\n        }\n\n        if (typeof context.afterAnimation === 'function') {\n          context.afterAnimation();\n        }\n      };\n\n      // Sometimes the animation takes slightly longer than expected.\n      setTimeout(done, this.transitionDuration + 100);\n      return;\n    } else if (typeof context.afterAnimation === 'function') {\n      context.afterAnimation();\n    }\n  }\n\n  /**\n   * Corrects DOM order of visible views to match item order of collection.\n   */\n  private _correctItemOrder() {\n    // Defer until after scrolling and animated transactions are complete\n    if (this._isScrolling || this._transaction) {\n      return;\n    }\n\n    for (let key of this._visibleLayoutInfos.keys()) {\n      let view = this._visibleViews.get(key);\n      this._children.delete(view);\n      this._children.add(view);\n    }\n  }\n\n  private _enableTransitions() {\n    this.delegate.beginAnimations();\n  }\n\n  private _disableTransitions() {\n    this.delegate.endAnimations();\n  }\n\n  private _getScrollAnchor(): ScrollAnchor | null {\n    if (!this.anchorScrollPosition) {\n      return null;\n    }\n\n    let visibleRect = this.getVisibleRect();\n\n    // Ask the delegate to provide a scroll anchor, if possible\n    if (this.delegate.getScrollAnchor) {\n      let key = this.delegate.getScrollAnchor(visibleRect);\n      if (key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(key);\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n        if (corner) {\n          let key = layoutInfo.key;\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          return {key, layoutInfo, corner, offset};\n        }\n      }\n    }\n\n    // No need to anchor the scroll position if it is at the top\n    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) {\n      return null;\n    }\n\n    // Find a view with a visible corner that has the smallest distance to the top of the collection view\n    let cornerAnchor: ScrollAnchor | null = null;\n\n    for (let [key, view] of this._visibleViews) {\n      let layoutInfo = view.layoutInfo;\n      if (layoutInfo && layoutInfo.rect.area > 0) {\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n\n        if (corner) {\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          if (!cornerAnchor || (offset < cornerAnchor.offset)) {\n            cornerAnchor = {key, layoutInfo, corner, offset};\n          }\n        }\n      }\n    }\n\n    return cornerAnchor;\n  }\n\n  private _restoreScrollAnchor(scrollAnchor: ScrollAnchor | null, context: InvalidationContext<T, V>) {\n    let contentOffset = this.getVisibleRect();\n\n    if (scrollAnchor) {\n      let finalAnchor = context.transaction?.animated\n        ? context.transaction.finalMap.get(scrollAnchor.key)\n        : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n\n      if (finalAnchor) {\n        let adjustment = (finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y) - scrollAnchor.offset;\n        contentOffset.y += adjustment;\n      }\n    }\n\n    return contentOffset;\n  }\n\n  getVisibleRect(): Rect {\n    let v = this.visibleRect;\n    let x = v.x - this._animatedContentOffset.x;\n    let y = v.y - this._animatedContentOffset.y;\n    return new Rect(x, y, v.width, v.height);\n  }\n\n  getVisibleLayoutInfos() {\n    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n    return this._visibleLayoutInfos;\n  }\n\n  private _getLayoutInfoMap(rect: Rect, copy = false) {\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n    let map = new Map;\n\n    for (let layoutInfo of layoutInfos) {\n      if (copy) {\n        layoutInfo = layoutInfo.copy();\n      }\n\n      map.set(layoutInfo.key, layoutInfo);\n    }\n\n    return map;\n  }\n\n  updateSubviews(forceUpdate = false) {\n    if (!this._collection) {\n      return;\n    }\n\n    let visibleLayoutInfos = this.getVisibleLayoutInfos();\n    let currentlyVisible = this._visibleViews;\n    let toAdd, toRemove, toUpdate;\n\n    // If this is a force update, remove and re-add all views.\n    // Otherwise, find and update the diff.\n    if (forceUpdate) {\n      toAdd = visibleLayoutInfos;\n      toRemove = currentlyVisible;\n      toUpdate = new Set();\n    } else {\n      ({toAdd, toRemove, toUpdate} = difference(currentlyVisible, visibleLayoutInfos));\n\n      for (let key of toUpdate) {\n        let view = currentlyVisible.get(key);\n        if (!view || !view.layoutInfo) {\n          continue;\n        }\n\n        let item = this.getItem(visibleLayoutInfos.get(key).key);\n        if (view.content === item) {\n          toUpdate.delete(key);\n        } else {\n          // If the view type changes, delete and recreate the view instead of updating\n          let {reuseType} = this._getReuseType(view.layoutInfo, item);\n          if (view.viewType !== reuseType) {\n            toUpdate.delete(key);\n            toAdd.add(key);\n            toRemove.add(key);\n          }\n        }\n      }\n\n      // We are done if the sets are equal\n      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n        if (this._transaction) {\n          this._applyLayoutInfos();\n        }\n\n        return;\n      }\n    }\n\n    // Track views that should be removed. They are not removed from\n    // the DOM immediately, since we may reuse and need to re-insert\n    // them back into the DOM anyway.\n    let removed = new Set<ReusableView<T, V>>();\n\n    for (let key of toRemove.keys()) {\n      let view = this._visibleViews.get(key);\n      if (view) {\n        removed.add(view);\n        this._visibleViews.delete(key);\n\n        // If we are in the middle of a transaction, wait until the end\n        // of the animations to remove the views from the DOM. Also means\n        // we can't reuse those views immediately.\n        if (this._transaction) {\n          this._transaction.toRemove.set(key, view);\n        } else {\n          this.reuseView(view);\n        }\n      }\n    }\n\n    for (let key of toAdd.keys()) {\n      let layoutInfo = visibleLayoutInfos.get(key);\n      let view: ReusableView<T, V> | void;\n\n      // If we're in a transaction, and a layout change happens\n      // during the animations such that a view that was going\n      // to be removed is now not, we don't create a new view\n      // since the old one is still in the DOM, marked as toRemove.\n      if (this._transaction) {\n        // if transaction, get initial layout attributes for the animation\n        if (this._transaction.initialLayoutInfo.has(key)) {\n          layoutInfo = this._transaction.initialLayoutInfo.get(key);\n        }\n\n        view = this._transaction.toRemove.get(key);\n        if (view) {\n          this._transaction.toRemove.delete(key);\n          this._applyLayoutInfo(view, layoutInfo);\n        }\n      }\n\n      if (!view) {\n        // Create or reuse a view for this row\n        view = this.getReusableView(layoutInfo);\n\n        // Add the view to the DOM if needed\n        if (!removed.has(view)) {\n          this._children.add(view);\n        }\n      }\n\n      this._visibleViews.set(key, view);\n      removed.delete(view);\n    }\n\n    for (let key of toUpdate) {\n      let view = currentlyVisible.get(key) as ReusableView<T, V>;\n      this._renderedContent.delete(key);\n      this._renderView(view);\n    }\n\n    // Remove the remaining rows to delete from the DOM\n    if (!this._transaction) {\n      this.removeViews(removed);\n    }\n\n    this._correctItemOrder();\n    this._flushVisibleViews();\n\n    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n    if (hasLayoutUpdates) {\n      requestAnimationFrame(() => {\n        // If we're in a transaction, apply animations to visible views\n        // and \"to be removed\" views, which animate off screen.\n        if (this._transaction) {\n          requestAnimationFrame(() => this._applyLayoutInfos());\n        }\n      });\n    }\n\n    return hasLayoutUpdates;\n  }\n\n  afterRender() {\n    if (this.shouldOverscan) {\n      this._overscanManager.collectMetrics();\n    }\n  }\n\n  private _flushVisibleViews() {\n    // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy\n    // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy\n    // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n    // method to build the final tree.\n    let viewsByParentKey = new Map([[null, []]]);\n    for (let view of this._children) {\n      if (!viewsByParentKey.has(view.layoutInfo.parentKey)) {\n        viewsByParentKey.set(view.layoutInfo.parentKey, []);\n      }\n\n      viewsByParentKey.get(view.layoutInfo.parentKey).push(view);\n      if (!viewsByParentKey.has(view.layoutInfo.key)) {\n        viewsByParentKey.set(view.layoutInfo.key, []);\n      }\n    }\n\n    let buildTree = (parent: ReusableView<T, V>, views: ReusableView<T, V>[]): W[] => views.map(view => {\n      let children = viewsByParentKey.get(view.layoutInfo.key);\n      return this.delegate.renderWrapper(\n        parent,\n        view,\n        children,\n        (childViews) => buildTree(view, childViews)\n      );\n    });\n\n    let children = buildTree(null, viewsByParentKey.get(null));\n    this.delegate.setVisibleViews(children);\n  }\n\n  private _applyLayoutInfo(view: ReusableView<T, V>, layoutInfo: LayoutInfo) {\n    if (view.layoutInfo === layoutInfo) {\n      return false;\n    }\n\n    view.layoutInfo = layoutInfo;\n    return true;\n  }\n\n  private _applyLayoutInfos() {\n    let updated = false;\n\n    // Apply layout infos to visible views\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (cur) {\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    // Apply final layout infos for views that will be removed\n    if (this._transaction) {\n      for (let view of this._transaction.toRemove.values()) {\n        let cur = view.layoutInfo;\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n\n      for (let view of this._transaction.removed.values()) {\n        let cur = view.layoutInfo;\n        let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;\n        layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    if (updated) {\n      this._flushVisibleViews();\n    }\n  }\n\n  private _hasLayoutUpdates() {\n    if (!this._transaction) {\n      return false;\n    }\n\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (!cur) {\n        return true;\n      }\n\n      let layoutInfo = this.layout.getLayoutInfo(cur.key);\n      if (\n        // Uses equals rather than pointEquals so that width/height changes are taken into account\n        !cur.rect.equals(layoutInfo.rect) ||\n        cur.opacity !== layoutInfo.opacity ||\n        cur.transform !== layoutInfo.transform\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  reuseView(view: ReusableView<T, V>) {\n    view.prepareForReuse();\n    this._reusableViews[view.viewType].push(view);\n  }\n\n  removeViews(toRemove: Set<ReusableView<T, V>>) {\n    for (let view of toRemove) {\n      this._children.delete(view);\n    }\n  }\n\n  updateItemSize(key: Key, size: Size) {\n    // TODO: we should be able to invalidate a single index path\n    // @ts-ignore\n    if (!this.layout.updateItemSize) {\n      return;\n    }\n\n    // If the scroll position is currently animating, add the update\n    // to a queue to be processed after the animation is complete.\n    if (this._scrollAnimation) {\n      this._sizeUpdateQueue.set(key, size);\n      return;\n    }\n\n    // @ts-ignore\n    let changed = this.layout.updateItemSize(key, size);\n    if (changed) {\n      this.relayout();\n    }\n  }\n\n  startScrolling() {\n    this._isScrolling = true;\n  }\n\n  endScrolling() {\n    this._isScrolling = false;\n    this._correctItemOrder();\n    this._flushVisibleViews();\n  }\n\n  private _resetAnimatedContentOffset() {\n    // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n    if (!this._animatedContentOffset.isOrigin()) {\n      this._animatedContentOffset = new Point(0, 0);\n      this._applyLayoutInfos();\n    }\n  }\n\n  /**\n   * Scrolls the item with the given key into view, optionally with an animation.\n   * @param key The key of the item to scroll into view.\n   * @param duration The duration of the scroll animation.\n   */\n  scrollToItem(key: Key, options?: ScrollToItemOptions) {\n    // key can be 0, so check if null or undefined\n    if (key == null) {\n      return;\n    }\n\n    let layoutInfo = this.layout.getLayoutInfo(key);\n    if (!layoutInfo) {\n      return;\n    }\n\n    let {\n      duration = 300,\n      shouldScrollX = true,\n      shouldScrollY = true,\n      offsetX = 0,\n      offsetY = 0\n    } = options;\n\n    let x = this.visibleRect.x;\n    let y = this.visibleRect.y;\n    let minX = layoutInfo.rect.x - offsetX;\n    let minY = layoutInfo.rect.y - offsetY;\n    let maxX = x + this.visibleRect.width;\n    let maxY = y + this.visibleRect.height;\n\n    if (shouldScrollX) {\n      if (minX <= x || maxX === 0) {\n        x = minX;\n      } else if (layoutInfo.rect.maxX > maxX) {\n        x += layoutInfo.rect.maxX - maxX;\n      }\n    }\n\n    if (shouldScrollY) {\n      if (minY <= y || maxY === 0) {\n        y = minY;\n      } else if (layoutInfo.rect.maxY > maxY) {\n        y += layoutInfo.rect.maxY - maxY;\n      }\n    }\n\n    return this.scrollTo(new Point(x, y), duration);\n  }\n\n  /**\n   * Performs an animated scroll to the given offset.\n   * @param offset - The offset to scroll to.\n   * @param duration The duration of the animation.\n   * @returns A promise that resolves when the animation is complete.\n   */\n  scrollTo(offset: Point, duration: number = 300): Promise<void> {\n    // Cancel the current scroll animation\n    if (this._scrollAnimation) {\n      this._scrollAnimation.cancel();\n      this._scrollAnimation = null;\n    }\n\n    // Set the content offset synchronously if the duration is zero\n    if (duration <= 0 || this.visibleRect.pointEquals(offset)) {\n      this._setContentOffset(offset);\n      return Promise.resolve();\n    }\n\n    this.startScrolling();\n\n    this._scrollAnimation = tween(this.visibleRect, offset, duration, easeOut, offset => {this._setContentOffset(offset);});\n    this._scrollAnimation.then(() => {\n      this._scrollAnimation = null;\n\n      // Process view size updates that occurred during the animation.\n      // Only views that are still visible will be actually updated.\n      for (let [key, size] of this._sizeUpdateQueue) {\n        this.updateItemSize(key, size);\n      }\n\n      this._sizeUpdateQueue.clear();\n      this.relayout();\n      this._processTransactionQueue();\n      this.endScrolling();\n    });\n\n    return this._scrollAnimation;\n  }\n\n  private _runTransaction(action: () => void, animated?: boolean) {\n    this._startTransaction();\n    if (this._nextTransaction) {\n      this._nextTransaction.actions.push(action);\n    }\n    this._endTransaction(animated);\n  }\n\n  private _startTransaction() {\n    if (!this._nextTransaction) {\n      this._nextTransaction = new Transaction;\n    }\n\n    this._nextTransaction.level++;\n  }\n\n  private _endTransaction(animated?: boolean) {\n    if (!this._nextTransaction) {\n      return false;\n    }\n\n    // Save whether the transaction should be animated.\n    if (animated != null) {\n      this._nextTransaction.animated = animated;\n    }\n\n    // If we haven't reached level 0, we are still in a\n    // nested transaction. Wait for the parent to end.\n    if (--this._nextTransaction.level > 0) {\n      return false;\n    }\n\n    // Do nothing for empty transactions\n    if (this._nextTransaction.actions.length === 0) {\n      this._nextTransaction = null;\n      return false;\n    }\n\n    // Default animations to true\n    if (this._nextTransaction.animated == null) {\n      this._nextTransaction.animated = true;\n    }\n\n    // Enqueue the transaction\n    this._transactionQueue.push(this._nextTransaction);\n    this._nextTransaction = null;\n\n    this._processTransactionQueue();\n    return true;\n  }\n\n  private _processTransactionQueue() {\n    // If the current transaction is animating, wait until the end\n    // to process the next transaction.\n    if (this._transaction || this._scrollAnimation) {\n      return;\n    }\n\n    let next = this._transactionQueue.shift();\n    if (next) {\n      this._performTransaction(next);\n    }\n  }\n\n  private _getContentRect(): Rect {\n    return new Rect(0, 0, this.contentSize.width, this.contentSize.height);\n  }\n\n  private _performTransaction(transaction: Transaction<T, V>) {\n    this._transaction = transaction;\n\n    this.relayoutNow({\n      transaction: transaction,\n      animated: transaction.animated,\n\n      beforeLayout: () => {\n        // Get the initial layout infos for all views before the updates\n        // so we can figure out which views to add and remove.\n        if (transaction.animated) {\n          transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);\n        }\n\n        // Apply the actions that occurred during this transaction\n        for (let action of transaction.actions) {\n          action();\n        }\n      },\n\n      afterLayout: () => {\n        // Get the final layout infos after the updates\n        if (transaction.animated) {\n          transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());\n          this._setupTransactionAnimations(transaction);\n        } else {\n          this._transaction = null;\n        }\n      },\n\n      afterAnimation: () => {\n        // Remove and reuse views when animations are done\n        if (transaction.toRemove.size > 0 || transaction.removed.size > 0) {\n          for (let view of concatIterators(transaction.toRemove.values(), transaction.removed.values())) {\n            this._children.delete(view);\n            this.reuseView(view);\n          }\n        }\n\n        this._transaction = null;\n\n        // Ensure DOM order is correct for accessibility after animations are complete\n        this._correctItemOrder();\n        this._flushVisibleViews();\n\n        this._processTransactionQueue();\n      }\n    });\n  }\n\n  private _setupTransactionAnimations(transaction: Transaction<T, V>) {\n    let {initialMap, finalMap} = transaction;\n\n    // Store initial and final layout infos for animations\n    for (let [key, layoutInfo] of initialMap) {\n      if (finalMap.has(key)) {\n        // Store the initial layout info for use during animations.\n        transaction.initialLayoutInfo.set(key, layoutInfo);\n      } else {\n        // This view was removed. Store the layout info for use\n        // in Layout#getFinalLayoutInfo during animations.\n        transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n      }\n    }\n\n    // Get initial layout infos for views that were added\n    for (let [key, layoutInfo] of finalMap) {\n      if (!initialMap.has(key)) {\n        let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo.copy());\n        transaction.initialLayoutInfo.set(key, initialLayoutInfo);\n      }\n    }\n\n    // Figure out which views were removed.\n    for (let [key, view] of this._visibleViews) {\n      if (!finalMap.has(key)) {\n        transaction.removed.set(key, view);\n        this._visibleViews.delete(key);\n\n        // In case something weird happened, where we have a view but no\n        // initial layout info, use the one attached to the view.\n        if (view.layoutInfo) {\n          if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) {\n            transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n          }\n        }\n      }\n    }\n  }\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\n\n// use high res timer if available\nlet perf = typeof window !== 'undefined' ? window.performance : null;\n// @ts-ignore\nlet perfNow = perf && (perf.now || perf.webkitNow || perf.msNow || perf.mozNow);\nlet getTime = perfNow ? perfNow.bind(perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\n\nlet fixTs: boolean;\n\nexport interface CancelablePromise<T> extends Promise<T> {\n  cancel(): void\n}\n\nexport function tween(begin, end, duration, ease, fn): CancelablePromise<void> {\n  let canceled = false;\n  let raf_id: number;\n\n  let promise = new Promise(resolve => {\n    let start = getTime();\n    let diffX = end.x - begin.x;\n    let diffY = end.y - begin.y;\n\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if (fixTs == null) {\n        fixTs = t > 1e12 !== getTime() > 1e12;\n      }\n\n      if (fixTs) {\n        t = getTime();\n      }\n\n      // check if we're done\n      let delta = t - start;\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        let proceed = fn(new Point(\n          begin.x + diffX * ease(delta / duration),\n          begin.y + diffY * ease(delta / duration)\n        ));\n\n        if (proceed !== false && !canceled) {\n          raf_id = requestAnimationFrame(run);\n        }\n      }\n    });\n  }) as CancelablePromise<void>;\n\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n\n  return promise;\n}\n\n// easing functions\nexport function linearEasing(t) {\n  return t;\n}\n\nexport function easeOut(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport function keyDiff<T>(a: Map<T, any>, b: Map<T, any>): Set<T> {\n  let res = new Set<T>();\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n\n/**\n * Returns the key difference between two maps. Returns a set of\n * keys to add to and remove from a to make it equal to b.\n * @private\n */\nexport function difference<T>(a: Map<T, any>, b: Map<T, any>) {\n  let toRemove = keyDiff(a, b);\n  let toAdd = keyDiff(b, a);\n  let toUpdate = new Set;\n  for (let key of a.keys()) {\n    if (b.has(key)) {\n      toUpdate.add(key);\n    }\n  }\n  return {toRemove, toAdd, toUpdate};\n}\n\n/**\n * Returns an iterator that yields the items in all of the given iterators.\n * @private\n */\nexport function* concatIterators<T>(...iterators: Iterable<T>[]) {\n  for (let iterator of iterators) {\n    yield* iterator;\n  }\n}\n\n/**\n * Inverts the keys and values of an object.\n * @private\n */\nexport function invert(object) {\n  let res = {};\n  for (let key in object) {\n    res[object[key]] = key;\n  }\n\n  return res;\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Rect} from './Rect';\n\nclass RollingAverage {\n  private count: number = 0;\n  value: number = 0;\n  \n  addSample(sample: number) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n}\n\nexport class OverscanManager {\n  private startTime = 0;\n  private averagePerf = new RollingAverage();\n  private averageTime = new RollingAverage();\n  private velocity = new Point(5, 5);\n  private overscanX = new RollingAverage();\n  private overscanY = new RollingAverage();\n  private visibleRect = new Rect();\n  \n  setVisibleRect(rect: Rect) {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averageTime.addSample(time);\n\n      if (rect.x !== this.visibleRect.x && time > 0) {\n        this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      }\n\n      if (rect.y !== this.visibleRect.y && time > 0) {\n        this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n    }\n\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averagePerf.addSample(time);\n    }\n\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanY.addSample(o);\n    }\n\n    if (this.visibleRect.width > 0) {\n      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanX.addSample(o);\n    }\n  }\n\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n\n    return overscanned;\n  }\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {ReusableView} from './ReusableView';\n\ntype LayoutInfoMap = Map<Key, LayoutInfo>;\nexport class Transaction<T extends object, V> {\n  level = 0;\n  actions: (() => void)[] = [];\n  animated = true;\n  initialMap: LayoutInfoMap = new Map();\n  finalMap: LayoutInfoMap = new Map();\n  initialLayoutInfo: LayoutInfoMap = new Map();\n  finalLayoutInfo: LayoutInfoMap = new Map();\n  removed: Map<Key, ReusableView<T, V>> = new Map();\n  toRemove: Map<Key, ReusableView<T, V>> = new Map();\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useMultipleSelectionState';\nexport * from './SelectionManager';\nexport * from './types';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, useMemo, useRef, useState} from 'react';\nimport {MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(props.selectionBehavior || 'toggle');\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (props.selectionBehavior === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  FocusStrategy,\n  Selection as ISelection,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key, childFocusStrategy?: FocusStrategy) {\n    this.state.setFocusedKey(key, childFocusStrategy);\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? !this.state.disabledKeys.has(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (!this.state.disabledKeys.has(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // \u00AF\\_(\u30C4)_/\u00AF\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    this.state.setSelectedKeys(new Selection([key], key, key));\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (!this.state.disabledKeys.has(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusStrategy, LongPressEvent, PressEvent, Selection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport interface FocusState {\n  /** Whether the collection is currently focused. */\n  readonly isFocused: boolean,\n  /** Sets whether the collection is focused. */\n  setFocused(isFocused: boolean): void,\n  /** The current focused key in the collection. */\n  readonly focusedKey: Key,\n  /** Whether the first or last child of the focused key should receive focus. */\n  readonly childFocusStrategy: FocusStrategy,\n  /** Sets the focused key, and optionally, whether the first or last child of that key should receive focus. */\n  setFocusedKey(key: Key, child?: FocusStrategy): void\n}\n\nexport interface SingleSelectionState extends FocusState {\n  /** Whether the collection allows empty selection. */\n  readonly disallowEmptySelection?: boolean,\n  /** The currently selected key in the collection. */\n  readonly selectedKey: Key,\n  /** Sets the selected key in the collection. */\n  setSelectedKey(key: Key): void\n}\n\nexport interface MultipleSelectionState extends FocusState {\n  /** The type of selection that is allowed in the collection. */\n  readonly selectionMode: SelectionMode,\n  /** The selection behavior for the collection. */\n  readonly selectionBehavior: SelectionBehavior,\n  /** Sets the selection behavior for the collection. */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior): void,\n  /** Whether the collection allows empty selection. */\n  readonly disallowEmptySelection: boolean,\n  /** The currently selected keys in the collection. */\n  readonly selectedKeys: Selection,\n  /** Sets the selected keys in the collection. */\n  setSelectedKeys(keys: Selection): void,\n  /** The currently disabled keys in the collection. */\n  readonly disabledKeys: Set<Key>\n}\n\nexport interface MultipleSelectionManager extends FocusState {\n  /** The type of selection that is allowed in the collection. */\n  readonly selectionMode: SelectionMode,\n  /** The selection behavior for the collection. */\n  readonly selectionBehavior: SelectionBehavior,\n  /** Whether the collection allows empty selection. */\n  readonly disallowEmptySelection?: boolean,\n  /** The currently selected keys in the collection. */\n  readonly selectedKeys: Set<Key>,\n  /** Whether the selection is empty. */\n  readonly isEmpty: boolean,\n  /** Whether all items in the collection are selected. */\n  readonly isSelectAll: boolean,\n  /** The first selected key in the collection. */\n  readonly firstSelectedKey: Key | null,\n  /** The last selected key in the collection. */\n  readonly lastSelectedKey: Key | null,\n  /** Returns whether a key is selected. */\n  isSelected(key: Key): boolean,\n  /** Returns whether the current selection is equal to the given selection. */\n  isSelectionEqual(selection: Set<Key>): boolean,\n  /** Extends the selection to the given key. */\n  extendSelection(toKey: Key): void,\n  /** Toggles whether the given key is selected. */\n  toggleSelection(key: Key): void,\n  /** Replaces the selection with only the given key. */\n  replaceSelection(key: Key): void,\n  /** Replaces the selection with the given keys. */\n  setSelectedKeys(keys: Iterable<Key>): void,\n  /** Selects all items in the collection. */\n  selectAll(): void,\n  /** Removes all keys from the selection. */\n  clearSelection(): void,\n  /** Toggles between select all and an empty selection. */\n  toggleSelectAll(): void,\n  /**\n   * Toggles, replaces, or extends selection to the given key depending\n   * on the pointer event and collection's selection mode.\n   */\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent): void,\n  /** Returns whether the given key can be selected. */\n  canSelectItem(key: Key): boolean,\n  /** Sets the selection behavior for the collection. */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior): void\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useGridState';\nexport * from './GridCollection';\n", "import {GridCollection} from '@react-types/grid';\nimport {Key, useEffect, useMemo} from 'react';\nimport {MultipleSelectionStateProps, SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\n\nexport interface GridState<T, C extends GridCollection<T>> {\n  collection: C,\n  /** A set of keys for rows that are disabled. */\n  disabledKeys: Set<Key>,\n  /** A selection manager to read and update row selection state. */\n  selectionManager: SelectionManager\n}\n\ninterface GridStateOptions<T, C extends GridCollection<T>> extends MultipleSelectionStateProps {\n  collection: C,\n  disabledKeys?: Iterable<Key>,\n  focusMode?: 'row' | 'cell'\n}\n\n/**\n * Provides state management for a grid component. Handles row selection and focusing a grid cell's focusable child if applicable.\n */\nexport function useGridState<T extends object, C extends GridCollection<T>>(props: GridStateOptions<T, C>): GridState<T, C> {\n  let {collection, focusMode} = props;\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n      props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n    , [props.disabledKeys]);\n\n  let setFocusedKey = selectionState.setFocusedKey;\n  selectionState.setFocusedKey = (key, child) => {\n    // If focusMode is cell and an item is focused, focus a child cell instead.\n    if (focusMode === 'cell' && key != null) {\n      let item = collection.getItem(key);\n      if (item?.type === 'item') {\n        let children = [...item.childNodes];\n        if (child === 'last') {\n          key = children[children.length - 1]?.key;\n        } else {\n          key = children[0]?.key;\n        }\n      }\n    }\n\n    setFocusedKey(key, child);\n  };\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [collection, selectionState.focusedKey]);\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager: new SelectionManager(collection, selectionState)\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridNode, GridRow, GridCollection as IGridCollection} from '@react-types/grid';\nimport {Key} from 'react';\n\n\ninterface GridCollectionOptions<T> {\n  columnCount: number,\n  items: GridRow<T>[],\n  visitNode?: (cell: GridNode<T>) => GridNode<T>\n}\n\nexport class GridCollection<T> implements IGridCollection<T> {\n  keyMap: Map<Key, GridNode<T>> = new Map();\n  columnCount: number;\n  rows: GridNode<T>[];\n\n  constructor(opts?: GridCollectionOptions<T>) {\n    this.keyMap = new Map();\n    this.columnCount = opts?.columnCount;\n    this.rows = [];\n\n    let visit = (node: GridNode<T>) => {\n      // If the node is the same object as the previous node for the same key,\n      // we can skip this node and its children. We always visit columns though,\n      // because we depend on order to build the columns array.\n      let prevNode = this.keyMap.get(node.key);\n      if (opts.visitNode) {\n        node = opts.visitNode(node);\n      }\n\n      this.keyMap.set(node.key, node);\n\n      let childKeys = new Set();\n      let last: GridNode<T>;\n      for (let child of node.childNodes) {\n        if (child.type === 'cell' && child.parentKey == null) {\n          // if child is a cell parent key isn't already established by the collection, match child node to parent row\n          child.parentKey = node.key;\n        }\n        childKeys.add(child.key);\n\n        if (last) {\n          last.nextKey = child.key;\n          child.prevKey = last.key;\n        } else {\n          child.prevKey = null;\n        }\n\n        visit(child);\n        last = child;\n      }\n\n      if (last) {\n        last.nextKey = null;\n      }\n\n      // Remove deleted nodes and their children from the key map\n      if (prevNode) {\n        for (let child of prevNode.childNodes) {\n          if (!childKeys.has(child.key)) {\n            remove(child);\n          }\n        }\n      }\n    };\n\n    let remove = (node: GridNode<T>) => {\n      this.keyMap.delete(node.key);\n      for (let child of node.childNodes) {\n        if (this.keyMap.get(child.key) === child) {\n          remove(child);\n        }\n      }\n    };\n\n    let last: GridNode<T>;\n    opts.items.forEach((node, i) => {\n      let rowNode = {\n        level: 0,\n        key: 'row-' + i,\n        type: 'row',\n        value: undefined,\n        hasChildNodes: true,\n        childNodes: [...node.childNodes],\n        rendered: undefined,\n        textValue: undefined,\n        ...node,\n        index: i\n      } as GridNode<T>;\n\n      if (last) {\n        last.nextKey = rowNode.key;\n        rowNode.prevKey = last.key;\n      } else {\n        rowNode.prevKey = null;\n      }\n\n      this.rows.push(rowNode);\n      visit(rowNode);\n\n      last = rowNode;\n    });\n\n    if (last) {\n      last.nextKey = null;\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* [...this.rows];\n  }\n\n  get size() {\n    return [...this.rows].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.rows][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.rows];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useDialog';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaDialogProps} from '@react-types/dialog';\nimport {filterDOMProps, useSlotId} from '@react-aria/utils';\nimport {focusSafely} from '@react-aria/focus';\nimport {HTMLAttributes, RefObject, useEffect} from 'react';\n\ninterface DialogAria {\n  /** Props for the dialog container element. */\n  dialogProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the dialog title element. */\n  titleProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\nexport function useDialog(props: AriaDialogProps, ref: RefObject<HTMLElement>): DialogAria {\n  let {role = 'dialog'} = props;\n  let titleId = useSlotId();\n  titleId = props['aria-label'] ? undefined : titleId;\n\n  // Focus the dialog itself on mount, unless a child element is already focused.\n  useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n\n      // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n      let timeout = setTimeout(() => {\n        if (document.activeElement === ref.current) {\n          ref.current.blur();\n          focusSafely(ref.current);\n        }\n      }, 500);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]);\n\n  // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused\n  // on mount when inside an iframe, no matter which element we programmatically focus.\n  // See https://bugs.webkit.org/show_bug.cgi?id=211934.\n  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal\n  // even without aria-modal on the dialog itself.\n  return {\n    dialogProps: {\n      ...filterDOMProps(props, {labelable: true}),\n      role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId\n    },\n    titleProps: {\n      id: titleId\n    }\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useOverlayTriggerState';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {OverlayTriggerProps} from '@react-types/overlays';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface OverlayTriggerState {\n  /** Whether the overlay is currently open. */\n  readonly isOpen: boolean,\n  /** Opens the overlay. */\n  open(): void,\n  /** Closes the overlay. */\n  close(): void,\n  /** Toggles the overlay's visibility. */\n  toggle(): void\n}\n\n/**\n * Manages state for an overlay trigger. Tracks whether the overlay is open, and provides\n * methods to toggle this state.\n */\nexport function useOverlayTriggerState(props: OverlayTriggerProps): OverlayTriggerState  {\n  let [isOpen, setOpen] = useControlledState(props.isOpen, props.defaultOpen || false, props.onOpenChange);\n\n  return {\n    isOpen,\n    open() {\n      setOpen(true);\n    },\n    close() {\n      setOpen(false);\n    },\n    toggle() {\n      setOpen(!isOpen);\n    }\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useToggle';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToggleProps} from '@react-types/checkbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {InputHTMLAttributes, RefObject} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface ToggleAria {\n  /**\n   * Props to be spread on the input element.\n   */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Handles interactions for toggle elements, e.g. Checkboxes and Switches.\n */\nexport function useToggle(props: AriaToggleProps, state: ToggleState, ref: RefObject<HTMLElement>): ToggleAria {\n  let {\n    isDisabled = false,\n    isRequired,\n    isReadOnly,\n    value,\n    name,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid'\n  } = props;\n\n  let onChange = (e) => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  // This handles focusing the input on pointer down, which Safari does not do by default.\n  let {pressProps} = usePress({\n    isDisabled\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  return {\n    inputProps: mergeProps(domProps, {\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      onChange,\n      disabled: isDisabled,\n      value,\n      name,\n      type: 'checkbox',\n      ...interactions\n    })\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useSelectableCollection';\nexport * from './useSelectableItem';\nexport * from './useSelectableList';\nexport * from './ListKeyboardDelegate';\nexport * from './useTypeSelect';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent, HTMLAttributes, Key, KeyboardEvent, RefObject, useEffect, useRef} from 'react';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {FocusStrategy, KeyboardDelegate} from '@react-types/shared';\nimport {focusWithoutScrolling, mergeProps, scrollIntoView, useEvent} from '@react-aria/utils';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\ninterface SelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean,\n  /**\n   * Whether the collection items are contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * The ref attached to the scrollable body. Used to provide automatic scrolling on item focus for non-virtualized collections.\n   * If not provided, defaults to the collection ref.\n   */\n  scrollRef?: RefObject<HTMLElement>\n}\n\ninterface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: SelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref\n  } = options;\n  let {direction} = useLocale();\n\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: HTMLElement;\n            let last: HTMLElement;\n            do {\n              last = walker.lastChild() as HTMLElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // Store the scroll position so we can restore it later.\n  let scrollPos = useRef({top: 0, left: 0});\n  useEvent(scrollRef, 'scroll', isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = (key: Key | undefined) => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) {\n            manager.replaceSelection(key);\n          }\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        navigateToFirstKey(manager.lastSelectedKey ?? delegate.getLastKey());\n      } else {\n        navigateToFirstKey(manager.firstSelectedKey ?? delegate.getFirstKey());\n      }\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection\n        focusWithoutScrolling(element);\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  const autoFocusRef = useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) {\n        focusSafely(ref.current);\n      }\n    }\n    autoFocusRef.current = false;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && manager.focusedKey && scrollRef?.current) {\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey]);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (e.currentTarget.contains(e.target)) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex\n    }\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isAppleDevice} from '@react-aria/utils';\nimport {isMac} from '@react-aria/utils';\n\ninterface Event {\n  altKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean\n}\n\nexport function isNonContiguousSelectionModifier(e: Event) {\n  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.\n  // On Windows and Ubuntu, Alt + Space has a system wide meaning.\n  return isAppleDevice() ? e.altKey : e.ctrlKey;\n}\n\nexport function isCtrlKeyPressed(e: Event) {\n  if (isMac()) {\n    return e.metaKey;\n  }\n\n  return e.ctrlKey;\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, Key, KeyboardEvent, useRef} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {MultipleSelectionManager} from '@react-stately/selection';\n\ninterface TypeSelectOptions {\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * Called when an item is focused by typing.\n   */\n  onTypeSelect?: (key: Key) => void\n}\n\ninterface TypeSelectAria {\n  /**\n   * Props to be spread on the owner of the options.\n   */\n  typeSelectProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles typeahead interactions with collections.\n */\nexport function useTypeSelect(options: TypeSelectOptions): TypeSelectAria {\n  let {keyboardDelegate, selectionManager, onTypeSelect} = options;\n  let state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    let character = getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) {\n      return;\n    }\n\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) {\n        e.stopPropagation();\n      }\n    }\n\n    state.search += character;\n\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    // If no key found, search from the top.\n    if (key == null) {\n      key = keyboardDelegate.getKeyForSearch(state.search);\n    }\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, 500);\n  };\n\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction getStringForKey(key: string) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {focusSafely} from '@react-aria/focus';\nimport {HTMLAttributes, Key, RefObject, useEffect, useRef} from 'react';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {LongPressEvent, PressEvent} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {PressProps, useLongPress, usePress} from '@react-aria/interactions';\n\ninterface SelectableItemOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A unique key for the item.\n   */\n  key: Key,\n  /**\n   * Ref to the item.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * By default, selection occurs on pointer down. This can be strange if selecting an\n   * item causes the UI to disappear immediately (e.g. menus).\n   */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Whether selection requires the pointer/mouse down and up events to occur on the same target or triggers selection on\n   * the target of the pointer/mouse up event.\n   */\n  allowsDifferentPressOrigin?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Function to focus the item.\n   */\n  focus?: () => void,\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /** Whether the item is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the cell. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void\n}\n\ninterface SelectableItemAria {\n  /**\n   * Props to be spread on the item root node.\n   */\n  itemProps: HTMLAttributes<HTMLElement>,\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean\n}\n\n/**\n * Handles interactions with an item in a selectable collection.\n */\nexport function useSelectableItem(options: SelectableItemOptions): SelectableItemAria {\n  let {\n    selectionManager: manager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    focus,\n    isDisabled,\n    onAction,\n    allowsDifferentPressOrigin\n  } = options;\n\n  let onSelect = (e: PressEvent | LongPressEvent | PointerEvent) => {\n    if (e.pointerType === 'keyboard' && isNonContiguousSelectionModifier(e)) {\n      manager.toggleSelection(key);\n    } else {\n      if (manager.selectionMode === 'none') {\n        return;\n      }\n\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) {\n          manager.toggleSelection(key);\n        } else {\n          manager.replaceSelection(key);\n        }\n      } else if (e && e.shiftKey) {\n        manager.extendSelection(key);\n      } else if (manager.selectionBehavior === 'toggle' || (e && (isCtrlKeyPressed(e) || e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);\n      } else {\n        manager.replaceSelection(key);\n      }\n    }\n  };\n\n  // Focus the associated DOM node when this item becomes the focusedKey\n  let isFocused = key === manager.focusedKey;\n  useEffect(() => {\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) {\n        focus();\n      } else {\n        focusSafely(ref.current);\n      }\n    }\n  }, [ref, isFocused, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps: SelectableItemAria['itemProps'] = {};\n  if (!shouldUseVirtualFocus) {\n    itemProps = {\n      tabIndex: isFocused ? 0 : -1,\n      onFocus(e) {\n        if (e.target === ref.current) {\n          manager.setFocusedKey(key);\n        }\n      }\n    };\n  }\n\n  let modality = useRef(null);\n  let hasPrimaryAction = onAction && manager.selectionMode === 'none';\n  let hasSecondaryAction = onAction && manager.selectionMode !== 'none' && manager.selectionBehavior === 'replace';\n  let allowsSelection = !isDisabled && manager.canSelectItem(key);\n\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps: PressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      if (e.pointerType === 'keyboard') {\n        onSelect(e);\n      }\n    };\n\n    // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)\n    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)\n    if (!allowsDifferentPressOrigin) {\n      itemPressProps.onPress = (e) => {\n        if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n\n        if (hasPrimaryAction) {\n          onAction();\n        }\n      };\n    } else {\n      itemPressProps.onPressUp = (e) => {\n        if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n      };\n\n      itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;\n    }\n  } else {\n    // On touch, it feels strange to select on touch down, so we special case this.\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      if (e.pointerType !== 'touch' && e.pointerType !== 'virtual') {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPress = (e) => {\n      if (e.pointerType === 'touch' || e.pointerType === 'virtual' || hasPrimaryAction) {\n        // Single tap on touch with selectionBehavior = 'replace' performs an action, i.e. navigation.\n        // Also perform action on press up when selectionMode = 'none'.\n        if (hasPrimaryAction || hasSecondaryAction) {\n          onAction();\n        } else {\n          onSelect(e);\n        }\n      }\n    };\n  }\n\n  if (!isVirtualized) {\n    itemProps['data-key'] = key;\n  }\n\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {pressProps, isPressed} = usePress(itemPressProps);\n\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? (e) => {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  // TODO: what about when drag and drop is also enabled??\n  let {longPressProps} = useLongPress({\n    isDisabled: !hasSecondaryAction,\n    onLongPress(e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n        manager.setSelectionBehavior('toggle');\n      }\n    }\n  });\n\n  // Pressing the Enter key with selectionBehavior = 'replace' performs an action (i.e. navigation).\n  let onKeyUp = hasSecondaryAction ? (e: KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      onAction();\n    }\n  } : undefined;\n\n  return {\n    itemProps: mergeProps(\n      itemProps,\n      allowsSelection || hasPrimaryAction ? pressProps : {},\n      hasSecondaryAction ? longPressProps : {},\n      {onKeyUp, onDoubleClick}\n    ),\n    isPressed\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, FocusStrategy, KeyboardDelegate, Node} from '@react-types/shared';\nimport {HTMLAttributes, Key, RefObject, useMemo} from 'react';\nimport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useCollator} from '@react-aria/i18n';\nimport {useSelectableCollection} from './useSelectableCollection';\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>,\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n   */\n  disabledKeys: Set<Key>,\n  /**\n   * A ref to the item.\n   */\n  ref?: RefObject<HTMLElement>,\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(props: SelectableListOptions): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let delegate = useMemo(() => keyboardDelegate || new ListKeyboardDelegate(collection, disabledKeys, ref, collator), [keyboardDelegate, collection, disabledKeys, ref, collator]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n    isVirtualized,\n    scrollRef: ref\n  });\n\n  return {\n    listProps: collectionProps\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject} from 'react';\n\nexport class ListKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<Node<T>>;\n  private disabledKeys: Set<Key>;\n  private ref: RefObject<HTMLElement>;\n  private collator: Intl.Collator;\n\n  constructor(collection: Collection<Node<T>>, disabledKeys: Set<Key>, ref: RefObject<HTMLElement>, collator?: Intl.Collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n  getKeyBelow(key: Key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  getKeyPageAbove(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './GridKeyboardDelegate';\nexport * from './useGrid';\nexport * from './useGridRowGroup';\nexport * from './useGridRow';\nexport * from './useGridCell';\nexport * from './useGridSelectionCheckbox';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Direction, KeyboardDelegate, Node} from '@react-types/shared';\nimport {GridCollection} from '@react-types/grid';\nimport {Key, RefObject} from 'react';\nimport {Layout, Rect} from '@react-stately/virtualizer';\n\nexport interface GridKeyboardDelegateOptions<T, C> {\n  collection: C,\n  disabledKeys: Set<Key>,\n  ref?: RefObject<HTMLElement>,\n  direction: Direction,\n  collator?: Intl.Collator,\n  layout?: Layout<Node<T>>,\n  focusMode?: 'row' | 'cell'\n}\n\nexport class GridKeyboardDelegate<T, C extends GridCollection<T>> implements KeyboardDelegate {\n  collection: C;\n  protected disabledKeys: Set<Key>;\n  protected ref: RefObject<HTMLElement>;\n  protected direction: Direction;\n  protected collator: Intl.Collator;\n  protected layout: Layout<Node<T>>;\n  protected focusMode;\n\n  constructor(options: GridKeyboardDelegateOptions<T, C>) {\n    this.collection = options.collection;\n    this.disabledKeys = options.disabledKeys;\n    this.ref = options.ref;\n    this.direction = options.direction;\n    this.collator = options.collator;\n    this.layout = options.layout;\n    this.focusMode = options.focusMode || 'row';\n  }\n\n  protected isCell(node: Node<T>) {\n    return node.type === 'cell';\n  }\n\n  protected isRow(node: Node<T>) {\n    return node.type === 'row' || node.type === 'item';\n  }\n\n  protected findPreviousKey(fromKey?: Key, pred?: (item: Node<T>) => boolean) {\n    let key = fromKey != null\n      ? this.collection.getKeyBefore(fromKey)\n      : this.collection.getLastKey();\n\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (!pred || pred(item)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  protected findNextKey(fromKey?: Key, pred?: (item: Node<T>) => boolean) {\n    let key = fromKey != null\n      ? this.collection.getKeyAfter(fromKey)\n      : this.collection.getFirstKey();\n\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (!pred || pred(item)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyBelow(key: Key) {\n    let startItem = this.collection.getItem(key);\n    if (!startItem) {\n      return;\n    }\n\n    // If focus was on a cell, start searching from the parent row\n    if (this.isCell(startItem)) {\n      key = startItem.parentKey;\n    }\n\n    // Find the next item\n    key = this.findNextKey(key);\n    if (key != null) {\n      // If focus was on a cell, focus the cell with the same index in the next row.\n      if (this.isCell(startItem)) {\n        let item = this.collection.getItem(key);\n        return [...item.childNodes][startItem.index].key;\n      }\n\n      // Otherwise, focus the next row\n      if (this.focusMode === 'row') {\n        return key;\n      }\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    let startItem = this.collection.getItem(key);\n    if (!startItem) {\n      return;\n    }\n\n    // If focus is on a cell, start searching from the parent row\n    if (this.isCell(startItem)) {\n      key = startItem.parentKey;\n    }\n\n    // Find the previous item\n    key = this.findPreviousKey(key);\n    if (key != null) {\n      // If focus was on a cell, focus the cell with the same index in the previous row.\n      if (this.isCell(startItem)) {\n        let item = this.collection.getItem(key);\n        return [...item.childNodes][startItem.index].key;\n      }\n\n      // Otherwise, focus the previous row\n      if (this.focusMode === 'row') {\n        return key;\n      }\n    }\n  }\n\n  getKeyRightOf(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      return;\n    }\n\n    // If focus is on a row, focus the first child cell.\n    if (this.isRow(item)) {\n      let children = [...item.childNodes];\n      return this.direction === 'rtl'\n        ? children[children.length - 1].key\n        : children[0].key;\n    }\n\n    // If focus is on a cell, focus the next cell if any,\n    // otherwise focus the parent row.\n    if (this.isCell(item)) {\n      let parent = this.collection.getItem(item.parentKey);\n      let children = [...parent.childNodes];\n      let next = this.direction === 'rtl'\n        ? children[item.index - 1]\n        : children[item.index + 1];\n\n      if (next) {\n        return next.key;\n      }\n\n      // focus row only if focusMode is set to row\n      if (this.focusMode === 'row') {\n        return item.parentKey;\n      }\n\n      return this.direction === 'rtl' ? this.getFirstKey(key) : this.getLastKey(key);\n    }\n  }\n\n  getKeyLeftOf(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      return;\n    }\n\n    // If focus is on a row, focus the last child cell.\n    if (this.isRow(item)) {\n      let children = [...item.childNodes];\n      return this.direction === 'rtl'\n        ? children[0].key\n        : children[children.length - 1].key;\n    }\n\n    // If focus is on a cell, focus the previous cell if any,\n    // otherwise focus the parent row.\n    if (this.isCell(item)) {\n      let parent = this.collection.getItem(item.parentKey);\n      let children = [...parent.childNodes];\n      let prev = this.direction === 'rtl'\n        ? children[item.index + 1]\n        : children[item.index - 1];\n\n      if (prev) {\n        return prev.key;\n      }\n\n      // focus row only if focusMode is set to row\n      if (this.focusMode === 'row') {\n        return item.parentKey;\n      }\n\n      return this.direction === 'rtl' ? this.getLastKey(key) : this.getFirstKey(key);\n    }\n  }\n\n  getFirstKey(key?: Key, global?: boolean) {\n    let item: Node<T>;\n    if (key != null) {\n      item = this.collection.getItem(key);\n      if (!item) {\n        return;\n      }\n\n      // If global flag is not set, and a cell is currently focused,\n      // move focus to the first cell in the parent row.\n      if (this.isCell(item) && !global) {\n        let parent = this.collection.getItem(item.parentKey);\n        return [...parent.childNodes][0].key;\n      }\n    }\n\n    // Find the first row\n    key = this.findNextKey();\n\n    // If global flag is set (or if focus mode is cell), focus the first cell in the first row.\n    if ((key != null && item && this.isCell(item) && global) || this.focusMode === 'cell') {\n      let item = this.collection.getItem(key);\n      key = [...item.childNodes][0].key;\n    }\n\n    // Otherwise, focus the row itself.\n    return key;\n  }\n\n  getLastKey(key?: Key, global?: boolean) {\n    let item: Node<T>;\n    if (key != null) {\n      item = this.collection.getItem(key);\n      if (!item) {\n        return;\n      }\n\n      // If global flag is not set, and a cell is currently focused,\n      // move focus to the last cell in the parent row.\n      if (this.isCell(item) && !global) {\n        let parent = this.collection.getItem(item.parentKey);\n        let children = [...parent.childNodes];\n        return children[children.length - 1].key;\n      }\n    }\n\n    // Find the last row\n    key = this.findPreviousKey();\n\n    // If global flag is set (or if focus mode is cell), focus the last cell in the last row.\n    if ((key != null && item && this.isCell(item) && global) || this.focusMode === 'cell') {\n      let item = this.collection.getItem(key);\n      let children = [...item.childNodes];\n      key = children[children.length - 1].key;\n    }\n\n    // Otherwise, focus the row itself.\n    return key;\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  private getItemRect(key: Key): Rect {\n    if (this.layout) {\n      return this.layout.getLayoutInfo(key)?.rect;\n    }\n\n    let item = this.getItem(key);\n    if (item) {\n      return new Rect(item.offsetLeft, item.offsetTop, item.offsetWidth, item.offsetHeight);\n    }\n  }\n\n  private getPageHeight(): number {\n    if (this.layout) {\n      return this.layout.virtualizer?.visibleRect.height;\n    }\n\n    return this.ref?.current?.offsetHeight;\n  }\n\n  private getContentHeight(): number {\n    if (this.layout) {\n      return this.layout.getContentSize().height;\n    }\n\n    return this.ref?.current?.scrollHeight;\n  }\n\n  getKeyPageAbove(key: Key) {\n    let itemRect = this.getItemRect(key);\n    if (!itemRect) {\n      return null;\n    }\n\n    let pageY = Math.max(0, itemRect.maxY - this.getPageHeight());\n\n    while (itemRect && itemRect.y > pageY) {\n      key = this.getKeyAbove(key);\n      itemRect = this.getItemRect(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key: Key) {\n    let itemRect = this.getItemRect(key);\n\n    if (!itemRect) {\n      return null;\n    }\n\n    let pageHeight = this.getPageHeight();\n    let pageY = Math.min(this.getContentHeight(), itemRect.y + pageHeight);\n\n    while (itemRect && itemRect.maxY < pageY) {\n      let nextKey = this.getKeyBelow(key);\n      itemRect = this.getItemRect(nextKey);\n\n      // Guard against case where maxY of the last key is barely less than pageY due to rounding\n      // and thus it attempts to set key to null\n      if (nextKey != null) {\n        key = nextKey;\n      }\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey ?? this.getFirstKey();\n\n    // If the starting key is a cell, search from its parent row.\n    let startItem = collection.getItem(key);\n    if (startItem.type === 'cell') {\n      key = startItem.parentKey;\n    }\n\n    let hasWrapped = false;\n    while (key != null) {\n      let item = collection.getItem(key);\n\n      // check row text value for match\n      if (item.textValue) {\n        let substring = item.textValue.slice(0, search.length);\n        if (this.collator.compare(substring, search) === 0) {\n          if (this.isRow(item) && this.focusMode === 'cell') {\n            return [...item.childNodes][0].key;\n          }\n\n          return item.key;\n        }\n      }\n\n      key = this.findNextKey(key);\n\n      // Wrap around when reaching the end of the collection\n      if (key == null && !hasWrapped) {\n        key = this.getFirstKey();\n        hasWrapped = true;\n      }\n    }\n\n    return null;\n  }\n}\n\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {announce} from '@react-aria/live-announcer';\nimport {AriaLabelingProps, DOMProps, KeyboardDelegate, Selection} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useId, useUpdateEffect} from '@react-aria/utils';\nimport {GridCollection} from '@react-types/grid';\nimport {GridKeyboardDelegate} from './GridKeyboardDelegate';\nimport {gridMap} from './utils';\nimport {GridState} from '@react-stately/grid';\nimport {HTMLAttributes, Key, RefObject, useMemo, useRef} from 'react';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {useCollator, useLocale, useMessageFormatter} from '@react-aria/i18n';\nimport {useHighlightSelectionDescription} from './useHighlightSelectionDescription';\nimport {useSelectableCollection} from '@react-aria/selection';\n\nexport interface GridProps extends DOMProps, AriaLabelingProps {\n  /** Whether the grid uses virtual scrolling. */\n  isVirtualized?: boolean,\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether initial grid focus should be placed on the grid row or grid cell.\n   * @default 'row'\n   */\n  focusMode?: 'row' | 'cell',\n  /**\n   * A function that returns the text that should be announced by assistive technology when a row is added or removed from selection.\n   * @default (key) => state.collection.getItem(key)?.textValue\n   */\n  getRowText?: (key: Key) => string,\n  /**\n   * The ref attached to the scrollable body. Used to provided automatic scrolling on item focus for non-virtualized grids.\n   */\n  scrollRef?: RefObject<HTMLElement>,\n  /** Handler that is called when a user performs an action on the row. */\n  onRowAction?: (key: Key) => void,\n  /** Handler that is called when a user performs an action on the cell. */\n  onCellAction?: (key: Key) => void\n}\n\nexport interface GridAria {\n  /** Props for the grid element. */\n  gridProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a grid component.\n * A grid displays data in one or more rows and columns and enables a user to navigate its contents via directional navigation keys.\n * @param props - Props for the grid.\n * @param state - State for the grid, as returned by `useGridState`.\n * @param ref - The ref attached to the grid element.\n */\nexport function useGrid<T>(props: GridProps, state: GridState<T, GridCollection<T>>, ref: RefObject<HTMLElement>): GridAria {\n  let {\n    isVirtualized,\n    keyboardDelegate,\n    focusMode,\n    getRowText = (key) => state.collection.getItem(key)?.textValue,\n    scrollRef,\n    onRowAction,\n    onCellAction\n  } = props;\n  let formatMessage = useMessageFormatter(intlMessages);\n\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let {direction} = useLocale();\n  let delegate = useMemo(() => keyboardDelegate || new GridKeyboardDelegate({\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    ref,\n    direction,\n    collator,\n    focusMode\n  }), [keyboardDelegate, state.collection, state.disabledKeys, ref, direction, collator, focusMode]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager: state.selectionManager,\n    keyboardDelegate: delegate,\n    isVirtualized,\n    scrollRef\n  });\n\n  let id = useId();\n  gridMap.set(state, {keyboardDelegate: delegate, actions: {onRowAction, onCellAction}});\n\n  let descriptionProps = useHighlightSelectionDescription({\n    selectionManager: state.selectionManager,\n    hasItemActions: !!(onRowAction || onCellAction)\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let gridProps: HTMLAttributes<HTMLElement> = mergeProps(\n    domProps,\n    {\n      role: 'grid',\n      id,\n      'aria-multiselectable': state.selectionManager.selectionMode === 'multiple' ? 'true' : undefined\n    },\n    collectionProps,\n    descriptionProps\n  );\n\n  if (isVirtualized) {\n    gridProps['aria-rowcount'] = state.collection.size;\n    gridProps['aria-colcount'] = state.collection.columnCount;\n  }\n\n  // Many screen readers do not announce when items in a grid are selected/deselected.\n  // We do this using an ARIA live region.\n  let selection = state.selectionManager.rawSelection;\n  let lastSelection = useRef(selection);\n  useUpdateEffect(() => {\n    if (!state.selectionManager.isFocused) {\n      lastSelection.current = selection;\n\n      return;\n    }\n\n    let addedKeys = diffSelection(selection, lastSelection.current);\n    let removedKeys = diffSelection(lastSelection.current, selection);\n\n    // If adding or removing a single row from the selection, announce the name of that item.\n    let isReplace = state.selectionManager.selectionBehavior === 'replace';\n    let messages = [];\n\n    if ((state.selectionManager.selectedKeys.size === 1 && isReplace)) {\n      if (state.collection.getItem(state.selectionManager.selectedKeys.keys().next().value)) {\n        let currentSelectionText = getRowText(state.selectionManager.selectedKeys.keys().next().value);\n        if (currentSelectionText) {\n          messages.push(formatMessage('selectedItem', {item: currentSelectionText}));\n        }\n      }\n    } else if (addedKeys.size === 1 && removedKeys.size === 0) {\n      let addedText = getRowText(addedKeys.keys().next().value);\n      if (addedText) {\n        messages.push(formatMessage('selectedItem', {item: addedText}));\n      }\n    } else if (removedKeys.size === 1 && addedKeys.size === 0) {\n      if (state.collection.getItem(removedKeys.keys().next().value)) {\n        let removedText = getRowText(removedKeys.keys().next().value);\n        if (removedText) {\n          messages.push(formatMessage('deselectedItem', {item: removedText}));\n        }\n      }\n    }\n\n    // Announce how many items are selected, except when selecting the first item.\n    if (state.selectionManager.selectionMode === 'multiple') {\n      if (messages.length === 0 || selection === 'all' || selection.size > 1 || lastSelection.current === 'all' || lastSelection.current?.size > 1) {\n        messages.push(selection === 'all'\n          ? formatMessage('selectedAll')\n          : formatMessage('selectedCount', {count: selection.size})\n        );\n      }\n    }\n\n    if (messages.length > 0) {\n      announce(messages.join(' '));\n    }\n\n    lastSelection.current = selection;\n  }, [selection]);\n\n  return {\n    gridProps\n  };\n}\n\nfunction diffSelection(a: Selection, b: Selection): Set<Key> {\n  let res = new Set<Key>();\n  if (a === 'all' || b === 'all') {\n    return res;\n  }\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {GridCollection} from '@react-types/grid';\nimport type {GridState} from '@react-stately/grid';\nimport {Key} from 'react';\nimport type {KeyboardDelegate} from '@react-types/shared';\n\ninterface GridMapShared {\n  keyboardDelegate: KeyboardDelegate,\n  actions: {\n    onRowAction: (key: Key) => void,\n    onCellAction: (key: Key) => void\n  }\n}\n\n// Used to share:\n// keyboard delegate between useGrid and useGridCell\n// onRowAction/onCellAction across hooks\nexport const gridMap = new WeakMap<GridState<unknown, GridCollection<unknown>>, GridMapShared>();\n", "const _temp0 = require(\"./ar-AE.json\");\nconst _temp1 = require(\"./bg-BG.json\");\nconst _temp2 = require(\"./cs-CZ.json\");\nconst _temp3 = require(\"./da-DK.json\");\nconst _temp4 = require(\"./de-DE.json\");\nconst _temp5 = require(\"./el-GR.json\");\nconst _temp6 = require(\"./en-US.json\");\nconst _temp7 = require(\"./es-ES.json\");\nconst _temp8 = require(\"./et-EE.json\");\nconst _temp9 = require(\"./fi-FI.json\");\nconst _temp10 = require(\"./fr-FR.json\");\nconst _temp11 = require(\"./he-IL.json\");\nconst _temp12 = require(\"./hr-HR.json\");\nconst _temp13 = require(\"./hu-HU.json\");\nconst _temp14 = require(\"./it-IT.json\");\nconst _temp15 = require(\"./ja-JP.json\");\nconst _temp16 = require(\"./ko-KR.json\");\nconst _temp17 = require(\"./lt-LT.json\");\nconst _temp18 = require(\"./lv-LV.json\");\nconst _temp19 = require(\"./nb-NO.json\");\nconst _temp20 = require(\"./nl-NL.json\");\nconst _temp21 = require(\"./pl-PL.json\");\nconst _temp22 = require(\"./pt-BR.json\");\nconst _temp23 = require(\"./pt-PT.json\");\nconst _temp24 = require(\"./ro-RO.json\");\nconst _temp25 = require(\"./ru-RU.json\");\nconst _temp26 = require(\"./sk-SK.json\");\nconst _temp27 = require(\"./sl-SI.json\");\nconst _temp28 = require(\"./sr-SP.json\");\nconst _temp29 = require(\"./sv-SE.json\");\nconst _temp30 = require(\"./tr-TR.json\");\nconst _temp31 = require(\"./uk-UA.json\");\nconst _temp32 = require(\"./zh-CN.json\");\nconst _temp33 = require(\"./zh-TW.json\");\nmodule.exports = {\n  \"ar-AE\": _temp0,\n  \"bg-BG\": _temp1,\n  \"cs-CZ\": _temp2,\n  \"da-DK\": _temp3,\n  \"de-DE\": _temp4,\n  \"el-GR\": _temp5,\n  \"en-US\": _temp6,\n  \"es-ES\": _temp7,\n  \"et-EE\": _temp8,\n  \"fi-FI\": _temp9,\n  \"fr-FR\": _temp10,\n  \"he-IL\": _temp11,\n  \"hr-HR\": _temp12,\n  \"hu-HU\": _temp13,\n  \"it-IT\": _temp14,\n  \"ja-JP\": _temp15,\n  \"ko-KR\": _temp16,\n  \"lt-LT\": _temp17,\n  \"lv-LV\": _temp18,\n  \"nb-NO\": _temp19,\n  \"nl-NL\": _temp20,\n  \"pl-PL\": _temp21,\n  \"pt-BR\": _temp22,\n  \"pt-PT\": _temp23,\n  \"ro-RO\": _temp24,\n  \"ru-RU\": _temp25,\n  \"sk-SK\": _temp26,\n  \"sl-SI\": _temp27,\n  \"sr-SP\": _temp28,\n  \"sv-SE\": _temp29,\n  \"tr-TR\": _temp30,\n  \"uk-UA\": _temp31,\n  \"zh-CN\": _temp32,\n  \"zh-TW\": _temp33\n}", "{\n  \"deselectedItem\": \"{item} \u063A\u064A\u0631 \u0627\u0644\u0645\u062D\u062F\u062F\",\n  \"longPressToSelect\": \"\u0627\u0636\u063A\u0637 \u0645\u0637\u0648\u0644\u064B\u0627 \u0644\u0644\u062F\u062E\u0648\u0644 \u0625\u0644\u0649 \u0648\u0636\u0639 \u0627\u0644\u062A\u062D\u062F\u064A\u062F.\",\n  \"select\": \"\u062A\u062D\u062F\u064A\u062F\",\n  \"selectedAll\": \"\u062C\u0645\u064A\u0639 \u0627\u0644\u0639\u0646\u0627\u0635\u0631 \u0627\u0644\u0645\u062D\u062F\u062F\u0629.\",\n  \"selectedCount\": \"{count, plural, =0 {\u0644\u0645 \u064A\u062A\u0645 \u062A\u062D\u062F\u064A\u062F \u0639\u0646\u0627\u0635\u0631} one {# \u0639\u0646\u0635\u0631 \u0645\u062D\u062F\u062F} other {# \u0639\u0646\u0635\u0631 \u0645\u062D\u062F\u062F}}.\",\n  \"selectedItem\": \"{item} \u0627\u0644\u0645\u062D\u062F\u062F\"\n}\n", "{\n  \"deselectedItem\": \"{item} \u043D\u0435 \u0435 \u0438\u0437\u0431\u0440\u0430\u043D.\",\n  \"longPressToSelect\": \"\u041D\u0430\u0442\u0438\u0441\u043D\u0435\u0442\u0435 \u0438 \u0437\u0430\u0434\u0440\u044A\u0436\u0442\u0435 \u0437\u0430 \u0434\u0430 \u0432\u043B\u0435\u0437\u0435\u0442\u0435 \u0432 \u0438\u0437\u0431\u0438\u0440\u0430\u0442\u0435\u043B\u0435\u043D \u0440\u0435\u0436\u0438\u043C.\",\n  \"select\": \"\u0418\u0437\u0431\u0435\u0440\u0435\u0442\u0435\",\n  \"selectedAll\": \"\u0412\u0441\u0438\u0447\u043A\u0438 \u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0438 \u0441\u0430 \u0438\u0437\u0431\u0440\u0430\u043D\u0438.\",\n  \"selectedCount\": \"{count, plural, =0 {\u041D\u044F\u043C\u0430 \u0438\u0437\u0431\u0440\u0430\u043D\u0438 \u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0438} one {# \u0438\u0437\u0431\u0440\u0430\u043D \u0435\u043B\u0435\u043C\u0435\u043D\u0442} other {# \u0438\u0437\u0431\u0440\u0430\u043D\u0438 \u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0438}}.\",\n  \"selectedItem\": \"{item} \u0438\u0437\u0431\u0440\u0430\u043D.\"\n}\n", "{\n  \"deselectedItem\": \"Polo\u017Eka {item} nen\u00ED vybr\u00E1na.\",\n  \"longPressToSelect\": \"Dlouh\u00FDm stisknut\u00EDm p\u0159ejdete do re\u017Eimu v\u00FDb\u011Bru.\",\n  \"select\": \"Vybrat\",\n  \"selectedAll\": \"Vybr\u00E1ny v\u0161echny polo\u017Eky.\",\n  \"selectedCount\": \"{count, plural, =0 {Nevybr\u00E1ny \u017E\u00E1dn\u00E9 polo\u017Eky} one {Vybr\u00E1na # polo\u017Eka} other {Vybr\u00E1no # polo\u017Eek}}.\",\n  \"selectedItem\": \"Vybr\u00E1na polo\u017Eka {item}.\"\n}\n", "{\n  \"deselectedItem\": \"{item} ikke valgt.\",\n  \"longPressToSelect\": \"Lav et langt tryk for at aktivere valgtilstand.\",\n  \"select\": \"V\u00E6lg\",\n  \"selectedAll\": \"Alle elementer valgt.\",\n  \"selectedCount\": \"{count, plural, =0 {Ingen elementer valgt} one {# element valgt} other {# elementer valgt}}.\",\n  \"selectedItem\": \"{item} valgt.\"\n}\n", "{\n  \"deselectedItem\": \"{item} nicht ausgew\u00E4hlt.\",\n  \"longPressToSelect\": \"Gedr\u00FCckt halten, um Auswahlmodus zu \u00F6ffnen.\",\n  \"select\": \"Ausw\u00E4hlen\",\n  \"selectedAll\": \"Alle Elemente ausgew\u00E4hlt.\",\n  \"selectedCount\": \"{count, plural, =0 {Keine Elemente ausgew\u00E4hlt} one {# Element ausgew\u00E4hlt} other {# Elemente ausgew\u00E4hlt}}.\",\n  \"selectedItem\": \"{item} ausgew\u00E4hlt.\"\n}\n", "{\n  \"deselectedItem\": \"\u0394\u03B5\u03BD \u03B5\u03C0\u03B9\u03BB\u03AD\u03C7\u03B8\u03B7\u03BA\u03B5 \u03C4\u03BF \u03C3\u03C4\u03BF\u03B9\u03C7\u03B5\u03AF\u03BF {item}.\",\n  \"longPressToSelect\": \"\u03A0\u03B1\u03C4\u03AE\u03C3\u03C4\u03B5 \u03C0\u03B1\u03C1\u03B1\u03C4\u03B5\u03C4\u03B1\u03BC\u03AD\u03BD\u03B1 \u03B3\u03B9\u03B1 \u03BD\u03B1 \u03BC\u03C0\u03B5\u03AF\u03C4\u03B5 \u03C3\u03B5 \u03BB\u03B5\u03B9\u03C4\u03BF\u03C5\u03C1\u03B3\u03AF\u03B1 \u03B5\u03C0\u03B9\u03BB\u03BF\u03B3\u03AE\u03C2.\",\n  \"select\": \"\u0395\u03C0\u03B9\u03BB\u03BF\u03B3\u03AE\",\n  \"selectedAll\": \"\u0395\u03C0\u03B9\u03BB\u03AD\u03C7\u03B8\u03B7\u03BA\u03B1\u03BD \u03CC\u03BB\u03B1 \u03C4\u03B1 \u03C3\u03C4\u03BF\u03B9\u03C7\u03B5\u03AF\u03B1.\",\n  \"selectedCount\": \"{count, plural, =0 {\u0394\u03B5\u03BD \u03B5\u03C0\u03B9\u03BB\u03AD\u03C7\u03B8\u03B7\u03BA\u03B1\u03BD \u03C3\u03C4\u03BF\u03B9\u03C7\u03B5\u03AF\u03B1} one {\u0395\u03C0\u03B9\u03BB\u03AD\u03C7\u03B8\u03B7\u03BA\u03B5 # \u03C3\u03C4\u03BF\u03B9\u03C7\u03B5\u03AF\u03BF} other {\u0395\u03C0\u03B9\u03BB\u03AD\u03C7\u03B8\u03B7\u03BA\u03B1\u03BD # \u03C3\u03C4\u03BF\u03B9\u03C7\u03B5\u03AF\u03B1}}.\",\n  \"selectedItem\": \"\u0395\u03C0\u03B9\u03BB\u03AD\u03C7\u03B8\u03B7\u03BA\u03B5 \u03C4\u03BF \u03C3\u03C4\u03BF\u03B9\u03C7\u03B5\u03AF\u03BF {item}.\"\n}\n", "{\n  \"deselectedItem\": \"{item} not selected.\",\n  \"select\": \"Select\",\n  \"selectedCount\": \"{count, plural, =0 {No items selected} one {# item selected} other {# items selected}}.\",\n  \"selectedAll\": \"All items selected.\",\n  \"selectedItem\": \"{item} selected.\",\n  \"longPressToSelect\": \"Long press to enter selection mode.\"\n}\n", "{\n  \"deselectedItem\": \"{item} no seleccionado.\",\n  \"longPressToSelect\": \"Mantenga pulsado para abrir el modo de selecci\u00F3n.\",\n  \"select\": \"Seleccionar\",\n  \"selectedAll\": \"Todos los elementos seleccionados.\",\n  \"selectedCount\": \"{count, plural, =0 {Ning\u00FAn elemento seleccionado} one {# elemento seleccionado} other {# elementos seleccionados}}.\",\n  \"selectedItem\": \"{item} seleccionado.\"\n}\n", "{\n  \"deselectedItem\": \"{item} pole valitud.\",\n  \"longPressToSelect\": \"Valikure\u017Eiimi sisenemiseks vajutage pikalt.\",\n  \"select\": \"Vali\",\n  \"selectedAll\": \"K\u00F5ik \u00FCksused valitud.\",\n  \"selectedCount\": \"{count, plural, =0 {\u00DCksusi pole valitud} one {# \u00FCksus valitud} other {# \u00FCksust valitud}}.\",\n  \"selectedItem\": \"{item} valitud.\"\n}\n", "{\n  \"deselectedItem\": \"Kohdetta {item} ei valittu.\",\n  \"longPressToSelect\": \"Siirry valintatilaan painamalla pitk\u00E4\u00E4n.\",\n  \"select\": \"Valitse\",\n  \"selectedAll\": \"Kaikki kohteet valittu.\",\n  \"selectedCount\": \"{count, plural, =0 {Ei yht\u00E4\u00E4n kohdetta valittu} one {# kohde valittu} other {# kohdetta valittu}}.\",\n  \"selectedItem\": \"{item} valittu.\"\n}\n", "{\n  \"deselectedItem\": \"{item} non s\u00E9lectionn\u00E9.\",\n  \"longPressToSelect\": \"Appuyez de mani\u00E8re prolong\u00E9e pour passer en mode de s\u00E9lection.\",\n  \"select\": \"S\u00E9lectionner\",\n  \"selectedAll\": \"Tous les \u00E9l\u00E9ments s\u00E9lectionn\u00E9s.\",\n  \"selectedCount\": \"{count, plural, =0 {Aucun \u00E9l\u00E9ment s\u00E9lectionn\u00E9} one {# \u00E9l\u00E9ment s\u00E9lectionn\u00E9} other {# \u00E9l\u00E9ments s\u00E9lectionn\u00E9s}}.\",\n  \"selectedItem\": \"{item} s\u00E9lectionn\u00E9.\"\n}\n", "{\n  \"deselectedItem\": \"{item} \u05DC\u05D0 \u05E0\u05D1\u05D7\u05E8.\",\n  \"longPressToSelect\": \"\u05D4\u05E7\u05E9\u05D4 \u05D0\u05E8\u05D5\u05DB\u05D4 \u05DC\u05DB\u05E0\u05D9\u05E1\u05D4 \u05DC\u05DE\u05E6\u05D1 \u05D1\u05D7\u05D9\u05E8\u05D4.\",\n  \"select\": \"\u05D1\u05D7\u05E8\",\n  \"selectedAll\": \"\u05DB\u05DC \u05D4\u05E4\u05E8\u05D9\u05D8\u05D9\u05DD \u05E0\u05D1\u05D7\u05E8\u05D5.\",\n  \"selectedCount\": \"{count, plural, =0 {\u05DC\u05D0 \u05E0\u05D1\u05D7\u05E8\u05D5 \u05E4\u05E8\u05D9\u05D8\u05D9\u05DD} one {\u05E4\u05E8\u05D9\u05D8 # \u05E0\u05D1\u05D7\u05E8} other {# \u05E4\u05E8\u05D9\u05D8\u05D9\u05DD \u05E0\u05D1\u05D7\u05E8\u05D5}}.\",\n  \"selectedItem\": \"{item} \u05E0\u05D1\u05D7\u05E8.\"\n}\n", "{\n  \"deselectedItem\": \"Stavka {item} nije odabrana.\",\n  \"longPressToSelect\": \"Dugo pritisnite za ulazak u na\u010Din odabira.\",\n  \"select\": \"Odaberite\",\n  \"selectedAll\": \"Odabrane su sve stavke.\",\n  \"selectedCount\": \"{count, plural, =0 {Nije odabrana nijedna stavka} one {Odabrana je # stavka} other {Odabrano je # stavki}}.\",\n  \"selectedItem\": \"Stavka {item} je odabrana.\"\n}\n", "{\n  \"deselectedItem\": \"{item} nincs kijel\u00F6lve.\",\n  \"longPressToSelect\": \"Nyomja hosszan a kijel\u00F6l\u00E9shez.\",\n  \"select\": \"Kijel\u00F6l\u00E9s\",\n  \"selectedAll\": \"Az \u00F6sszes elem kijel\u00F6lve.\",\n  \"selectedCount\": \"{count, plural, =0 {Egy elem sincs kijel\u00F6lve} one {# elem kijel\u00F6lve} other {# elem kijel\u00F6lve}}.\",\n  \"selectedItem\": \"{item} kijel\u00F6lve.\"\n}\n", "{\n  \"deselectedItem\": \"{item} non selezionato.\",\n  \"longPressToSelect\": \"Premi a lungo per passare alla modalit\u00E0 di selezione.\",\n  \"select\": \"Seleziona\",\n  \"selectedAll\": \"Tutti gli elementi selezionati.\",\n  \"selectedCount\": \"{count, plural, =0 {Nessun elemento selezionato} one {# elemento selezionato} other {# elementi selezionati}}.\",\n  \"selectedItem\": \"{item} selezionato.\"\n}\n", "{\n  \"deselectedItem\": \"{item} \u304C\u9078\u629E\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002\",\n  \"longPressToSelect\": \"\u9577\u62BC\u3057\u3057\u3066\u9078\u629E\u30E2\u30FC\u30C9\u3092\u958B\u304D\u307E\u3059\u3002\",\n  \"select\": \"\u9078\u629E\",\n  \"selectedAll\": \"\u3059\u3079\u3066\u306E\u9805\u76EE\u3092\u9078\u629E\u3057\u307E\u3057\u305F\u3002\",\n  \"selectedCount\": \"{count, plural, =0 {\u9805\u76EE\u304C\u9078\u629E\u3055\u308C\u3066\u3044\u307E\u305B\u3093} one {# \u9805\u76EE\u3092\u9078\u629E\u3057\u307E\u3057\u305F} other {# \u9805\u76EE\u3092\u9078\u629E\u3057\u307E\u3057\u305F}}\u3002\",\n  \"selectedItem\": \"{item} \u3092\u9078\u629E\u3057\u307E\u3057\u305F\u3002\"\n}\n", "{\n  \"deselectedItem\": \"{item}\uC774(\uAC00) \uC120\uD0DD\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4.\",\n  \"longPressToSelect\": \"\uC120\uD0DD \uBAA8\uB4DC\uB85C \uB4E4\uC5B4\uAC00\uB824\uBA74 \uAE38\uAC8C \uB204\uB974\uC2ED\uC2DC\uC624.\",\n  \"select\": \"\uC120\uD0DD\",\n  \"selectedAll\": \"\uBAA8\uB4E0 \uD56D\uBAA9\uC774 \uC120\uD0DD\uB418\uC5C8\uC2B5\uB2C8\uB2E4.\",\n  \"selectedCount\": \"{count, plural, =0 {\uC120\uD0DD\uB41C \uD56D\uBAA9\uC774 \uC5C6\uC2B5\uB2C8\uB2E4} one {#\uAC1C \uD56D\uBAA9\uC774 \uC120\uD0DD\uB418\uC5C8\uC2B5\uB2C8\uB2E4} other {#\uAC1C \uD56D\uBAA9\uC774 \uC120\uD0DD\uB418\uC5C8\uC2B5\uB2C8\uB2E4}}.\",\n  \"selectedItem\": \"{item}\uC774(\uAC00) \uC120\uD0DD\uB418\uC5C8\uC2B5\uB2C8\uB2E4.\"\n}\n", "{\n  \"deselectedItem\": \"{item} nepasirinkta.\",\n  \"longPressToSelect\": \"Nor\u0117dami \u012Fjungti pasirinkimo re\u017Eim\u0105, paspauskite ir palaikykite.\",\n  \"select\": \"Pasirinkti\",\n  \"selectedAll\": \"Pasirinkti visi elementai.\",\n  \"selectedCount\": \"{count, plural, =0 {Nepasirinktas n\u0117 vienas elementas} one {Pasirinktas # elementas} other {Pasirinkta element\u0173: #}}.\",\n  \"selectedItem\": \"Pasirinkta: {item}.\"\n}\n", "{\n  \"deselectedItem\": \"Vienums {item} nav atlas\u012Bts.\",\n  \"longPressToSelect\": \"Ilgi turiet nospiestu. lai iesl\u0113gtu atlases re\u017E\u012Bmu.\",\n  \"select\": \"Atlas\u012Bt\",\n  \"selectedAll\": \"Atlas\u012Bti visi vienumi.\",\n  \"selectedCount\": \"{count, plural, =0 {Nav atlas\u012Bts neviens vienums} one {Atlas\u012Bto vienumu skaits: #} other {Atlas\u012Bto vienumu skaits: #}}.\",\n  \"selectedItem\": \"Atlas\u012Bts vienums {item}.\"\n}\n", "{\n  \"deselectedItem\": \"{item} er ikke valgt.\",\n  \"longPressToSelect\": \"Bruk et langt trykk for \u00E5 g\u00E5 inn i valgmodus.\",\n  \"select\": \"Velg\",\n  \"selectedAll\": \"Alle elementer er valgt.\",\n  \"selectedCount\": \"{count, plural, =0 {Ingen elementer er valgt} one {# element er valgt} other {# elementer er valgt}}.\",\n  \"selectedItem\": \"{item} er valgt.\"\n}\n", "{\n  \"deselectedItem\": \"{item} niet geselecteerd.\",\n  \"longPressToSelect\": \"Druk lang om de selectiemodus te openen.\",\n  \"select\": \"Selecteren\",\n  \"selectedAll\": \"Alle items geselecteerd.\",\n  \"selectedCount\": \"{count, plural, =0 {Geen items geselecteerd} one {# item geselecteerd} other {# items geselecteerd}}.\",\n  \"selectedItem\": \"{item} geselecteerd.\"\n}\n", "{\n  \"deselectedItem\": \"Nie zaznaczono {item}.\",\n  \"longPressToSelect\": \"Naci\u015Bnij i przytrzymaj, aby wej\u015B\u0107 do trybu wyboru.\",\n  \"select\": \"Zaznacz\",\n  \"selectedAll\": \"Wszystkie zaznaczone elementy.\",\n  \"selectedCount\": \"{count, plural, =0 {Nie zaznaczono \u017Cadnych element\u00F3w} one {# zaznaczony element} other {# zaznaczonych element\u00F3w}}.\",\n  \"selectedItem\": \"Zaznaczono {item}.\"\n}\n", "{\n  \"deselectedItem\": \"{item} n\u00E3o selecionado.\",\n  \"longPressToSelect\": \"Mantenha pressionado para entrar no modo de sele\u00E7\u00E3o.\",\n  \"select\": \"Selecionar\",\n  \"selectedAll\": \"Todos os itens selecionados.\",\n  \"selectedCount\": \"{count, plural, =0 {Nenhum item selecionado} one {# item selecionado} other {# itens selecionados}}.\",\n  \"selectedItem\": \"{item} selecionado.\"\n}\n", "{\n  \"deselectedItem\": \"{item} n\u00E3o selecionado.\",\n  \"longPressToSelect\": \"Prima continuamente para entrar no modo de sele\u00E7\u00E3o.\",\n  \"select\": \"Selecionar\",\n  \"selectedAll\": \"Todos os itens selecionados.\",\n  \"selectedCount\": \"{count, plural, =0 {Nenhum item selecionado} one {# item selecionado} other {# itens selecionados}}.\",\n  \"selectedItem\": \"{item} selecionado.\"\n}\n", "{\n  \"deselectedItem\": \"{item} neselectat.\",\n  \"longPressToSelect\": \"Ap\u0103sa\u021Bi lung pentru a intra \u00EEn modul de selectare.\",\n  \"select\": \"Selectare\",\n  \"selectedAll\": \"Toate elementele selectate.\",\n  \"selectedCount\": \"{count, plural, =0 {Niciun element selectat} one {# element selectat} other {# elemente selectate}}.\",\n  \"selectedItem\": \"{item} selectat.\"\n}\n", "{\n  \"deselectedItem\": \"{item} \u043D\u0435 \u0432\u044B\u0431\u0440\u0430\u043D\u043E.\",\n  \"longPressToSelect\": \"\u041D\u0430\u0436\u043C\u0438\u0442\u0435 \u0438 \u0443\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439\u0442\u0435 \u0434\u043B\u044F \u0432\u0445\u043E\u0434\u0430 \u0432 \u0440\u0435\u0436\u0438\u043C \u0432\u044B\u0431\u043E\u0440\u0430.\",\n  \"select\": \"\u0412\u044B\u0431\u0440\u0430\u0442\u044C\",\n  \"selectedAll\": \"\u0412\u044B\u0431\u0440\u0430\u043D\u044B \u0432\u0441\u0435 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B.\",\n  \"selectedCount\": \"{count, plural, =0 {\u041D\u0435\u0442 \u0432\u044B\u0431\u0440\u0430\u043D\u043D\u044B\u0445 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432} one {# \u044D\u043B\u0435\u043C\u0435\u043D\u0442 \u0432\u044B\u0431\u0440\u0430\u043D} other {# \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432 \u0432\u044B\u0431\u0440\u0430\u043D\u043E}}.\",\n  \"selectedItem\": \"{item} \u0432\u044B\u0431\u0440\u0430\u043D\u043E.\"\n}\n", "{\n  \"deselectedItem\": \"Nevybrat\u00E9 polo\u017Eky: {item}.\",\n  \"longPressToSelect\": \"Dlh\u0161\u00EDm stla\u010Den\u00EDm prejdite do re\u017Eimu v\u00FDberu.\",\n  \"select\": \"Vybra\u0165\",\n  \"selectedAll\": \"V\u0161etky vybrat\u00E9 polo\u017Eky.\",\n  \"selectedCount\": \"{count, plural, =0 {\u017Diadne vybrat\u00E9 polo\u017Eky} one {# vybrat\u00E1 polo\u017Eka} other {Po\u010Det vybrat\u00FDch polo\u017Eiek:#}}.\",\n  \"selectedItem\": \"Vybrat\u00E9 polo\u017Eky: {item}.\"\n}\n", "{\n  \"deselectedItem\": \"Element {item} ni izbran.\",\n  \"longPressToSelect\": \"Za izbirni na\u010Din pritisnite in dlje \u010Dasa dr\u017Eite.\",\n  \"select\": \"Izberite\",\n  \"selectedAll\": \"Vsi elementi so izbrani.\",\n  \"selectedCount\": \"{count, plural, =0 {Noben element ni izbran} one {# element je izbran} other {# elementov je izbranih}}.\",\n  \"selectedItem\": \"Element {item} je izbran.\"\n}\n", "{\n  \"deselectedItem\": \"{item} nije izabrano.\",\n  \"longPressToSelect\": \"Dugo pritisnite za ulazak u re\u017Eim biranja.\",\n  \"select\": \"Izaberite\",\n  \"selectedAll\": \"Izabrane su sve stavke.\",\n  \"selectedCount\": \"{count, plural, =0 {Nije izabrana nijedna stavka} one {Izabrana je # stavka} other {Izabrano je # stavki}}.\",\n  \"selectedItem\": \"{item} je izabrano.\"\n}\n", "{\n  \"deselectedItem\": \"{item} ej markerat.\",\n  \"longPressToSelect\": \"Tryck l\u00E4nge n\u00E4r du vill \u00F6ppna v\u00E4ljarl\u00E4ge.\",\n  \"select\": \"Markera\",\n  \"selectedAll\": \"Alla markerade objekt.\",\n  \"selectedCount\": \"{count, plural, =0 {Inga markerade objekt} one {# markerat objekt} other {# markerade objekt}}.\",\n  \"selectedItem\": \"{item} markerat.\"\n}\n", "{\n  \"deselectedItem\": \"{item} se\u00E7ilmedi.\",\n  \"longPressToSelect\": \"Se\u00E7im moduna girmek i\u00E7in uzun bas\u0131n.\",\n  \"select\": \"Se\u00E7\",\n  \"selectedAll\": \"T\u00FCm \u00F6geler se\u00E7ildi.\",\n  \"selectedCount\": \"{count, plural, =0 {Hi\u00E7bir \u00F6ge se\u00E7ilmedi} one {# \u00F6ge se\u00E7ildi} other {# \u00F6ge se\u00E7ildi}}.\",\n  \"selectedItem\": \"{item} se\u00E7ildi.\"\n}\n", "{\n  \"deselectedItem\": \"{item} \u043D\u0435 \u0432\u0438\u0431\u0440\u0430\u043D\u043E.\",\n  \"longPressToSelect\": \"\u0412\u0438\u043A\u043E\u043D\u0430\u0439\u0442\u0435 \u0434\u043E\u0432\u0433\u0435 \u043D\u0430\u0442\u0438\u0441\u043D\u0435\u043D\u043D\u044F, \u0449\u043E\u0431 \u043F\u0435\u0440\u0435\u0439\u0442\u0438 \u0432 \u0440\u0435\u0436\u0438\u043C \u0432\u0438\u0431\u043E\u0440\u0443.\",\n  \"select\": \"\u0412\u0438\u0431\u0440\u0430\u0442\u0438\",\n  \"selectedAll\": \"\u0423\u0441\u0456 \u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0438 \u0432\u0438\u0431\u0440\u0430\u043D\u043E.\",\n  \"selectedCount\": \"{count, plural, =0 {\u0416\u043E\u0434\u043D\u0438\u0445 \u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432 \u043D\u0435 \u0432\u0438\u0431\u0440\u0430\u043D\u043E} one {# \u0435\u043B\u0435\u043C\u0435\u043D\u0442 \u0432\u0438\u0431\u0440\u0430\u043D\u043E} other {\u0412\u0438\u0431\u0440\u0430\u043D\u043E \u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432: #}}.\",\n  \"selectedItem\": \"{item} \u0432\u0438\u0431\u0440\u0430\u043D\u043E.\"\n}\n", "{\n  \"deselectedItem\": \"\u672A\u9009\u62E9 {item}\u3002\",\n  \"longPressToSelect\": \"\u957F\u6309\u4EE5\u8FDB\u5165\u9009\u62E9\u6A21\u5F0F\u3002\",\n  \"select\": \"\u9009\u62E9\",\n  \"selectedAll\": \"\u5DF2\u9009\u62E9\u6240\u6709\u9879\u76EE\u3002\",\n  \"selectedCount\": \"{count, plural, =0 {\u672A\u9009\u62E9\u9879\u76EE} one {\u5DF2\u9009\u62E9 # \u4E2A\u9879\u76EE} other {\u5DF2\u9009\u62E9 # \u4E2A\u9879\u76EE}}\u3002\",\n  \"selectedItem\": \"\u5DF2\u9009\u62E9 {item}\u3002\"\n}\n", "{\n  \"deselectedItem\": \"\u672A\u9078\u53D6\u300C{item}\u300D\u3002\",\n  \"longPressToSelect\": \"\u9577\u6309\u4EE5\u9032\u5165\u9078\u64C7\u6A21\u5F0F\u3002\",\n  \"select\": \"\u9078\u53D6\",\n  \"selectedAll\": \"\u5DF2\u9078\u53D6\u6240\u6709\u9805\u76EE\u3002\",\n  \"selectedCount\": \"{count, plural, =0 {\u672A\u9078\u53D6\u4EFB\u4F55\u9805\u76EE} one {\u5DF2\u9078\u53D6 # \u500B\u9805\u76EE} other {\u5DF2\u9078\u53D6 # \u500B\u9805\u76EE}}\u3002\",\n  \"selectedItem\": \"\u5DF2\u9078\u53D6\u300C{item}\u300D\u3002\"\n}\n", "/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps} from '@react-types/shared';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useDescription} from '@react-aria/utils';\nimport {useInteractionModality} from '@react-aria/interactions';\nimport {useMemo} from 'react';\nimport {useMessageFormatter} from '@react-aria/i18n';\n\ninterface UseHighlightSelectionDescriptionProps {\n  selectionManager: MultipleSelectionManager,\n  hasItemActions?: boolean\n}\n\n/**\n * Computes the description for a grid selectable collection.\n * @param props\n */\nexport function useHighlightSelectionDescription(props: UseHighlightSelectionDescriptionProps): AriaLabelingProps {\n  let formatMessage = useMessageFormatter(intlMessages);\n  let modality = useInteractionModality();\n  // null is the default if the user hasn't interacted with the table at all yet or the rest of the page\n  let shouldLongPress = (modality === 'pointer' || modality === 'virtual' || modality == null)\n    && typeof window !== 'undefined' && 'ontouchstart' in window;\n\n  let interactionDescription = useMemo(() => {\n    let selectionMode = props.selectionManager.selectionMode;\n    let selectionBehavior = props.selectionManager.selectionBehavior;\n\n    let message = undefined;\n    if (shouldLongPress) {\n      message = formatMessage('longPressToSelect');\n    }\n\n    return selectionBehavior === 'replace' && selectionMode !== 'none' && props.hasItemActions ? message : undefined;\n  }, [props.selectionManager.selectionMode, props.selectionManager.selectionBehavior, props.hasItemActions, formatMessage, shouldLongPress]);\n\n  let descriptionProps = useDescription(interactionDescription);\n  return descriptionProps;\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes} from 'react';\n\nexport interface GridRowGroupAria {\n  /** Props for the row group element. */\n  rowGroupProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the accessibility implementation for a row group in a grid.\n */\nexport function useGridRowGroup(): GridRowGroupAria {\n  return {\n    rowGroupProps: {\n      role: 'rowgroup'\n    }\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {GridCollection} from '@react-types/grid';\nimport {gridMap} from './utils';\nimport {GridState} from '@react-stately/grid';\nimport {HTMLAttributes, RefObject} from 'react';\nimport {Node} from '@react-types/shared';\nimport {useSelectableItem} from '@react-aria/selection';\n\nexport interface GridRowProps<T> {\n  /** An object representing the grid row. Contains all the relevant information that makes up the grid row. */\n  node: Node<T>,\n  /** Whether the grid row is contained in a virtual scroller. */\n  isVirtualized?: boolean,\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the row.\n   * Please use onCellAction at the collection level instead.\n   * @deprecated\n   **/\n  onAction?: () => void\n}\n\nexport interface GridRowAria {\n  /** Props for the grid row element. */\n  rowProps: HTMLAttributes<HTMLElement>,\n  /** Whether the row is currently in a pressed state. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for a row in a grid.\n * @param props - Props for the row.\n * @param state - State of the parent grid, as returned by `useGridState`.\n */\nexport function useGridRow<T, C extends GridCollection<T>, S extends GridState<T, C>>(props: GridRowProps<T>, state: S, ref: RefObject<HTMLElement>): GridRowAria {\n  let {\n    node,\n    isVirtualized,\n    shouldSelectOnPressUp,\n    onAction\n  } = props;\n\n  let {actions: {onRowAction}} = gridMap.get(state);\n  let {itemProps, isPressed} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: node.key,\n    ref,\n    isVirtualized,\n    shouldSelectOnPressUp,\n    onAction: onRowAction ? () => onRowAction(node.key) : onAction\n  });\n\n  let isSelected = state.selectionManager.isSelected(node.key);\n\n  let rowProps: HTMLAttributes<HTMLElement> = {\n    role: 'row',\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined,\n    ...itemProps\n  };\n\n  if (isVirtualized) {\n    rowProps['aria-rowindex'] = node.index + 1; // aria-rowindex is 1 based\n  }\n\n  return {\n    rowProps,\n    isPressed\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {GridCollection} from '@react-types/grid';\nimport {gridMap} from './utils';\nimport {GridState} from '@react-stately/grid';\nimport {HTMLAttributes, KeyboardEvent as ReactKeyboardEvent, RefObject} from 'react';\nimport {isFocusVisible} from '@react-aria/interactions';\nimport {mergeProps} from '@react-aria/utils';\nimport {Node as RSNode} from '@react-types/shared';\nimport {useLocale} from '@react-aria/i18n';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface GridCellProps {\n  /** An object representing the grid cell. Contains all the relevant information that makes up the grid cell. */\n  node: RSNode<unknown>,\n  /** Whether the grid cell is contained in a virtual scroller. */\n  isVirtualized?: boolean,\n  /** Whether the cell or its first focusable child element should be focused when the grid cell is focused. */\n  focusMode?: 'child' | 'cell',\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the cell.\n   * Please use onCellAction at the collection level instead.\n   * @deprecated\n   **/\n  onAction?: () => void\n}\n\ninterface GridCellAria {\n  /** Props for the grid cell element. */\n  gridCellProps: HTMLAttributes<HTMLElement>,\n  /** Whether the cell is currently in a pressed state. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for a cell in a grid.\n * @param props - Props for the cell.\n * @param state - State of the parent grid, as returned by `useGridState`.\n */\nexport function useGridCell<T, C extends GridCollection<T>>(props: GridCellProps, state: GridState<T, C>, ref: RefObject<HTMLElement>): GridCellAria {\n  let {\n    node,\n    isVirtualized,\n    focusMode = 'child',\n    shouldSelectOnPressUp,\n    onAction\n  } = props;\n\n  let {direction} = useLocale();\n  let {keyboardDelegate, actions: {onCellAction}} = gridMap.get(state);\n\n  // Handles focusing the cell. If there is a focusable child,\n  // it is focused, otherwise the cell itself is focused.\n  let focus = () => {\n    let treeWalker = getFocusableTreeWalker(ref.current);\n    if (focusMode === 'child') {\n      let focusable = state.selectionManager.childFocusStrategy === 'last'\n        ? last(treeWalker)\n        : treeWalker.firstChild() as HTMLElement;\n      if (focusable) {\n        focusSafely(focusable);\n        return;\n      }\n    }\n\n    if (!ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n    }\n  };\n\n  let {itemProps, isPressed} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: node.key,\n    ref,\n    isVirtualized,\n    focus,\n    shouldSelectOnPressUp,\n    onAction: onCellAction ? () => onCellAction(node.key) : onAction\n  });\n\n  let onKeyDown = (e: ReactKeyboardEvent) => {\n    if (!e.currentTarget.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    let walker = getFocusableTreeWalker(ref.current);\n    walker.currentNode = document.activeElement;\n\n    switch (e.key) {\n      case 'ArrowLeft': {\n        // Find the next focusable element within the cell.\n        let focusable = direction === 'rtl'\n          ? walker.nextNode() as HTMLElement\n          : walker.previousNode() as HTMLElement;\n\n        // Don't focus the cell itself if focusMode is \"child\"\n        if (focusMode === 'child' && focusable === ref.current) {\n          focusable = null;\n        }\n\n        if (focusable) {\n          e.preventDefault();\n          e.stopPropagation();\n          focusSafely(focusable);\n        } else {\n          // If there is no next focusable child, then move to the next cell to the left of this one.\n          // This will be handled by useSelectableCollection. However, if there is no cell to the left\n          // of this one, only one column, and the grid doesn't focus rows, then the next key will be the\n          // same as this one. In that case we need to handle focusing either the cell or the first/last\n          // child, depending on the focus mode.\n          let prev = keyboardDelegate.getKeyLeftOf(node.key);\n          if (prev !== node.key) {\n            break;\n          }\n\n          e.preventDefault();\n          e.stopPropagation();\n          if (focusMode === 'cell' && direction === 'rtl') {\n            focusSafely(ref.current);\n          } else {\n            walker.currentNode = ref.current;\n            focusable = direction === 'rtl'\n              ? walker.firstChild() as HTMLElement\n              : last(walker);\n            if (focusable) {\n              focusSafely(focusable);\n            }\n          }\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        let focusable = direction === 'rtl'\n          ? walker.previousNode() as HTMLElement\n          : walker.nextNode() as HTMLElement;\n\n        if (focusMode === 'child' && focusable === ref.current) {\n          focusable = null;\n        }\n\n        if (focusable) {\n          e.preventDefault();\n          e.stopPropagation();\n          focusSafely(focusable);\n        } else {\n          let next = keyboardDelegate.getKeyRightOf(node.key);\n          if (next !== node.key) {\n            break;\n          }\n\n          e.preventDefault();\n          e.stopPropagation();\n          if (focusMode === 'cell' && direction === 'ltr') {\n            focusSafely(ref.current);\n          } else {\n            walker.currentNode = ref.current;\n            focusable = direction === 'rtl'\n              ? last(walker)\n              : walker.firstChild() as HTMLElement;\n            if (focusable) {\n              focusSafely(focusable);\n            }\n          }\n        }\n        break;\n      }\n      case 'ArrowUp':\n      case 'ArrowDown':\n        // Prevent this event from reaching cell children, e.g. menu buttons. We want arrow keys to navigate\n        // to the cell above/below instead. We need to re-dispatch the event from a higher parent so it still\n        // bubbles and gets handled by useSelectableCollection.\n        if (!e.altKey && ref.current.contains(e.target as HTMLElement)) {\n          e.stopPropagation();\n          e.preventDefault();\n          ref.current.parentElement.dispatchEvent(\n            new KeyboardEvent(e.nativeEvent.type, e.nativeEvent)\n          );\n        }\n        break;\n    }\n  };\n\n  // Grid cells can have focusable elements inside them. In this case, focus should\n  // be marshalled to that element rather than focusing the cell itself.\n  let onFocus = (e) => {\n    if (e.target !== ref.current) {\n      // useSelectableItem only handles setting the focused key when\n      // the focused element is the gridcell itself. We also want to\n      // set the focused key when a child element receives focus.\n      // If focus is currently visible (e.g. the user is navigating with the keyboard),\n      // then skip this. We want to restore focus to the previously focused row/cell\n      // in that case since the table should act like a single tab stop.\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocusedKey(node.key);\n      }\n      return;\n    }\n\n    // If the cell itself is focused, wait a frame so that focus finishes propagatating\n    // up to the tree, and move focus to a focusable child if possible.\n    requestAnimationFrame(() => {\n      if (focusMode === 'child' && document.activeElement === ref.current) {\n        focus();\n      }\n    });\n  };\n\n  let gridCellProps: HTMLAttributes<HTMLElement> = mergeProps(itemProps, {\n    role: 'gridcell',\n    onKeyDownCapture: onKeyDown,\n    onFocus\n  });\n\n  if (isVirtualized) {\n    gridCellProps['aria-colindex'] = node.index + 1; // aria-colindex is 1-based\n  }\n\n  return {\n    gridCellProps,\n    isPressed\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: HTMLElement;\n  let last: HTMLElement;\n  do {\n    last = walker.lastChild() as HTMLElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n", "import {AriaCheckboxProps} from '@react-types/checkbox';\nimport {GridCollection} from '@react-types/grid';\nimport {GridState} from '@react-stately/grid';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {Key} from 'react';\nimport {useId} from '@react-aria/utils';\nimport {useMessageFormatter} from '@react-aria/i18n';\n\ninterface SelectionCheckboxProps {\n  /** A unique key for the checkbox. */\n  key: Key\n}\n\ninterface SelectionCheckboxAria {\n  /** Props for the row selection checkbox element. */\n  checkboxProps: AriaCheckboxProps\n}\n\n\n/**\n * Provides the behavior and accessibility implementation for a selection checkbox in a grid.\n * @param props - Props for the selection checkbox.\n * @param state - State of the grid, as returned by `useGridState`.\n */\nexport function useGridSelectionCheckbox<T, C extends GridCollection<T>>(props: SelectionCheckboxProps, state: GridState<T, C>): SelectionCheckboxAria {\n  let {key} = props;\n\n  let manager = state.selectionManager;\n  let checkboxId = useId();\n  let isDisabled = state.disabledKeys.has(key);\n  let isSelected = state.selectionManager.isSelected(key);\n\n  let onChange = () => manager.select(key);\n\n  const formatMessage = useMessageFormatter(intlMessages);\n\n  return {\n    checkboxProps: {\n      id: checkboxId,\n      'aria-label': formatMessage('select'),\n      isSelected,\n      isDisabled: isDisabled || manager.selectionMode === 'none',\n      onChange\n    }\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
