import {
  $00af9ba397a66f43$export$b04be29aa201d4f5,
  $28f99e3e86e6ec45$export$e5fda3247f5d67f9,
  $47b897dc8cdb026b$export$8d15029008292ae,
  $599adb75312e6492$export$d22444a338b6e3c2,
  $884c64d19340d345$export$f51f4c4ede09e011,
  $bcca50147b47f54d$export$56b2c08e277f365,
  $d2e8511e6f209edf$export$e908e06f4b8e3402,
  $d841c8010a73d545$export$4f384c9210e583c3
} from "./chunk-MK2BHXFP.js";
import {
  $f7dceffc5ad7768b$export$4e328f61c538687f
} from "./chunk-XFSUY32S.js";
import {
  $380ed8f3903c3931$export$abc24f5b99744ea6,
  $380ed8f3903c3931$export$b8e6fb9d2dff3f41,
  $7167f8da3cce35e4$export$521c373ccc32c300,
  $98e5a8ae0e6415af$export$96a734597687c040,
  $fd933927dbac1f15$export$ce4ab0c55987d1ff,
  init_module as init_module6,
  init_module2 as init_module9
} from "./chunk-ZWRDOX3H.js";
import {
  $18f2051aff69b9bf$export$43bb16f9c6d9e3f7,
  $321bc95feeb923dd$export$ec23bf898b1eed85,
  $46d819fcbaf35654$export$8f71654801c2f7cd,
  $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5,
  $507fabe10e71c6fb$export$ffd9e5021c1fb2d6,
  $5c3e21d68f1c4674$export$a966af930f325cab,
  $70eee6030fd7c1a1$export$64839e615120df17,
  $7d0a636d7a4dcefd$export$2123ff2b87c81ca,
  $9ab94262bd0047c7$export$420e68273165f4ec,
  $a1ea59d68270f0dd$export$f8168d8dd8fd66e6,
  $e8a7022cf87cba2a$export$36da96379f79f245,
  init_module,
  init_module2,
  init_module3,
  init_module4 as init_module7,
  init_module5 as init_module8
} from "./chunk-6KFQ6A6Z.js";
import "./chunk-UDHHH5F2.js";
import {
  $03deb23ff14920c4$export$4eaf04e54aa8eed6,
  $313b98861ee5dd6c$export$d6875122194c7b44,
  $3ef42575df84b30b$export$9d1611c77c2fe928,
  $48d9f1d165180307$export$7d15b64cf5a3a4c4,
  $48d9f1d165180307$export$b6268554fba451f,
  $48d9f1d165180307$export$cb6e0bb50bc19463,
  $7215afc6de606d6b$export$de79e2c695e052f3,
  $9daab02d461809db$export$683480f191c0e3ea,
  $bdb11010cef70236$export$f680877a34711e37,
  $bfee1151ccb0650f$export$40bfa8c7b0832715,
  $c87311424ea30a05$export$a11b0059900ceec8,
  $c87311424ea30a05$export$fedb369cb70207f1,
  init_module2 as init_module4,
  init_module3 as init_module5
} from "./chunk-QKH6FRTE.js";
import "./chunk-ANVMQ54G.js";
import "./chunk-STM4WKV5.js";
import {
  require_react
} from "./chunk-XNOQ2MXE.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues,
  __toESM
} from "./chunk-FH3PLF5R.js";

// node_modules/@react-spectrum/color/dist/module.js
init_module6();
init_module5();
var import_react3 = __toESM(require_react());
import "C:/Users/Kirill/Desktop/cryptodonat/node_modules/@react-spectrum/color/dist/main.css";

// node_modules/@react-aria/color/dist/module.js
init_module5();
var import_react = __toESM(require_react());
init_module7();
init_module3();
init_module8();
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $60bd7d6e45dcddfa$exports = {};
$parcel$export($60bd7d6e45dcddfa$exports, "useColorArea", () => $60bd7d6e45dcddfa$export$2f92a7a615a014f6);
var $052cfdf4c32eb7c3$exports = {};
var $eccab2b0118aef08$exports = {};
$eccab2b0118aef08$exports = JSON.parse('{"twoDimensionalSlider":"\u0634\u0631\u064A\u0637 \u062A\u0645\u0631\u064A\u0631 \u062B\u0646\u0627\u0626\u064A \u0627\u0644\u0623\u0628\u0639\u0627\u062F","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $bf2b4507594e3d45$exports = {};
$bf2b4507594e3d45$exports = JSON.parse('{"twoDimensionalSlider":"2D \u043F\u043B\u044A\u0437\u0433\u0430\u0447","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $01c08487af7ecd14$exports = {};
$01c08487af7ecd14$exports = JSON.parse('{"twoDimensionalSlider":"2D posuvn\xEDk","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $5e997db6ea0d10f6$exports = {};
$5e997db6ea0d10f6$exports = JSON.parse('{"twoDimensionalSlider":"2D-skyder","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $fe5998f640a79fd2$exports = {};
$fe5998f640a79fd2$exports = JSON.parse('{"twoDimensionalSlider":"2D-Schieberegler","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $18e4d1d5b500a9ee$exports = {};
$18e4d1d5b500a9ee$exports = JSON.parse('{"twoDimensionalSlider":"\u03A1\u03C5\u03B8\u03BC\u03B9\u03C3\u03C4\u03B9\u03BA\u03CC 2D","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $bf90a11a7a42a0f7$exports = {};
$bf90a11a7a42a0f7$exports = JSON.parse('{"twoDimensionalSlider":"2D slider","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $dd0d25f885b5c5f3$exports = {};
$dd0d25f885b5c5f3$exports = JSON.parse('{"twoDimensionalSlider":"Control deslizante en 2D","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $d950967017e3485b$exports = {};
$d950967017e3485b$exports = JSON.parse('{"twoDimensionalSlider":"2D-liugur","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $00a415a3f0ab315a$exports = {};
$00a415a3f0ab315a$exports = JSON.parse('{"twoDimensionalSlider":"2D-liukus\xE4\xE4din","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $d80f30fe86c95741$exports = {};
$d80f30fe86c95741$exports = JSON.parse('{"twoDimensionalSlider":"Curseur 2D","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $6912afb584340a2e$exports = {};
$6912afb584340a2e$exports = JSON.parse('{"twoDimensionalSlider":"\u05DE\u05D7\u05D5\u05D5\u05DF \u05D3\u05D5-\u05DE\u05DE\u05D3\u05D9","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $7b97fcacd84ec90f$exports = {};
$7b97fcacd84ec90f$exports = JSON.parse('{"twoDimensionalSlider":"2D kliznik","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $da9b443e89eebc6b$exports = {};
$da9b443e89eebc6b$exports = JSON.parse('{"twoDimensionalSlider":"2D cs\xFAszka","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $35f135b45eb4d95b$exports = {};
$35f135b45eb4d95b$exports = JSON.parse('{"twoDimensionalSlider":"Dispositivo di scorrimento 2D","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $760b09448e39c6cd$exports = {};
$760b09448e39c6cd$exports = JSON.parse('{"twoDimensionalSlider":"2D \u30B9\u30E9\u30A4\u30C0\u30FC","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $fc7b7d43be9703ec$exports = {};
$fc7b7d43be9703ec$exports = JSON.parse('{"twoDimensionalSlider":"2D \uC2AC\uB77C\uC774\uB354","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $74918a1664156912$exports = {};
$74918a1664156912$exports = JSON.parse('{"twoDimensionalSlider":"2D slankiklis","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $4e6cde11c2bc9840$exports = {};
$4e6cde11c2bc9840$exports = JSON.parse('{"twoDimensionalSlider":"Plaknes sl\u012Bdnis","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $6faa3defebc3eb72$exports = {};
$6faa3defebc3eb72$exports = JSON.parse('{"twoDimensionalSlider":"2D-glidebryter","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $6ac9b6b1b7e3ca12$exports = {};
$6ac9b6b1b7e3ca12$exports = JSON.parse('{"twoDimensionalSlider":"2D-schuifregelaar","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $1be8b0ee8841f1e7$exports = {};
$1be8b0ee8841f1e7$exports = JSON.parse('{"twoDimensionalSlider":"Suwak 2D","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $f9507c2d404ed689$exports = {};
$f9507c2d404ed689$exports = JSON.parse('{"twoDimensionalSlider":"Controle deslizante 2D","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $8f872ea59c02d67e$exports = {};
$8f872ea59c02d67e$exports = JSON.parse('{"twoDimensionalSlider":"Controlo de deslize 2D","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $b03b45b62a7ccae4$exports = {};
$b03b45b62a7ccae4$exports = JSON.parse('{"twoDimensionalSlider":"Cursor 2D","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $f1107d94c09df9b8$exports = {};
$f1107d94c09df9b8$exports = JSON.parse('{"twoDimensionalSlider":"\u0414\u0432\u0443\u043C\u0435\u0440\u043D\u044B\u0439 \u043F\u043E\u043B\u0437\u0443\u043D\u043E\u043A","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $b61325f242fafc7c$exports = {};
$b61325f242fafc7c$exports = JSON.parse('{"twoDimensionalSlider":"2D jazdec","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $f44b7cf39ac8f315$exports = {};
$f44b7cf39ac8f315$exports = JSON.parse('{"twoDimensionalSlider":"2D-drsnik","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $aa8cd83fc8d4982b$exports = {};
$aa8cd83fc8d4982b$exports = JSON.parse('{"twoDimensionalSlider":"2D \u043A\u043B\u0438\u0437\u0430\u0447","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $7c4f4e5bb7c06f1e$exports = {};
$7c4f4e5bb7c06f1e$exports = JSON.parse('{"twoDimensionalSlider":"2D-reglage","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $8045cf930ef745aa$exports = {};
$8045cf930ef745aa$exports = JSON.parse('{"twoDimensionalSlider":"2B slayt g\xF6sterisi","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $ee2044a77f24b118$exports = {};
$ee2044a77f24b118$exports = JSON.parse('{"twoDimensionalSlider":"\u041F\u043E\u0432\u0437\u0443\u043D\u043E\u043A 2D","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $4e1dbc65a687dd93$exports = {};
$4e1dbc65a687dd93$exports = JSON.parse('{"twoDimensionalSlider":"2D \u6ED1\u5757","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
var $b0fef28529309aa6$exports = {};
$b0fef28529309aa6$exports = JSON.parse('{"twoDimensionalSlider":"2D \u6ED1\u687F","colorNameAndValue":"{name}: {value}","x/y":"{x} / {y}"}');
$052cfdf4c32eb7c3$exports = {
  "ar-AE": $eccab2b0118aef08$exports,
  "bg-BG": $bf2b4507594e3d45$exports,
  "cs-CZ": $01c08487af7ecd14$exports,
  "da-DK": $5e997db6ea0d10f6$exports,
  "de-DE": $fe5998f640a79fd2$exports,
  "el-GR": $18e4d1d5b500a9ee$exports,
  "en-US": $bf90a11a7a42a0f7$exports,
  "es-ES": $dd0d25f885b5c5f3$exports,
  "et-EE": $d950967017e3485b$exports,
  "fi-FI": $00a415a3f0ab315a$exports,
  "fr-FR": $d80f30fe86c95741$exports,
  "he-IL": $6912afb584340a2e$exports,
  "hr-HR": $7b97fcacd84ec90f$exports,
  "hu-HU": $da9b443e89eebc6b$exports,
  "it-IT": $35f135b45eb4d95b$exports,
  "ja-JP": $760b09448e39c6cd$exports,
  "ko-KR": $fc7b7d43be9703ec$exports,
  "lt-LT": $74918a1664156912$exports,
  "lv-LV": $4e6cde11c2bc9840$exports,
  "nb-NO": $6faa3defebc3eb72$exports,
  "nl-NL": $6ac9b6b1b7e3ca12$exports,
  "pl-PL": $1be8b0ee8841f1e7$exports,
  "pt-BR": $f9507c2d404ed689$exports,
  "pt-PT": $8f872ea59c02d67e$exports,
  "ro-RO": $b03b45b62a7ccae4$exports,
  "ru-RU": $f1107d94c09df9b8$exports,
  "sk-SK": $b61325f242fafc7c$exports,
  "sl-SI": $f44b7cf39ac8f315$exports,
  "sr-SP": $aa8cd83fc8d4982b$exports,
  "sv-SE": $7c4f4e5bb7c06f1e$exports,
  "tr-TR": $8045cf930ef745aa$exports,
  "uk-UA": $ee2044a77f24b118$exports,
  "zh-CN": $4e1dbc65a687dd93$exports,
  "zh-TW": $b0fef28529309aa6$exports
};
var $40297c24c53588e6$var$generateRGB_R = (orientation, dir, zValue) => {
  let maskImage = `linear-gradient(to ${orientation[Number(!dir)]}, transparent, #000)`;
  let result = {
    colorAreaStyles: {
      backgroundImage: `linear-gradient(to ${orientation[Number(dir)]},rgb(${zValue},0,0),rgb(${zValue},255,0))`
    },
    gradientStyles: {
      backgroundImage: `linear-gradient(to ${orientation[Number(dir)]},rgb(${zValue},0,255),rgb(${zValue},255,255))`,
      "WebkitMaskImage": maskImage,
      maskImage
    }
  };
  return result;
};
var $40297c24c53588e6$var$generateRGB_G = (orientation, dir, zValue) => {
  let maskImage = `linear-gradient(to ${orientation[Number(!dir)]}, transparent, #000)`;
  let result = {
    colorAreaStyles: {
      backgroundImage: `linear-gradient(to ${orientation[Number(dir)]},rgb(0,${zValue},0),rgb(255,${zValue},0))`
    },
    gradientStyles: {
      backgroundImage: `linear-gradient(to ${orientation[Number(dir)]},rgb(0,${zValue},255),rgb(255,${zValue},255))`,
      "WebkitMaskImage": maskImage,
      maskImage
    }
  };
  return result;
};
var $40297c24c53588e6$var$generateRGB_B = (orientation, dir, zValue) => {
  let maskImage = `linear-gradient(to ${orientation[Number(!dir)]}, transparent, #000)`;
  let result = {
    colorAreaStyles: {
      backgroundImage: `linear-gradient(to ${orientation[Number(dir)]},rgb(0,0,${zValue}),rgb(255,0,${zValue}))`
    },
    gradientStyles: {
      backgroundImage: `linear-gradient(to ${orientation[Number(dir)]},rgb(0,255,${zValue}),rgb(255,255,${zValue}))`,
      "WebkitMaskImage": maskImage,
      maskImage
    }
  };
  return result;
};
var $40297c24c53588e6$var$generateHSL_H = (orientation, dir, zValue) => {
  let result = {
    colorAreaStyles: {},
    gradientStyles: {
      background: [
        `linear-gradient(to ${orientation[Number(dir)]}, hsla(0,0%,0%,1) 0%, hsla(0,0%,0%,0) 50%, hsla(0,0%,100%,0) 50%, hsla(0,0%,100%,1) 100%)`,
        `linear-gradient(to ${orientation[Number(!dir)]},hsl(0,0%,50%),hsla(0,0%,50%,0))`,
        `hsl(${zValue}, 100%, 50%)`
      ].join(",")
    }
  };
  return result;
};
var $40297c24c53588e6$var$generateHSL_S = (orientation, dir, alphaValue) => {
  let result = {
    colorAreaStyles: {},
    gradientStyles: {
      background: [
        `linear-gradient(to ${orientation[Number(!dir)]}, hsla(0,0%,0%,${alphaValue}) 0%, hsla(0,0%,0%,0) 50%, hsla(0,0%,100%,0) 50%, hsla(0,0%,100%,${alphaValue}) 100%)`,
        `linear-gradient(to ${orientation[Number(dir)]},hsla(0,100%,50%,${alphaValue}),hsla(60,100%,50%,${alphaValue}),hsla(120,100%,50%,${alphaValue}),hsla(180,100%,50%,${alphaValue}),hsla(240,100%,50%,${alphaValue}),hsla(300,100%,50%,${alphaValue}),hsla(359,100%,50%,${alphaValue}))`,
        "hsl(0, 0%, 50%)"
      ].join(",")
    }
  };
  return result;
};
var $40297c24c53588e6$var$generateHSL_L = (orientation, dir, zValue) => {
  let result = {
    colorAreaStyles: {},
    gradientStyles: {
      backgroundImage: [
        `linear-gradient(to ${orientation[Number(!dir)]},hsl(0,0%,${zValue}%),hsla(0,0%,${zValue}%,0))`,
        `linear-gradient(to ${orientation[Number(dir)]},hsl(0,100%,${zValue}%),hsl(60,100%,${zValue}%),hsl(120,100%,${zValue}%),hsl(180,100%,${zValue}%),hsl(240,100%,${zValue}%),hsl(300,100%,${zValue}%),hsl(360,100%,${zValue}%))`
      ].join(",")
    }
  };
  return result;
};
var $40297c24c53588e6$var$generateHSB_H = (orientation, dir, zValue) => {
  let result = {
    colorAreaStyles: {},
    gradientStyles: {
      background: [
        `linear-gradient(to ${orientation[Number(dir)]},hsl(0,0%,0%),hsla(0,0%,0%,0))`,
        `linear-gradient(to ${orientation[Number(!dir)]},hsl(0,0%,100%),hsla(0,0%,100%,0))`,
        `hsl(${zValue}, 100%, 50%)`
      ].join(",")
    }
  };
  return result;
};
var $40297c24c53588e6$var$generateHSB_S = (orientation, dir, alphaValue) => {
  let result = {
    colorAreaStyles: {},
    gradientStyles: {
      background: [
        `linear-gradient(to ${orientation[Number(!dir)]},hsla(0,0%,0%,${alphaValue}),hsla(0,0%,0%,0))`,
        `linear-gradient(to ${orientation[Number(dir)]},hsla(0,100%,50%,${alphaValue}),hsla(60,100%,50%,${alphaValue}),hsla(120,100%,50%,${alphaValue}),hsla(180,100%,50%,${alphaValue}),hsla(240,100%,50%,${alphaValue}),hsla(300,100%,50%,${alphaValue}),hsla(359,100%,50%,${alphaValue}))`,
        `linear-gradient(to ${orientation[Number(!dir)]},hsl(0,0%,0%),hsl(0,0%,100%))`
      ].join(",")
    }
  };
  return result;
};
var $40297c24c53588e6$var$generateHSB_B = (orientation, dir, alphaValue) => {
  let result = {
    colorAreaStyles: {},
    gradientStyles: {
      background: [
        `linear-gradient(to ${orientation[Number(!dir)]},hsla(0,0%,100%,${alphaValue}),hsla(0,0%,100%,0))`,
        `linear-gradient(to ${orientation[Number(dir)]},hsla(0,100%,50%,${alphaValue}),hsla(60,100%,50%,${alphaValue}),hsla(120,100%,50%,${alphaValue}),hsla(180,100%,50%,${alphaValue}),hsla(240,100%,50%,${alphaValue}),hsla(300,100%,50%,${alphaValue}),hsla(359,100%,50%,${alphaValue}))`,
        "#000"
      ].join(",")
    }
  };
  return result;
};
function $40297c24c53588e6$export$dd62420467d245ca({ direction, state, zChannel, xChannel, isDisabled }) {
  let returnVal = (0, import_react.useMemo)(() => {
    let orientation = [
      "top",
      direction === "rtl" ? "left" : "right"
    ];
    let dir = false;
    let background = {
      colorAreaStyles: {},
      gradientStyles: {}
    };
    let zValue = state.value.getChannelValue(zChannel);
    let { minValue: zMin, maxValue: zMax } = state.value.getChannelRange(zChannel);
    let alphaValue = (zValue - zMin) / (zMax - zMin);
    let isHSL = state.value.getColorSpace() === "hsl";
    if (!isDisabled)
      switch (zChannel) {
        case "red":
          dir = xChannel === "green";
          background = $40297c24c53588e6$var$generateRGB_R(orientation, dir, zValue);
          break;
        case "green":
          dir = xChannel === "red";
          background = $40297c24c53588e6$var$generateRGB_G(orientation, dir, zValue);
          break;
        case "blue":
          dir = xChannel === "red";
          background = $40297c24c53588e6$var$generateRGB_B(orientation, dir, zValue);
          break;
        case "hue":
          dir = xChannel !== "saturation";
          if (isHSL)
            background = $40297c24c53588e6$var$generateHSL_H(orientation, dir, zValue);
          else
            background = $40297c24c53588e6$var$generateHSB_H(orientation, dir, zValue);
          break;
        case "saturation":
          dir = xChannel === "hue";
          if (isHSL)
            background = $40297c24c53588e6$var$generateHSL_S(orientation, dir, alphaValue);
          else
            background = $40297c24c53588e6$var$generateHSB_S(orientation, dir, alphaValue);
          break;
        case "brightness":
          dir = xChannel === "hue";
          background = $40297c24c53588e6$var$generateHSB_B(orientation, dir, alphaValue);
          break;
        case "lightness":
          dir = xChannel === "hue";
          background = $40297c24c53588e6$var$generateHSL_L(orientation, dir, zValue);
          break;
      }
    let { x, y } = state.getThumbPosition();
    if (direction === "rtl")
      x = 1 - x;
    return {
      colorAreaStyleProps: {
        style: __spreadValues({
          position: "relative",
          touchAction: "none"
        }, background.colorAreaStyles)
      },
      gradientStyleProps: {
        style: __spreadValues({
          touchAction: "none"
        }, background.gradientStyles)
      },
      thumbStyleProps: {
        style: {
          position: "absolute",
          left: `${x * 100}%`,
          top: `${y * 100}%`,
          transform: "translate(0%, 0%)",
          touchAction: "none"
        }
      }
    };
  }, [
    direction,
    state,
    zChannel,
    xChannel,
    isDisabled
  ]);
  return returnVal;
}
function $60bd7d6e45dcddfa$export$2f92a7a615a014f6(props, state) {
  let { isDisabled, inputXRef, inputYRef, containerRef } = props;
  let formatMessage = $321bc95feeb923dd$export$ec23bf898b1eed85($parcel$interopDefault($052cfdf4c32eb7c3$exports));
  let { addGlobalListener, removeGlobalListener } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
  let { direction, locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let focusedInputRef = (0, import_react.useRef)(null);
  let focusInput = (0, import_react.useCallback)((inputRef = inputXRef) => {
    if (inputRef.current)
      $7215afc6de606d6b$export$de79e2c695e052f3(inputRef.current);
  }, [
    inputXRef
  ]);
  let stateRef = (0, import_react.useRef)(null);
  stateRef.current = state;
  let { xChannel, yChannel, zChannel } = stateRef.current.channels;
  let xChannelStep1 = stateRef.current.xChannelStep;
  let yChannelStep1 = stateRef.current.yChannelStep;
  let currentPosition = (0, import_react.useRef)(null);
  let { keyboardProps } = $46d819fcbaf35654$export$8f71654801c2f7cd({
    onKeyDown(e) {
      if (!/^(PageUp|PageDown|Home|End)$/.test(e.key)) {
        e.continuePropagation();
        return;
      }
      e.preventDefault();
      stateRef.current.setDragging(true);
      switch (e.key) {
        case "PageUp":
          stateRef.current.incrementY(stateRef.current.yChannelPageStep);
          focusedInputRef.current = inputYRef.current;
          break;
        case "PageDown":
          stateRef.current.decrementY(stateRef.current.yChannelPageStep);
          focusedInputRef.current = inputYRef.current;
          break;
        case "Home":
          direction === "rtl" ? stateRef.current.incrementX(stateRef.current.xChannelPageStep) : stateRef.current.decrementX(stateRef.current.xChannelPageStep);
          focusedInputRef.current = inputXRef.current;
          break;
        case "End":
          direction === "rtl" ? stateRef.current.decrementX(stateRef.current.xChannelPageStep) : stateRef.current.incrementX(stateRef.current.xChannelPageStep);
          focusedInputRef.current = inputXRef.current;
          break;
      }
      stateRef.current.setDragging(false);
      if (focusedInputRef.current) {
        focusInput(focusedInputRef.current ? focusedInputRef : inputXRef);
        focusedInputRef.current = void 0;
      }
    }
  });
  let moveHandler = {
    onMoveStart() {
      currentPosition.current = null;
      stateRef.current.setDragging(true);
    },
    onMove({ deltaX, deltaY, pointerType, shiftKey }) {
      let { incrementX, decrementX, incrementY, decrementY, xChannelPageStep, xChannelStep, yChannelPageStep, yChannelStep, getThumbPosition, setColorFromPoint } = stateRef.current;
      if (currentPosition.current == null)
        currentPosition.current = getThumbPosition();
      let { width, height } = containerRef.current.getBoundingClientRect();
      if (pointerType === "keyboard") {
        let deltaXValue = shiftKey && xChannelPageStep > xChannelStep ? xChannelPageStep : xChannelStep;
        let deltaYValue = shiftKey && yChannelPageStep > yChannelStep ? yChannelPageStep : yChannelStep;
        if (deltaX > 0 && direction === "ltr" || deltaX < 0 && direction === "rtl")
          incrementX(deltaXValue);
        else if (deltaX < 0 && direction === "ltr" || deltaX > 0 && direction === "rtl")
          decrementX(deltaXValue);
        else if (deltaY > 0)
          decrementY(deltaYValue);
        else if (deltaY < 0)
          incrementY(deltaYValue);
        focusedInputRef.current = (deltaX !== 0 || deltaY !== 0) && Math.abs(deltaY) > Math.abs(deltaX) ? inputYRef.current : inputXRef.current;
      } else {
        currentPosition.current.x += (direction === "rtl" ? -1 : 1) * deltaX / width;
        currentPosition.current.y += deltaY / height;
        setColorFromPoint(currentPosition.current.x, currentPosition.current.y);
      }
    },
    onMoveEnd() {
      isOnColorArea.current = void 0;
      stateRef.current.setDragging(false);
      focusInput(focusedInputRef.current ? focusedInputRef : inputXRef);
      focusedInputRef.current = void 0;
    }
  };
  let { moveProps: movePropsThumb } = $e8a7022cf87cba2a$export$36da96379f79f245(moveHandler);
  let currentPointer = (0, import_react.useRef)(void 0);
  let isOnColorArea = (0, import_react.useRef)(false);
  let { moveProps: movePropsContainer } = $e8a7022cf87cba2a$export$36da96379f79f245({
    onMoveStart() {
      if (isOnColorArea.current)
        moveHandler.onMoveStart();
    },
    onMove(e) {
      if (isOnColorArea.current)
        moveHandler.onMove(e);
    },
    onMoveEnd() {
      if (isOnColorArea.current)
        moveHandler.onMoveEnd();
    }
  });
  let onThumbDown = (id) => {
    if (!state.isDragging) {
      currentPointer.current = id;
      focusInput();
      state.setDragging(true);
      if (typeof PointerEvent !== "undefined")
        addGlobalListener(window, "pointerup", onThumbUp, false);
      else {
        addGlobalListener(window, "mouseup", onThumbUp, false);
        addGlobalListener(window, "touchend", onThumbUp, false);
      }
    }
  };
  let onThumbUp = (e) => {
    var ref;
    var _pointerId;
    let id = (_pointerId = e.pointerId) !== null && _pointerId !== void 0 ? _pointerId : (ref = e.changedTouches) === null || ref === void 0 ? void 0 : ref[0].identifier;
    if (id === currentPointer.current) {
      focusInput();
      state.setDragging(false);
      currentPointer.current = void 0;
      isOnColorArea.current = false;
      if (typeof PointerEvent !== "undefined")
        removeGlobalListener(window, "pointerup", onThumbUp, false);
      else {
        removeGlobalListener(window, "mouseup", onThumbUp, false);
        removeGlobalListener(window, "touchend", onThumbUp, false);
      }
    }
  };
  let onColorAreaDown = (colorArea, id, clientX, clientY) => {
    let rect = colorArea.getBoundingClientRect();
    let { width, height } = rect;
    let x = (clientX - rect.x) / width;
    let y = (clientY - rect.y) / height;
    if (direction === "rtl")
      x = 1 - x;
    if (x >= 0 && x <= 1 && y >= 0 && y <= 1 && !state.isDragging && currentPointer.current === void 0) {
      isOnColorArea.current = true;
      currentPointer.current = id;
      state.setColorFromPoint(x, y);
      focusInput();
      state.setDragging(true);
      if (typeof PointerEvent !== "undefined")
        addGlobalListener(window, "pointerup", onColorAreaUp, false);
      else {
        addGlobalListener(window, "mouseup", onColorAreaUp, false);
        addGlobalListener(window, "touchend", onColorAreaUp, false);
      }
    }
  };
  let onColorAreaUp = (e) => {
    var ref;
    var _pointerId;
    let id = (_pointerId = e.pointerId) !== null && _pointerId !== void 0 ? _pointerId : (ref = e.changedTouches) === null || ref === void 0 ? void 0 : ref[0].identifier;
    if (isOnColorArea.current && id === currentPointer.current) {
      isOnColorArea.current = false;
      currentPointer.current = void 0;
      state.setDragging(false);
      focusInput();
      if (typeof PointerEvent !== "undefined")
        removeGlobalListener(window, "pointerup", onColorAreaUp, false);
      else {
        removeGlobalListener(window, "mouseup", onColorAreaUp, false);
        removeGlobalListener(window, "touchend", onColorAreaUp, false);
      }
    }
  };
  let colorAreaInteractions = isDisabled ? {} : $3ef42575df84b30b$export$9d1611c77c2fe928(__spreadValues({}, typeof PointerEvent !== "undefined" ? {
    onPointerDown: (e) => {
      if (e.pointerType === "mouse" && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey))
        return;
      onColorAreaDown(e.currentTarget, e.pointerId, e.clientX, e.clientY);
    }
  } : {
    onMouseDown: (e) => {
      if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)
        return;
      onColorAreaDown(e.currentTarget, void 0, e.clientX, e.clientY);
    },
    onTouchStart: (e) => {
      onColorAreaDown(e.currentTarget, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY);
    }
  }), movePropsContainer);
  let thumbInteractions = isDisabled ? {} : $3ef42575df84b30b$export$9d1611c77c2fe928(__spreadValues({}, typeof PointerEvent !== "undefined" ? {
    onPointerDown: (e) => {
      if (e.pointerType === "mouse" && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey))
        return;
      onThumbDown(e.pointerId);
    }
  } : {
    onMouseDown: (e) => {
      if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)
        return;
      onThumbDown(void 0);
    },
    onTouchStart: (e) => {
      onThumbDown(e.changedTouches[0].identifier);
    }
  }), keyboardProps, movePropsThumb);
  let isMobile = $c87311424ea30a05$export$fedb369cb70207f1() || $c87311424ea30a05$export$a11b0059900ceec8();
  let xInputLabellingProps = $313b98861ee5dd6c$export$d6875122194c7b44(__spreadProps(__spreadValues({}, props), {
    "aria-label": isMobile ? state.value.getChannelName(xChannel, locale) : formatMessage("x/y", {
      x: state.value.getChannelName(xChannel, locale),
      y: state.value.getChannelName(yChannel, locale)
    })
  }));
  let yInputLabellingProps = $313b98861ee5dd6c$export$d6875122194c7b44(__spreadProps(__spreadValues({}, props), {
    "aria-label": isMobile ? state.value.getChannelName(yChannel, locale) : formatMessage("x/y", {
      x: state.value.getChannelName(xChannel, locale),
      y: state.value.getChannelName(yChannel, locale)
    })
  }));
  let colorAriaLabellingProps = $313b98861ee5dd6c$export$d6875122194c7b44(props);
  let getValueTitle = () => {
    const channels = state.value.getColorChannels();
    const colorNamesAndValues = [];
    channels.forEach((channel) => colorNamesAndValues.push(formatMessage("colorNameAndValue", {
      name: state.value.getChannelName(channel, locale),
      value: state.value.formatChannelValue(channel, locale)
    })));
    return colorNamesAndValues.length ? colorNamesAndValues.join(", ") : null;
  };
  let ariaRoleDescription = isMobile ? null : formatMessage("twoDimensionalSlider");
  let { visuallyHiddenProps } = $5c3e21d68f1c4674$export$a966af930f325cab({
    style: {
      opacity: "0.0001",
      width: "100%",
      height: "100%",
      pointerEvents: "none"
    }
  });
  let { colorAreaStyleProps, gradientStyleProps, thumbStyleProps } = $40297c24c53588e6$export$dd62420467d245ca({
    direction,
    state,
    xChannel,
    zChannel,
    isDisabled: props.isDisabled
  });
  return {
    colorAreaProps: __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, colorAriaLabellingProps), colorAreaInteractions), colorAreaStyleProps), {
      role: "group"
    }),
    gradientProps: __spreadProps(__spreadValues({}, gradientStyleProps), {
      role: "presentation"
    }),
    thumbProps: __spreadProps(__spreadValues(__spreadValues({}, thumbInteractions), thumbStyleProps), {
      role: "presentation"
    }),
    xInputProps: __spreadProps(__spreadValues(__spreadValues({}, xInputLabellingProps), visuallyHiddenProps), {
      type: "range",
      min: state.value.getChannelRange(xChannel).minValue,
      max: state.value.getChannelRange(xChannel).maxValue,
      step: xChannelStep1,
      "aria-roledescription": ariaRoleDescription,
      "aria-valuetext": isMobile ? formatMessage("colorNameAndValue", {
        name: state.value.getChannelName(xChannel, locale),
        value: state.value.formatChannelValue(xChannel, locale)
      }) : [
        formatMessage("colorNameAndValue", {
          name: state.value.getChannelName(xChannel, locale),
          value: state.value.formatChannelValue(xChannel, locale)
        }),
        formatMessage("colorNameAndValue", {
          name: state.value.getChannelName(yChannel, locale),
          value: state.value.formatChannelValue(yChannel, locale)
        })
      ].join(", "),
      title: getValueTitle(),
      disabled: isDisabled,
      value: state.value.getChannelValue(xChannel),
      tabIndex: 0,
      onChange: (e) => {
        state.setXValue(parseFloat(e.target.value));
      }
    }),
    yInputProps: __spreadProps(__spreadValues(__spreadValues({}, yInputLabellingProps), visuallyHiddenProps), {
      type: "range",
      min: state.value.getChannelRange(yChannel).minValue,
      max: state.value.getChannelRange(yChannel).maxValue,
      step: yChannelStep1,
      "aria-roledescription": ariaRoleDescription,
      "aria-valuetext": isMobile ? formatMessage("colorNameAndValue", {
        name: state.value.getChannelName(yChannel, locale),
        value: state.value.formatChannelValue(yChannel, locale)
      }) : [
        formatMessage("colorNameAndValue", {
          name: state.value.getChannelName(yChannel, locale),
          value: state.value.formatChannelValue(yChannel, locale)
        }),
        formatMessage("colorNameAndValue", {
          name: state.value.getChannelName(xChannel, locale),
          value: state.value.formatChannelValue(xChannel, locale)
        })
      ].join(", "),
      "aria-orientation": "vertical",
      title: getValueTitle(),
      disabled: isDisabled,
      value: state.value.getChannelValue(yChannel),
      tabIndex: -1,
      onChange: (e) => {
        state.setYValue(parseFloat(e.target.value));
      }
    })
  };
}
var $40af666d6c251e36$exports = {};
$parcel$export($40af666d6c251e36$exports, "useColorSlider", () => $40af666d6c251e36$export$106b7a4e66508f66);
function $40af666d6c251e36$export$106b7a4e66508f66(props, state) {
  let { trackRef, inputRef, orientation, channel, "aria-label": ariaLabel } = props;
  let { locale, direction } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  if (!props.label && !ariaLabel && !props["aria-labelledby"])
    ariaLabel = state.value.getChannelName(channel, locale);
  let { groupProps, trackProps, labelProps, outputProps } = $bcca50147b47f54d$export$56b2c08e277f365(__spreadProps(__spreadValues({}, props), {
    "aria-label": ariaLabel
  }), state, trackRef);
  let { inputProps, thumbProps } = $47b897dc8cdb026b$export$8d15029008292ae({
    index: 0,
    orientation,
    isDisabled: props.isDisabled,
    trackRef,
    inputRef
  }, state);
  let generateBackground = () => {
    let value = state.getDisplayColor();
    let to;
    if (orientation === "vertical")
      to = "top";
    else if (direction === "ltr")
      to = "right";
    else
      to = "left";
    switch (channel) {
      case "hue":
        return `linear-gradient(to ${to}, rgb(255, 0, 0) 0%, rgb(255, 255, 0) 17%, rgb(0, 255, 0) 33%, rgb(0, 255, 255) 50%, rgb(0, 0, 255) 67%, rgb(255, 0, 255) 83%, rgb(255, 0, 0) 100%)`;
      case "lightness": {
        let min = state.getThumbMinValue(0);
        let max = state.getThumbMaxValue(0);
        let start = value.withChannelValue(channel, min).toString("css");
        let middle = value.withChannelValue(channel, (max - min) / 2).toString("css");
        let end = value.withChannelValue(channel, max).toString("css");
        return `linear-gradient(to ${to}, ${start}, ${middle}, ${end})`;
      }
      case "saturation":
      case "brightness":
      case "red":
      case "green":
      case "blue":
      case "alpha": {
        let start = value.withChannelValue(channel, state.getThumbMinValue(0)).toString("css");
        let end = value.withChannelValue(channel, state.getThumbMaxValue(0)).toString("css");
        return `linear-gradient(to ${to}, ${start}, ${end})`;
      }
      default:
        throw new Error("Unknown color channel: " + channel);
    }
  };
  let thumbPosition = state.getThumbPercent(0);
  if (orientation === "vertical" || direction === "rtl")
    thumbPosition = 1 - thumbPosition;
  return {
    trackProps: __spreadProps(__spreadValues({}, $3ef42575df84b30b$export$9d1611c77c2fe928(groupProps, trackProps)), {
      style: {
        position: "relative",
        touchAction: "none",
        background: generateBackground()
      }
    }),
    inputProps,
    thumbProps: __spreadProps(__spreadValues({}, thumbProps), {
      style: {
        touchAction: "none",
        position: "absolute",
        [orientation === "vertical" ? "top" : "left"]: `${thumbPosition * 100}%`,
        transform: "translate(-50%, -50%)"
      }
    }),
    labelProps,
    outputProps
  };
}
var $b4a0a4fdc900495e$exports = {};
$parcel$export($b4a0a4fdc900495e$exports, "useColorWheel", () => $b4a0a4fdc900495e$export$9064ff4e44b3729a);
function $b4a0a4fdc900495e$export$9064ff4e44b3729a(props, state, inputRef) {
  let { isDisabled, innerRadius, outerRadius, "aria-label": ariaLabel } = props;
  let { addGlobalListener, removeGlobalListener } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
  let thumbRadius = (innerRadius + outerRadius) / 2;
  let focusInput = (0, import_react.useCallback)(() => {
    if (inputRef.current)
      $7215afc6de606d6b$export$de79e2c695e052f3(inputRef.current);
  }, [
    inputRef
  ]);
  let stateRef = (0, import_react.useRef)(null);
  stateRef.current = state;
  let currentPosition = (0, import_react.useRef)(null);
  let { keyboardProps } = $46d819fcbaf35654$export$8f71654801c2f7cd({
    onKeyDown(e) {
      if (!/^(PageUp|PageDown)$/.test(e.key)) {
        e.continuePropagation();
        return;
      }
      e.preventDefault();
      stateRef.current.setDragging(true);
      switch (e.key) {
        case "PageUp":
          e.preventDefault();
          state.increment(stateRef.current.pageStep);
          break;
        case "PageDown":
          e.preventDefault();
          state.decrement(stateRef.current.pageStep);
          break;
      }
      stateRef.current.setDragging(false);
    }
  });
  let moveHandler = {
    onMoveStart() {
      currentPosition.current = null;
      state.setDragging(true);
    },
    onMove({ deltaX, deltaY, pointerType, shiftKey }) {
      if (currentPosition.current == null)
        currentPosition.current = stateRef.current.getThumbPosition(thumbRadius);
      currentPosition.current.x += deltaX;
      currentPosition.current.y += deltaY;
      if (pointerType === "keyboard") {
        if (deltaX > 0 || deltaY < 0)
          state.increment(shiftKey ? stateRef.current.pageStep : stateRef.current.step);
        else if (deltaX < 0 || deltaY > 0)
          state.decrement(shiftKey ? stateRef.current.pageStep : stateRef.current.step);
      } else
        stateRef.current.setHueFromPoint(currentPosition.current.x, currentPosition.current.y, thumbRadius);
    },
    onMoveEnd() {
      isOnTrack.current = void 0;
      state.setDragging(false);
      focusInput();
    }
  };
  let { moveProps: movePropsThumb } = $e8a7022cf87cba2a$export$36da96379f79f245(moveHandler);
  let currentPointer = (0, import_react.useRef)(void 0);
  let isOnTrack = (0, import_react.useRef)(false);
  let { moveProps: movePropsContainer } = $e8a7022cf87cba2a$export$36da96379f79f245({
    onMoveStart() {
      if (isOnTrack.current)
        moveHandler.onMoveStart();
    },
    onMove(e) {
      if (isOnTrack.current)
        moveHandler.onMove(e);
    },
    onMoveEnd() {
      if (isOnTrack.current)
        moveHandler.onMoveEnd();
    }
  });
  let onThumbDown = (id) => {
    if (!state.isDragging) {
      currentPointer.current = id;
      focusInput();
      state.setDragging(true);
      if (typeof PointerEvent !== "undefined")
        addGlobalListener(window, "pointerup", onThumbUp, false);
      else {
        addGlobalListener(window, "mouseup", onThumbUp, false);
        addGlobalListener(window, "touchend", onThumbUp, false);
      }
    }
  };
  let onThumbUp = (e) => {
    var ref;
    var _pointerId;
    let id = (_pointerId = e.pointerId) !== null && _pointerId !== void 0 ? _pointerId : (ref = e.changedTouches) === null || ref === void 0 ? void 0 : ref[0].identifier;
    if (id === currentPointer.current) {
      focusInput();
      state.setDragging(false);
      currentPointer.current = void 0;
      isOnTrack.current = false;
      if (typeof PointerEvent !== "undefined")
        removeGlobalListener(window, "pointerup", onThumbUp, false);
      else {
        removeGlobalListener(window, "mouseup", onThumbUp, false);
        removeGlobalListener(window, "touchend", onThumbUp, false);
      }
    }
  };
  let onTrackDown = (track, id, pageX, pageY) => {
    let rect = track.getBoundingClientRect();
    let x = pageX - rect.x - rect.width / 2;
    let y = pageY - rect.y - rect.height / 2;
    let radius = Math.sqrt(x * x + y * y);
    if (innerRadius < radius && radius < outerRadius && !state.isDragging && currentPointer.current === void 0) {
      isOnTrack.current = true;
      currentPointer.current = id;
      stateRef.current.setHueFromPoint(x, y, radius);
      focusInput();
      state.setDragging(true);
      if (typeof PointerEvent !== "undefined")
        addGlobalListener(window, "pointerup", onTrackUp, false);
      else {
        addGlobalListener(window, "mouseup", onTrackUp, false);
        addGlobalListener(window, "touchend", onTrackUp, false);
      }
    }
  };
  let onTrackUp = (e) => {
    var ref;
    var _pointerId;
    let id = (_pointerId = e.pointerId) !== null && _pointerId !== void 0 ? _pointerId : (ref = e.changedTouches) === null || ref === void 0 ? void 0 : ref[0].identifier;
    if (isOnTrack.current && id === currentPointer.current) {
      isOnTrack.current = false;
      currentPointer.current = void 0;
      state.setDragging(false);
      focusInput();
      if (typeof PointerEvent !== "undefined")
        removeGlobalListener(window, "pointerup", onTrackUp, false);
      else {
        removeGlobalListener(window, "mouseup", onTrackUp, false);
        removeGlobalListener(window, "touchend", onTrackUp, false);
      }
    }
  };
  let trackInteractions = isDisabled ? {} : $3ef42575df84b30b$export$9d1611c77c2fe928(__spreadValues({}, typeof PointerEvent !== "undefined" ? {
    onPointerDown: (e) => {
      if (e.pointerType === "mouse" && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey))
        return;
      onTrackDown(e.currentTarget, e.pointerId, e.clientX, e.clientY);
    }
  } : {
    onMouseDown: (e) => {
      if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)
        return;
      onTrackDown(e.currentTarget, void 0, e.clientX, e.clientY);
    },
    onTouchStart: (e) => {
      onTrackDown(e.currentTarget, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY);
    }
  }), movePropsContainer);
  let thumbInteractions = isDisabled ? {} : $3ef42575df84b30b$export$9d1611c77c2fe928({
    onMouseDown: (e) => {
      if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)
        return;
      onThumbDown(void 0);
    },
    onPointerDown: (e) => {
      if (e.pointerType === "mouse" && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey))
        return;
      onThumbDown(e.pointerId);
    },
    onTouchStart: (e) => {
      onThumbDown(e.changedTouches[0].identifier);
    }
  }, keyboardProps, movePropsThumb);
  let { x: x1, y: y1 } = state.getThumbPosition(thumbRadius);
  let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  if (ariaLabel == null && props["aria-labelledby"] == null)
    ariaLabel = state.value.getChannelName("hue", locale);
  let inputLabellingProps = $313b98861ee5dd6c$export$d6875122194c7b44(__spreadProps(__spreadValues({}, props), {
    "aria-label": ariaLabel
  }));
  let { minValue, maxValue, step } = state.value.getChannelRange("hue");
  return {
    trackProps: __spreadProps(__spreadValues({}, trackInteractions), {
      style: {
        position: "relative",
        touchAction: "none",
        width: outerRadius * 2,
        height: outerRadius * 2,
        background: `
          conic-gradient(
            from 90deg,
            hsl(0, 100%, 50%),
            hsl(30, 100%, 50%),
            hsl(60, 100%, 50%),
            hsl(90, 100%, 50%),
            hsl(120, 100%, 50%),
            hsl(150, 100%, 50%),
            hsl(180, 100%, 50%),
            hsl(210, 100%, 50%),
            hsl(240, 100%, 50%),
            hsl(270, 100%, 50%),
            hsl(300, 100%, 50%),
            hsl(330, 100%, 50%),
            hsl(360, 100%, 50%)
          )
        `,
        clipPath: `path(evenodd, "${$b4a0a4fdc900495e$var$circlePath(outerRadius, outerRadius, outerRadius)} ${$b4a0a4fdc900495e$var$circlePath(outerRadius, outerRadius, innerRadius)}")`
      }
    }),
    thumbProps: __spreadProps(__spreadValues({}, thumbInteractions), {
      style: {
        position: "absolute",
        left: "50%",
        top: "50%",
        transform: `translate(calc(${x1}px - 50%), calc(${y1}px - 50%))`,
        touchAction: "none"
      }
    }),
    inputProps: $3ef42575df84b30b$export$9d1611c77c2fe928(inputLabellingProps, {
      type: "range",
      min: String(minValue),
      max: String(maxValue),
      step: String(step),
      "aria-valuetext": state.value.formatChannelValue("hue", locale),
      disabled: isDisabled,
      value: `${state.value.getChannelValue("hue")}`,
      onChange: (e) => {
        state.setHue(parseFloat(e.target.value));
      }
    })
  };
}
function $b4a0a4fdc900495e$var$circlePath(cx, cy, r) {
  return `M ${cx}, ${cy} m ${-r}, 0 a ${r}, ${r}, 0, 1, 0, ${r * 2}, 0 a ${r}, ${r}, 0, 1, 0 ${-r * 2}, 0`;
}
var $f6896b05b2ecad12$exports = {};
$parcel$export($f6896b05b2ecad12$exports, "useColorField", () => $f6896b05b2ecad12$export$77e32ca575a28fdf);
function $f6896b05b2ecad12$export$77e32ca575a28fdf(props, state, ref) {
  let { isDisabled, isReadOnly, isRequired } = props;
  let { colorValue, inputValue, commit, increment, decrement, incrementToMax, decrementToMin } = state;
  let inputId = $bdb11010cef70236$export$f680877a34711e37();
  let { spinButtonProps } = $d2e8511e6f209edf$export$e908e06f4b8e3402({
    isDisabled,
    isReadOnly,
    isRequired,
    maxValue: 16777215,
    minValue: 0,
    onIncrement: increment,
    onIncrementToMax: incrementToMax,
    onDecrement: decrement,
    onDecrementToMin: decrementToMin,
    value: colorValue ? colorValue.toHexInt() : void 0,
    textValue: colorValue ? colorValue.toString("hex") : void 0
  });
  let [focusWithin, setFocusWithin] = (0, import_react.useState)(false);
  let { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
    isDisabled,
    onFocusWithinChange: setFocusWithin
  });
  let onWheel = (0, import_react.useCallback)((e) => {
    if (Math.abs(e.deltaY) <= Math.abs(e.deltaX))
      return;
    if (e.deltaY > 0)
      increment();
    else if (e.deltaY < 0)
      decrement();
  }, [
    decrement,
    increment
  ]);
  let scrollingDisabled = isDisabled || isReadOnly || !focusWithin;
  $7d0a636d7a4dcefd$export$2123ff2b87c81ca({
    onScroll: onWheel,
    isDisabled: scrollingDisabled
  }, ref);
  let onChange = (value) => {
    state.setInputValue(value);
  };
  let { labelProps, inputProps } = $d841c8010a73d545$export$4f384c9210e583c3($3ef42575df84b30b$export$9d1611c77c2fe928(props, {
    id: inputId,
    value: inputValue,
    defaultValue: void 0,
    type: "text",
    autoComplete: "off",
    onChange
  }), state, ref);
  return {
    labelProps,
    inputProps: $3ef42575df84b30b$export$9d1611c77c2fe928(inputProps, spinButtonProps, focusWithinProps, {
      role: "textbox",
      "aria-valuemax": null,
      "aria-valuemin": null,
      "aria-valuenow": null,
      "aria-valuetext": null,
      autoCorrect: "off",
      spellCheck: "false",
      onBlur: commit
    })
  };
}

// node_modules/@react-spectrum/color/node_modules/@react-stately/color/dist/module.js
init_module4();
init_module();
init_module2();
var import_react2 = __toESM(require_react());
function $parcel$interopDefault2(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export2(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $7a451c0c6841e6b9$exports = {};
var $2d805fd52bb48883$exports = {};
$2d805fd52bb48883$exports = JSON.parse('{"alpha":"\u0623\u0644\u0641\u0627","blue":"\u0623\u0632\u0631\u0642","brightness":"\u0627\u0644\u0633\u0637\u0648\u0639","green":"\u0623\u062E\u0636\u0631","hue":"\u062F\u0631\u062C\u0629 \u0627\u0644\u0644\u0648\u0646","lightness":"\u0627\u0644\u0625\u0636\u0627\u0621\u0629","red":"\u0623\u062D\u0645\u0631","saturation":"\u0627\u0644\u062A\u0634\u0628\u0639"}');
var $6c28468dc1df643c$exports = {};
$6c28468dc1df643c$exports = JSON.parse('{"alpha":"\u0410\u043B\u0444\u0430","blue":"\u0421\u0438\u043D\u044C\u043E","brightness":"\u042F\u0440\u043A\u043E\u0441\u0442","green":"\u0417\u0435\u043B\u0435\u043D\u043E","hue":"\u041E\u0442\u0442\u0435\u043D\u044A\u043A","lightness":"\u041B\u0435\u043A\u043E\u0442\u0430","red":"\u0427\u0435\u0440\u0432\u0435\u043D\u043E","saturation":"\u041D\u0430\u0441\u0438\u0442\u0435\u043D\u043E\u0441\u0442"}');
var $807554f8230db0ed$exports = {};
$807554f8230db0ed$exports = JSON.parse('{"alpha":"Alfa","blue":"Modr\xE1","brightness":"Jas","green":"Zelen\xE1","hue":"Odst\xEDn","lightness":"Sv\u011Btlost","red":"\u010Cerven\xE1","saturation":"Sytost"}');
var $7097f64386f1761c$exports = {};
$7097f64386f1761c$exports = JSON.parse('{"alpha":"Alfa","blue":"Bl\xE5","brightness":"Lysstyrke","green":"Gr\xF8n","hue":"Tone","lightness":"Lyshed","red":"R\xF8d","saturation":"Farvem\xE6tning"}');
var $bdd847d8beb08799$exports = {};
$bdd847d8beb08799$exports = JSON.parse('{"alpha":"Alpha","blue":"Blau","brightness":"Helligkeit","green":"Gr\xFCn","hue":"Farbton","lightness":"Leuchtkraft","red":"Rot","saturation":"S\xE4ttigung"}');
var $a53e00b683950971$exports = {};
$a53e00b683950971$exports = JSON.parse('{"alpha":"\u0386\u03BB\u03C6\u03B1","blue":"\u039C\u03C0\u03BB\u03B5","brightness":"\u03A6\u03C9\u03C4\u03B5\u03B9\u03BD\u03CC\u03C4\u03B7\u03C4\u03B1","green":"\u03A0\u03C1\u03AC\u03C3\u03B9\u03BD\u03BF","hue":"\u03A4\u03CC\u03BD\u03BF\u03C2","lightness":"\u03A6\u03C9\u03C4\u03B5\u03B9\u03BD\u03CC\u03C4\u03B7\u03C4\u03B1","red":"\u039A\u03CC\u03BA\u03BA\u03B9\u03BD\u03BF","saturation":"\u039A\u03BF\u03C1\u03B5\u03C3\u03BC\u03CC\u03C2"}');
var $21cdd87e84f28d89$exports = {};
$21cdd87e84f28d89$exports = JSON.parse('{"hue":"Hue","saturation":"Saturation","lightness":"Lightness","brightness":"Brightness","red":"Red","green":"Green","blue":"Blue","alpha":"Alpha"}');
var $92fee9698e4d675a$exports = {};
$92fee9698e4d675a$exports = JSON.parse('{"alpha":"Alpha","blue":"Azul","brightness":"Brillo","green":"Verde","hue":"Tono","lightness":"Luminosidad","red":"Rojo","saturation":"Saturaci\xF3n"}');
var $7ea012e91a5ad3ee$exports = {};
$7ea012e91a5ad3ee$exports = JSON.parse('{"alpha":"Alfa","blue":"Sinine","brightness":"Heledus","green":"Roheline","hue":"V\xE4rv","lightness":"Valgus","red":"Punane","saturation":"K\xFCllastus"}');
var $8460c13bb2d75345$exports = {};
$8460c13bb2d75345$exports = JSON.parse('{"alpha":"Alpha","blue":"Sininen","brightness":"Kirkkaus","green":"Vihre\xE4","hue":"S\xE4vy","lightness":"Valom\xE4\xE4r\xE4","red":"Punainen","saturation":"V\xE4rikyll\xE4isyys"}');
var $2a2d5dc14e680587$exports = {};
$2a2d5dc14e680587$exports = JSON.parse('{"alpha":"Alpha","blue":"Bleu","brightness":"Luminosit\xE9","green":"Vert","hue":"Teinte","lightness":"Luminosit\xE9","red":"Rouge","saturation":"Saturation"}');
var $9a3f292371bb0589$exports = {};
$9a3f292371bb0589$exports = JSON.parse('{"alpha":"\u05D0\u05DC\u05E4\u05D0","blue":"\u05DB\u05D7\u05D5\u05DC","brightness":"\u05D1\u05D4\u05D9\u05E8\u05D5\u05EA","green":"\u05D9\u05E8\u05D5\u05E7","hue":"\u05D2\u05D5\u05D5\u05DF","lightness":"\u05DB\u05DE\u05D5\u05EA \u05D0\u05D5\u05E8","red":"\u05D0\u05D3\u05D5\u05DD","saturation":"\u05E8\u05D5\u05D5\u05D9\u05D4"}');
var $4742231a685fa068$exports = {};
$4742231a685fa068$exports = JSON.parse('{"alpha":"Alfa","blue":"Plava","brightness":"Svjetlina","green":"Zelena","hue":"Nijansa","lightness":"Osvijetljenost","red":"Crvena","saturation":"Zasi\u0107enost"}');
var $05e247fd2960981e$exports = {};
$05e247fd2960981e$exports = JSON.parse('{"alpha":"Alfa","blue":"K\xE9k","brightness":"F\xE9nyess\xE9g","green":"Z\xF6ld","hue":"Sz\xEDn\xE1rnyalat","lightness":"Vil\xE1goss\xE1g","red":"Piros","saturation":"Tel\xEDtetts\xE9g"}');
var $a67524a79ccbe190$exports = {};
$a67524a79ccbe190$exports = JSON.parse('{"alpha":"Alfa","blue":"Blu","brightness":"Luminosit\xE0","green":"Verde","hue":"Tonalit\xE0","lightness":"Luminosit\xE0","red":"Rosso","saturation":"Saturazione"}');
var $a9eefe9d6c8cb7d5$exports = {};
$a9eefe9d6c8cb7d5$exports = JSON.parse('{"alpha":"\u30A2\u30EB\u30D5\u30A1","blue":"\u9752","brightness":"\u660E\u308B\u3055","green":"\u7DD1","hue":"\u8272\u76F8","lightness":"\u660E\u5EA6","red":"\u8D64","saturation":"\u5F69\u5EA6"}');
var $4a6b836d4f1bfaba$exports = {};
$4a6b836d4f1bfaba$exports = JSON.parse('{"alpha":"\uC54C\uD30C","blue":"\uD30C\uB791","brightness":"\uBA85\uB3C4","green":"\uCD08\uB85D","hue":"\uC0C9\uC870","lightness":"\uBC1D\uAE30","red":"\uBE68\uAC15","saturation":"\uCC44\uB3C4"}');
var $c950e4b1c482abde$exports = {};
$c950e4b1c482abde$exports = JSON.parse('{"alpha":"Alfa","blue":"M\u0117lyna","brightness":"Ry\u0161kumas","green":"\u017Dalia","hue":"Atspalvis","lightness":"\u0160viesumas","red":"Raudona","saturation":"\u012Esotinimas"}');
var $d10d6b60dc50b438$exports = {};
$d10d6b60dc50b438$exports = JSON.parse('{"alpha":"Alfa","blue":"Zila","brightness":"Spilgtums","green":"Za\u013Ca","hue":"Nokr\u0101sa","lightness":"Gai\u0161ums","red":"Sarkana","saturation":"Pies\u0101tin\u0101jums"}');
var $371a732b2494f452$exports = {};
$371a732b2494f452$exports = JSON.parse('{"alpha":"Alfa","blue":"Bl\xE5","brightness":"Lysstyrke","green":"Gr\xF8nn","hue":"Fargetone","lightness":"Lyshet","red":"R\xF8d","saturation":"Metning"}');
var $6d042cae6243464b$exports = {};
$6d042cae6243464b$exports = JSON.parse('{"alpha":"Alfa","blue":"Blauw","brightness":"Helderheid","green":"Groen","hue":"Kleurtoon","lightness":"Lichtsterkte","red":"Rood","saturation":"Verzadiging"}');
var $d9ab5c2611e0bcd3$exports = {};
$d9ab5c2611e0bcd3$exports = JSON.parse('{"alpha":"Alfa","blue":"Niebieski","brightness":"Jasno\u015B\u0107","green":"Zielony","hue":"Odcie\u0144","lightness":"Jaskrawo\u015B\u0107","red":"Czerwony","saturation":"Nasycenie"}');
var $73f77c9902e29ca6$exports = {};
$73f77c9902e29ca6$exports = JSON.parse('{"alpha":"Alfa","blue":"Azul","brightness":"Brilho","green":"Verde","hue":"Matiz","lightness":"Luminosidade","red":"Vermelho","saturation":"Satura\xE7\xE3o"}');
var $4f461eb266a95c10$exports = {};
$4f461eb266a95c10$exports = JSON.parse('{"alpha":"Alfa","blue":"Azul","brightness":"Luminosidade","green":"Verde","hue":"Tonalidade","lightness":"Claridade","red":"Vermelho","saturation":"Satura\xE7\xE3o"}');
var $dc46bea2f2597899$exports = {};
$dc46bea2f2597899$exports = JSON.parse('{"alpha":"Alfa","blue":"Albastru","brightness":"Luminozitate","green":"Verde","hue":"Nuan\u021B\u0103","lightness":"Luminozitate","red":"Ro\u0219u","saturation":"Satura\u021Bie"}');
var $622bbd6719cc95af$exports = {};
$622bbd6719cc95af$exports = JSON.parse('{"alpha":"\u0410\u043B\u044C\u0444\u0430","blue":"\u0421\u0438\u043D\u0438\u0439","brightness":"\u042F\u0440\u043A\u043E\u0441\u0442\u044C","green":"\u0417\u0435\u043B\u0435\u043D\u044B\u0439","hue":"\u041E\u0442\u0442\u0435\u043D\u043E\u043A","lightness":"\u041E\u0441\u0432\u0435\u0449\u0435\u043D\u043D\u043E\u0441\u0442\u044C","red":"\u041A\u0440\u0430\u0441\u043D\u044B\u0439","saturation":"\u041D\u0430\u0441\u044B\u0449\u0435\u043D\u043D\u043E\u0441\u0442\u044C"}');
var $4da03c1ecd9a9c7d$exports = {};
$4da03c1ecd9a9c7d$exports = JSON.parse('{"alpha":"Alfa","blue":"Modr\xE1","brightness":"Jas","green":"Zelen\xE1","hue":"Odtie\u0148","lightness":"Svetlos\u0165","red":"\u010Cerven\xE1","saturation":"S\xFDtos\u0165"}');
var $edb6b2fe456ed4e8$exports = {};
$edb6b2fe456ed4e8$exports = JSON.parse('{"alpha":"Alfa","blue":"Modra","brightness":"Svetlost","green":"Zelena","hue":"Barva","lightness":"Lahkost","red":"Rde\u010Da","saturation":"Nasi\u010Denost"}');
var $264cd81c52b30815$exports = {};
$264cd81c52b30815$exports = JSON.parse('{"alpha":"Alfa","blue":"Plava","brightness":"Osvetljenost","green":"Zelena","hue":"Nijansa","lightness":"Osvetljenje","red":"Crvena","saturation":"Zasi\u0107enje"}');
var $6f80afde0270dda7$exports = {};
$6f80afde0270dda7$exports = JSON.parse('{"alpha":"Alfa","blue":"Bl\xE5tt","brightness":"Ljusstyrka","green":"Gr\xF6nt","hue":"Nyans","lightness":"Ljushet","red":"R\xF6tt","saturation":"M\xE4ttnad"}');
var $23a92651c6957668$exports = {};
$23a92651c6957668$exports = JSON.parse('{"alpha":"Alfa","blue":"Mavi","brightness":"Parlakl\u0131k","green":"Ye\u015Fil","hue":"Ton","lightness":"Canl\u0131l\u0131k","red":"K\u0131rm\u0131z\u0131","saturation":"Doygunluk"}');
var $0f9b1074d04f4954$exports = {};
$0f9b1074d04f4954$exports = JSON.parse('{"alpha":"\u0410\u043B\u044C\u0444\u0430","blue":"\u0421\u0438\u043D\u0456\u0439","brightness":"\u042F\u0441\u043A\u0440\u0430\u0432\u0456\u0441\u0442\u044C","green":"\u0417\u0435\u043B\u0435\u043D\u0438\u0439","hue":"\u0422\u043E\u043D","lightness":"\u041E\u0441\u0432\u0456\u0442\u043B\u0435\u043D\u0456\u0441\u0442\u044C","red":"\u0427\u0435\u0440\u0432\u043E\u043D\u0438\u0439","saturation":"\u041D\u0430\u0441\u0438\u0447\u0435\u043D\u0456\u0441\u0442\u044C"}');
var $a9cedf75b94e4916$exports = {};
$a9cedf75b94e4916$exports = JSON.parse('{"alpha":"Alpha","blue":"\u84DD\u8272","brightness":"\u4EAE\u5EA6","green":"\u7EFF\u8272","hue":"\u8272\u76F8","lightness":"\u660E\u4EAE\u5EA6","red":"\u7EA2\u8272","saturation":"\u9971\u548C\u5EA6"}');
var $37cff576474bc8d4$exports = {};
$37cff576474bc8d4$exports = JSON.parse('{"alpha":"Alpha","blue":"\u85CD\u8272","brightness":"\u4EAE\u5EA6","green":"\u7DA0\u8272","hue":"\u8272\u76F8","lightness":"\u660E\u4EAE","red":"\u7D05\u8272","saturation":"\u98FD\u548C\u5EA6"}');
$7a451c0c6841e6b9$exports = {
  "ar-AE": $2d805fd52bb48883$exports,
  "bg-BG": $6c28468dc1df643c$exports,
  "cs-CZ": $807554f8230db0ed$exports,
  "da-DK": $7097f64386f1761c$exports,
  "de-DE": $bdd847d8beb08799$exports,
  "el-GR": $a53e00b683950971$exports,
  "en-US": $21cdd87e84f28d89$exports,
  "es-ES": $92fee9698e4d675a$exports,
  "et-EE": $7ea012e91a5ad3ee$exports,
  "fi-FI": $8460c13bb2d75345$exports,
  "fr-FR": $2a2d5dc14e680587$exports,
  "he-IL": $9a3f292371bb0589$exports,
  "hr-HR": $4742231a685fa068$exports,
  "hu-HU": $05e247fd2960981e$exports,
  "it-IT": $a67524a79ccbe190$exports,
  "ja-JP": $a9eefe9d6c8cb7d5$exports,
  "ko-KR": $4a6b836d4f1bfaba$exports,
  "lt-LT": $c950e4b1c482abde$exports,
  "lv-LV": $d10d6b60dc50b438$exports,
  "nb-NO": $371a732b2494f452$exports,
  "nl-NL": $6d042cae6243464b$exports,
  "pl-PL": $d9ab5c2611e0bcd3$exports,
  "pt-BR": $73f77c9902e29ca6$exports,
  "pt-PT": $4f461eb266a95c10$exports,
  "ro-RO": $dc46bea2f2597899$exports,
  "ru-RU": $622bbd6719cc95af$exports,
  "sk-SK": $4da03c1ecd9a9c7d$exports,
  "sl-SI": $edb6b2fe456ed4e8$exports,
  "sr-SP": $264cd81c52b30815$exports,
  "sv-SE": $6f80afde0270dda7$exports,
  "tr-TR": $23a92651c6957668$exports,
  "uk-UA": $0f9b1074d04f4954$exports,
  "zh-CN": $a9cedf75b94e4916$exports,
  "zh-TW": $37cff576474bc8d4$exports
};
var $799cddbef784668f$var$messages = new $70eee6030fd7c1a1$export$64839e615120df17($parcel$interopDefault2($7a451c0c6841e6b9$exports));
function $799cddbef784668f$export$6e865ea70d7724f(value) {
  let res = $799cddbef784668f$var$RGBColor.parse(value) || $799cddbef784668f$var$HSBColor.parse(value) || $799cddbef784668f$var$HSLColor.parse(value);
  if (res)
    return res;
  throw new Error("Invalid color value: " + value);
}
function $799cddbef784668f$export$4cde5df63f53f473(v) {
  if (typeof v === "string")
    return $799cddbef784668f$export$6e865ea70d7724f(v);
  else
    return v;
}
var $799cddbef784668f$var$Color = class {
  toHexInt() {
    return this.toFormat("rgb").toHexInt();
  }
  getChannelValue(channel) {
    if (channel in this)
      return this[channel];
    throw new Error("Unsupported color channel: " + channel);
  }
  withChannelValue(channel, value) {
    if (channel in this) {
      let x = this.clone();
      x[channel] = value;
      return x;
    }
    throw new Error("Unsupported color channel: " + channel);
  }
  getChannelName(channel, locale) {
    return $799cddbef784668f$var$messages.getStringForLocale(channel, locale);
  }
  getColorSpaceAxes(xyChannels) {
    let { xChannel, yChannel } = xyChannels;
    let xCh = xChannel || this.getColorChannels().find((c) => c !== yChannel);
    let yCh = yChannel || this.getColorChannels().find((c) => c !== xCh);
    let zCh = this.getColorChannels().find((c) => c !== xCh && c !== yCh);
    return {
      xChannel: xCh,
      yChannel: yCh,
      zChannel: zCh
    };
  }
};
var $799cddbef784668f$var$HEX_REGEX = /^#(?:([0-9a-f]{3})|([0-9a-f]{6}))$/i;
var $799cddbef784668f$var$RGB_REGEX = /rgb\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?)\)|rgba\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d(.\d+)?)\)/;
var $799cddbef784668f$var$RGBColor = class extends $799cddbef784668f$var$Color {
  static parse(value) {
    let m;
    if (m = value.match($799cddbef784668f$var$HEX_REGEX)) {
      if (m[1]) {
        let r = parseInt(m[1][0] + m[1][0], 16);
        let g = parseInt(m[1][1] + m[1][1], 16);
        let b = parseInt(m[1][2] + m[1][2], 16);
        return new $799cddbef784668f$var$RGBColor(r, g, b, 1);
      } else if (m[2]) {
        let r = parseInt(m[2][0] + m[2][1], 16);
        let g = parseInt(m[2][2] + m[2][3], 16);
        let b = parseInt(m[2][4] + m[2][5], 16);
        return new $799cddbef784668f$var$RGBColor(r, g, b, 1);
      }
    }
    if (m = value.match($799cddbef784668f$var$RGB_REGEX)) {
      var ref;
      const [r, g, b, a] = ((ref = m[1]) !== null && ref !== void 0 ? ref : m[2]).split(",").map((n) => Number(n.trim()));
      return new $799cddbef784668f$var$RGBColor($48d9f1d165180307$export$7d15b64cf5a3a4c4(r, 0, 255), $48d9f1d165180307$export$7d15b64cf5a3a4c4(g, 0, 255), $48d9f1d165180307$export$7d15b64cf5a3a4c4(b, 0, 255), $48d9f1d165180307$export$7d15b64cf5a3a4c4(a !== null && a !== void 0 ? a : 1, 0, 1));
    }
  }
  toString(format) {
    switch (format) {
      case "hex":
        return "#" + (this.red.toString(16).padStart(2, "0") + this.green.toString(16).padStart(2, "0") + this.blue.toString(16).padStart(2, "0")).toUpperCase();
      case "hexa":
        return "#" + (this.red.toString(16).padStart(2, "0") + this.green.toString(16).padStart(2, "0") + this.blue.toString(16).padStart(2, "0") + Math.round(this.alpha * 255).toString(16).padStart(2, "0")).toUpperCase();
      case "rgb":
        return `rgb(${this.red}, ${this.green}, ${this.blue})`;
      case "css":
      case "rgba":
        return `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;
      default:
        return this.toFormat(format).toString(format);
    }
  }
  toFormat(format) {
    switch (format) {
      case "hex":
      case "hexa":
      case "rgb":
      case "rgba":
        return this;
      case "hsb":
      case "hsba":
        return this.toHSB();
      case "hsl":
      case "hsla":
        return this.toHSL();
      default:
        throw new Error("Unsupported color conversion: rgb -> " + format);
    }
  }
  toHexInt() {
    return this.red << 16 | this.green << 8 | this.blue;
  }
  toHSB() {
    const red = this.red / 255;
    const green = this.green / 255;
    const blue = this.blue / 255;
    const min = Math.min(red, green, blue);
    const brightness = Math.max(red, green, blue);
    const chroma = brightness - min;
    const saturation = brightness === 0 ? 0 : chroma / brightness;
    let hue = 0;
    if (chroma !== 0) {
      switch (brightness) {
        case red:
          hue = (green - blue) / chroma + (green < blue ? 6 : 0);
          break;
        case green:
          hue = (blue - red) / chroma + 2;
          break;
        case blue:
          hue = (red - green) / chroma + 4;
          break;
      }
      hue /= 6;
    }
    return new $799cddbef784668f$var$HSBColor($48d9f1d165180307$export$b6268554fba451f(hue * 360, 2), $48d9f1d165180307$export$b6268554fba451f(saturation * 100, 2), $48d9f1d165180307$export$b6268554fba451f(brightness * 100, 2), this.alpha);
  }
  toHSL() {
    const red = this.red / 255;
    const green = this.green / 255;
    const blue = this.blue / 255;
    const min = Math.min(red, green, blue);
    const max = Math.max(red, green, blue);
    const lightness = (max + min) / 2;
    const chroma = max - min;
    let hue;
    let saturation;
    if (chroma === 0)
      hue = saturation = 0;
    else {
      saturation = chroma / (lightness < 0.5 ? max + min : 2 - max - min);
      switch (max) {
        case red:
          hue = (green - blue) / chroma + (green < blue ? 6 : 0);
          break;
        case green:
          hue = (blue - red) / chroma + 2;
          break;
        case blue:
          hue = (red - green) / chroma + 4;
          break;
      }
      hue /= 6;
    }
    return new $799cddbef784668f$var$HSLColor($48d9f1d165180307$export$b6268554fba451f(hue * 360, 2), $48d9f1d165180307$export$b6268554fba451f(saturation * 100, 2), $48d9f1d165180307$export$b6268554fba451f(lightness * 100, 2), this.alpha);
  }
  clone() {
    return new $799cddbef784668f$var$RGBColor(this.red, this.green, this.blue, this.alpha);
  }
  getChannelRange(channel) {
    switch (channel) {
      case "red":
      case "green":
      case "blue":
        return {
          minValue: 0,
          maxValue: 255,
          step: 1,
          pageSize: 17
        };
      case "alpha":
        return {
          minValue: 0,
          maxValue: 1,
          step: 0.01,
          pageSize: 0.1
        };
      default:
        throw new Error("Unknown color channel: " + channel);
    }
  }
  formatChannelValue(channel, locale) {
    let options;
    let value = this.getChannelValue(channel);
    switch (channel) {
      case "red":
      case "green":
      case "blue":
        options = {
          style: "decimal"
        };
        break;
      case "alpha":
        options = {
          style: "percent"
        };
        break;
      default:
        throw new Error("Unknown color channel: " + channel);
    }
    return new $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale, options).format(value);
  }
  getColorSpace() {
    return "rgb";
  }
  getColorChannels() {
    return $799cddbef784668f$var$RGBColor.colorChannels;
  }
  constructor(red, green, blue, alpha) {
    super();
    this.red = red;
    this.green = green;
    this.blue = blue;
    this.alpha = alpha;
  }
};
$799cddbef784668f$var$RGBColor.colorChannels = [
  "red",
  "green",
  "blue"
];
var $799cddbef784668f$var$HSB_REGEX = /hsb\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%)\)|hsba\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d(.\d+)?)\)/;
var $799cddbef784668f$var$HSBColor = class extends $799cddbef784668f$var$Color {
  static parse(value) {
    let m;
    if (m = value.match($799cddbef784668f$var$HSB_REGEX)) {
      var ref;
      const [h, s, b, a] = ((ref = m[1]) !== null && ref !== void 0 ? ref : m[2]).split(",").map((n) => Number(n.trim().replace("%", "")));
      return new $799cddbef784668f$var$HSBColor($799cddbef784668f$var$mod(h, 360), $48d9f1d165180307$export$7d15b64cf5a3a4c4(s, 0, 100), $48d9f1d165180307$export$7d15b64cf5a3a4c4(b, 0, 100), $48d9f1d165180307$export$7d15b64cf5a3a4c4(a !== null && a !== void 0 ? a : 1, 0, 1));
    }
  }
  toString(format) {
    switch (format) {
      case "css":
        return this.toHSL().toString("css");
      case "hex":
        return this.toRGB().toString("hex");
      case "hexa":
        return this.toRGB().toString("hexa");
      case "hsb":
        return `hsb(${this.hue}, ${$48d9f1d165180307$export$b6268554fba451f(this.saturation, 2)}%, ${$48d9f1d165180307$export$b6268554fba451f(this.brightness, 2)}%)`;
      case "hsba":
        return `hsba(${this.hue}, ${$48d9f1d165180307$export$b6268554fba451f(this.saturation, 2)}%, ${$48d9f1d165180307$export$b6268554fba451f(this.brightness, 2)}%, ${this.alpha})`;
      default:
        return this.toFormat(format).toString(format);
    }
  }
  toFormat(format) {
    switch (format) {
      case "hsb":
      case "hsba":
        return this;
      case "hsl":
      case "hsla":
        return this.toHSL();
      case "rgb":
      case "rgba":
        return this.toRGB();
      default:
        throw new Error("Unsupported color conversion: hsb -> " + format);
    }
  }
  toHSL() {
    let saturation = this.saturation / 100;
    let brightness = this.brightness / 100;
    let lightness = brightness * (1 - saturation / 2);
    saturation = lightness === 0 || lightness === 1 ? 0 : (brightness - lightness) / Math.min(lightness, 1 - lightness);
    return new $799cddbef784668f$var$HSLColor($48d9f1d165180307$export$b6268554fba451f(this.hue, 2), $48d9f1d165180307$export$b6268554fba451f(saturation * 100, 2), $48d9f1d165180307$export$b6268554fba451f(lightness * 100, 2), this.alpha);
  }
  toRGB() {
    let hue = this.hue;
    let saturation = this.saturation / 100;
    let brightness = this.brightness / 100;
    let fn = (n, k = (n + hue / 60) % 6) => brightness - saturation * brightness * Math.max(Math.min(k, 4 - k, 1), 0);
    return new $799cddbef784668f$var$RGBColor(Math.round(fn(5) * 255), Math.round(fn(3) * 255), Math.round(fn(1) * 255), this.alpha);
  }
  clone() {
    return new $799cddbef784668f$var$HSBColor(this.hue, this.saturation, this.brightness, this.alpha);
  }
  getChannelRange(channel) {
    switch (channel) {
      case "hue":
        return {
          minValue: 0,
          maxValue: 360,
          step: 1,
          pageSize: 15
        };
      case "saturation":
      case "brightness":
        return {
          minValue: 0,
          maxValue: 100,
          step: 1,
          pageSize: 10
        };
      case "alpha":
        return {
          minValue: 0,
          maxValue: 1,
          step: 0.01,
          pageSize: 0.1
        };
      default:
        throw new Error("Unknown color channel: " + channel);
    }
  }
  formatChannelValue(channel, locale) {
    let options;
    let value = this.getChannelValue(channel);
    switch (channel) {
      case "hue":
        options = {
          style: "unit",
          unit: "degree",
          unitDisplay: "narrow"
        };
        break;
      case "saturation":
      case "brightness":
        options = {
          style: "percent"
        };
        value /= 100;
        break;
      case "alpha":
        options = {
          style: "percent"
        };
        break;
      default:
        throw new Error("Unknown color channel: " + channel);
    }
    return new $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale, options).format(value);
  }
  getColorSpace() {
    return "hsb";
  }
  getColorChannels() {
    return $799cddbef784668f$var$HSBColor.colorChannels;
  }
  constructor(hue, saturation, brightness, alpha) {
    super();
    this.hue = hue;
    this.saturation = saturation;
    this.brightness = brightness;
    this.alpha = alpha;
  }
};
$799cddbef784668f$var$HSBColor.colorChannels = [
  "hue",
  "saturation",
  "brightness"
];
var $799cddbef784668f$var$HSL_REGEX = /hsl\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%)\)|hsla\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d(.\d+)?)\)/;
function $799cddbef784668f$var$mod(n, m) {
  return (n % m + m) % m;
}
var $799cddbef784668f$var$HSLColor = class extends $799cddbef784668f$var$Color {
  static parse(value) {
    let m;
    if (m = value.match($799cddbef784668f$var$HSL_REGEX)) {
      var ref;
      const [h, s, l, a] = ((ref = m[1]) !== null && ref !== void 0 ? ref : m[2]).split(",").map((n) => Number(n.trim().replace("%", "")));
      return new $799cddbef784668f$var$HSLColor($799cddbef784668f$var$mod(h, 360), $48d9f1d165180307$export$7d15b64cf5a3a4c4(s, 0, 100), $48d9f1d165180307$export$7d15b64cf5a3a4c4(l, 0, 100), $48d9f1d165180307$export$7d15b64cf5a3a4c4(a !== null && a !== void 0 ? a : 1, 0, 1));
    }
  }
  toString(format) {
    switch (format) {
      case "hex":
        return this.toRGB().toString("hex");
      case "hexa":
        return this.toRGB().toString("hexa");
      case "hsl":
        return `hsl(${this.hue}, ${$48d9f1d165180307$export$b6268554fba451f(this.saturation, 2)}%, ${$48d9f1d165180307$export$b6268554fba451f(this.lightness, 2)}%)`;
      case "css":
      case "hsla":
        return `hsla(${this.hue}, ${$48d9f1d165180307$export$b6268554fba451f(this.saturation, 2)}%, ${$48d9f1d165180307$export$b6268554fba451f(this.lightness, 2)}%, ${this.alpha})`;
      default:
        return this.toFormat(format).toString(format);
    }
  }
  toFormat(format) {
    switch (format) {
      case "hsl":
      case "hsla":
        return this;
      case "hsb":
      case "hsba":
        return this.toHSB();
      case "rgb":
      case "rgba":
        return this.toRGB();
      default:
        throw new Error("Unsupported color conversion: hsl -> " + format);
    }
  }
  toHSB() {
    let saturation = this.saturation / 100;
    let lightness = this.lightness / 100;
    let brightness = lightness + saturation * Math.min(lightness, 1 - lightness);
    saturation = brightness === 0 ? 0 : 2 * (1 - lightness / brightness);
    return new $799cddbef784668f$var$HSBColor($48d9f1d165180307$export$b6268554fba451f(this.hue, 2), $48d9f1d165180307$export$b6268554fba451f(saturation * 100, 2), $48d9f1d165180307$export$b6268554fba451f(brightness * 100, 2), this.alpha);
  }
  toRGB() {
    let hue = this.hue;
    let saturation = this.saturation / 100;
    let lightness = this.lightness / 100;
    let a = saturation * Math.min(lightness, 1 - lightness);
    let fn = (n, k = (n + hue / 30) % 12) => lightness - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    return new $799cddbef784668f$var$RGBColor(Math.round(fn(0) * 255), Math.round(fn(8) * 255), Math.round(fn(4) * 255), this.alpha);
  }
  clone() {
    return new $799cddbef784668f$var$HSLColor(this.hue, this.saturation, this.lightness, this.alpha);
  }
  getChannelRange(channel) {
    switch (channel) {
      case "hue":
        return {
          minValue: 0,
          maxValue: 360,
          step: 1,
          pageSize: 15
        };
      case "saturation":
      case "lightness":
        return {
          minValue: 0,
          maxValue: 100,
          step: 1,
          pageSize: 10
        };
      case "alpha":
        return {
          minValue: 0,
          maxValue: 1,
          step: 0.01,
          pageSize: 0.1
        };
      default:
        throw new Error("Unknown color channel: " + channel);
    }
  }
  formatChannelValue(channel, locale) {
    let options;
    let value = this.getChannelValue(channel);
    switch (channel) {
      case "hue":
        options = {
          style: "unit",
          unit: "degree",
          unitDisplay: "narrow"
        };
        break;
      case "saturation":
      case "lightness":
        options = {
          style: "percent"
        };
        value /= 100;
        break;
      case "alpha":
        options = {
          style: "percent"
        };
        break;
      default:
        throw new Error("Unknown color channel: " + channel);
    }
    return new $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale, options).format(value);
  }
  getColorSpace() {
    return "hsl";
  }
  getColorChannels() {
    return $799cddbef784668f$var$HSLColor.colorChannels;
  }
  constructor(hue, saturation, lightness, alpha) {
    super();
    this.hue = hue;
    this.saturation = saturation;
    this.lightness = lightness;
    this.alpha = alpha;
  }
};
$799cddbef784668f$var$HSLColor.colorChannels = [
  "hue",
  "saturation",
  "lightness"
];
var $6e14a98a7f67141d$exports = {};
$parcel$export2($6e14a98a7f67141d$exports, "useColorAreaState", () => $6e14a98a7f67141d$export$6df7f0e2cabc7eef);
var $6e14a98a7f67141d$var$DEFAULT_COLOR = $799cddbef784668f$export$6e865ea70d7724f("#ffffff");
function $6e14a98a7f67141d$export$6df7f0e2cabc7eef(props) {
  let { value: value1, defaultValue, xChannel, yChannel, onChange, onChangeEnd } = props;
  if (!value1 && !defaultValue)
    defaultValue = $6e14a98a7f67141d$var$DEFAULT_COLOR;
  let [color, setColor] = $bfee1151ccb0650f$export$40bfa8c7b0832715(value1 && $799cddbef784668f$export$4cde5df63f53f473(value1), defaultValue && $799cddbef784668f$export$4cde5df63f53f473(defaultValue), onChange);
  let valueRef = (0, import_react2.useRef)(color);
  valueRef.current = color;
  let channels = (0, import_react2.useMemo)(() => valueRef.current.getColorSpaceAxes({
    xChannel,
    yChannel
  }), [
    xChannel,
    yChannel
  ]);
  let xChannelRange = color.getChannelRange(channels.xChannel);
  let yChannelRange = color.getChannelRange(channels.yChannel);
  let { minValue: minValueX, maxValue: maxValueX, step: stepX, pageSize: pageSizeX } = xChannelRange;
  let { minValue: minValueY, maxValue: maxValueY, step: stepY, pageSize: pageSizeY } = yChannelRange;
  let [isDragging1, setDragging] = (0, import_react2.useState)(false);
  let isDraggingRef = (0, import_react2.useRef)(false).current;
  let xValue = color.getChannelValue(channels.xChannel);
  let yValue = color.getChannelValue(channels.yChannel);
  let setXValue = (v) => {
    if (v === xValue)
      return;
    valueRef.current = color.withChannelValue(channels.xChannel, v);
    setColor(valueRef.current);
  };
  let setYValue = (v) => {
    if (v === yValue)
      return;
    valueRef.current = color.withChannelValue(channels.yChannel, v);
    setColor(valueRef.current);
  };
  return {
    channels,
    xChannelStep: stepX,
    yChannelStep: stepY,
    xChannelPageStep: pageSizeX,
    yChannelPageStep: pageSizeY,
    value: color,
    setValue(value) {
      let c = $799cddbef784668f$export$4cde5df63f53f473(value);
      valueRef.current = c;
      setColor(c);
    },
    xValue,
    setXValue,
    yValue,
    setYValue,
    setColorFromPoint(x, y) {
      let newXValue = minValueX + $48d9f1d165180307$export$7d15b64cf5a3a4c4(x, 0, 1) * (maxValueX - minValueX);
      let newYValue = minValueY + (1 - $48d9f1d165180307$export$7d15b64cf5a3a4c4(y, 0, 1)) * (maxValueY - minValueY);
      let newColor;
      if (newXValue !== xValue) {
        newXValue = $48d9f1d165180307$export$cb6e0bb50bc19463(newXValue, minValueX, maxValueX, stepX);
        newColor = color.withChannelValue(channels.xChannel, newXValue);
      }
      if (newYValue !== yValue) {
        newYValue = $48d9f1d165180307$export$cb6e0bb50bc19463(newYValue, minValueY, maxValueY, stepY);
        newColor = (newColor || color).withChannelValue(channels.yChannel, newYValue);
      }
      if (newColor)
        setColor(newColor);
    },
    getThumbPosition() {
      let x = (xValue - minValueX) / (maxValueX - minValueX);
      let y = 1 - (yValue - minValueY) / (maxValueY - minValueY);
      return {
        x,
        y
      };
    },
    incrementX(stepSize) {
      setXValue(xValue + stepSize > maxValueX ? maxValueX : $48d9f1d165180307$export$cb6e0bb50bc19463(xValue + stepSize, minValueX, maxValueX, stepX));
    },
    incrementY(stepSize) {
      setYValue(yValue + stepSize > maxValueY ? maxValueY : $48d9f1d165180307$export$cb6e0bb50bc19463(yValue + stepSize, minValueY, maxValueY, stepY));
    },
    decrementX(stepSize) {
      setXValue($48d9f1d165180307$export$cb6e0bb50bc19463(xValue - stepSize, minValueX, maxValueX, stepX));
    },
    decrementY(stepSize) {
      setYValue($48d9f1d165180307$export$cb6e0bb50bc19463(yValue - stepSize, minValueY, maxValueY, stepY));
    },
    setDragging(isDragging) {
      let wasDragging = isDraggingRef;
      isDraggingRef = isDragging;
      if (onChangeEnd && !isDragging && wasDragging)
        onChangeEnd(valueRef.current);
      setDragging(isDragging);
    },
    isDragging: isDragging1,
    getDisplayColor() {
      return color.withChannelValue("alpha", 1);
    }
  };
}
var $25a25ac0d1624665$exports = {};
$parcel$export2($25a25ac0d1624665$exports, "useColorSliderState", () => $25a25ac0d1624665$export$57bc203e1c9c6d44);
function $25a25ac0d1624665$export$57bc203e1c9c6d44(props) {
  let _a = props, { channel, value: value1, defaultValue, onChange, locale } = _a, otherProps = __objRest(_a, ["channel", "value", "defaultValue", "onChange", "locale"]);
  if (value1 == null && defaultValue == null)
    throw new Error("useColorSliderState requires a value or defaultValue");
  let [color, setColor] = $bfee1151ccb0650f$export$40bfa8c7b0832715(value1 && $799cddbef784668f$export$4cde5df63f53f473(value1), defaultValue && $799cddbef784668f$export$4cde5df63f53f473(defaultValue), onChange);
  let sliderState = $28f99e3e86e6ec45$export$e5fda3247f5d67f9(__spreadProps(__spreadValues(__spreadValues({}, color.getChannelRange(channel)), otherProps), {
    numberFormatter: null,
    value: [
      color.getChannelValue(channel)
    ],
    onChange([v]) {
      setColor(color.withChannelValue(channel, v));
    },
    onChangeEnd([v]) {
      if (props.onChangeEnd)
        props.onChangeEnd(color.withChannelValue(channel, v));
    }
  }));
  let { step, pageSize } = color.getChannelRange(channel);
  return __spreadProps(__spreadValues({}, sliderState), {
    value: color,
    setValue(value) {
      setColor($799cddbef784668f$export$4cde5df63f53f473(value));
    },
    getDisplayColor() {
      switch (channel) {
        case "hue":
          return $799cddbef784668f$export$6e865ea70d7724f(`hsl(${color.getChannelValue("hue")}, 100%, 50%)`);
        case "lightness":
        case "brightness":
        case "saturation":
        case "red":
        case "green":
        case "blue":
          return color.withChannelValue("alpha", 1);
        case "alpha":
          return color;
        default:
          throw new Error("Unknown color channel: " + channel);
      }
    },
    getThumbValueLabel() {
      return color.formatChannelValue(channel, locale);
    },
    step,
    pageSize
  });
}
var $ee4262c74a467b07$exports = {};
$parcel$export2($ee4262c74a467b07$exports, "useColorWheelState", () => $ee4262c74a467b07$export$f4301076d9336137);
var $ee4262c74a467b07$var$DEFAULT_COLOR = $799cddbef784668f$export$6e865ea70d7724f("hsl(0, 100%, 50%)");
function $ee4262c74a467b07$var$roundToStep(value, step) {
  return Math.round(value / step) * step;
}
function $ee4262c74a467b07$var$mod(n, m) {
  return (n % m + m) % m;
}
function $ee4262c74a467b07$var$roundDown(v) {
  let r = Math.floor(v);
  if (r === v)
    return v - 1;
  else
    return r;
}
function $ee4262c74a467b07$var$degToRad(deg) {
  return deg * Math.PI / 180;
}
function $ee4262c74a467b07$var$radToDeg(rad) {
  return rad * 180 / Math.PI;
}
function $ee4262c74a467b07$var$angleToCartesian(angle, radius) {
  let rad = $ee4262c74a467b07$var$degToRad(360 - angle + 90);
  let x = Math.sin(rad) * radius;
  let y = Math.cos(rad) * radius;
  return {
    x,
    y
  };
}
function $ee4262c74a467b07$var$cartesianToAngle(x, y, radius) {
  let deg = $ee4262c74a467b07$var$radToDeg(Math.atan2(y / radius, x / radius));
  return (deg + 360) % 360;
}
function $ee4262c74a467b07$export$f4301076d9336137(props) {
  let { defaultValue, onChange, onChangeEnd } = props;
  if (!props.value && !defaultValue)
    defaultValue = $ee4262c74a467b07$var$DEFAULT_COLOR;
  let [value, setValue] = $bfee1151ccb0650f$export$40bfa8c7b0832715($799cddbef784668f$export$4cde5df63f53f473(props.value), $799cddbef784668f$export$4cde5df63f53f473(defaultValue), onChange);
  let valueRef = (0, import_react2.useRef)(value);
  valueRef.current = value;
  let channelRange = value.getChannelRange("hue");
  let { minValue: minValueX, maxValue: maxValueX, step, pageSize: pageStep } = channelRange;
  let [isDragging1, setDragging] = (0, import_react2.useState)(false);
  let isDraggingRef = (0, import_react2.useRef)(false).current;
  let hue = value.getChannelValue("hue");
  function setHue(v) {
    if (v > 360)
      v = 0;
    v = $ee4262c74a467b07$var$roundToStep($ee4262c74a467b07$var$mod(v, 360), step);
    if (hue !== v) {
      let color = value.withChannelValue("hue", v);
      valueRef.current = color;
      setValue(color);
    }
  }
  return {
    value,
    step,
    pageStep,
    setValue(v) {
      let color = $799cddbef784668f$export$4cde5df63f53f473(v);
      valueRef.current = color;
      setValue(color);
    },
    hue,
    setHue,
    setHueFromPoint(x, y, radius) {
      setHue($ee4262c74a467b07$var$cartesianToAngle(x, y, radius));
    },
    getThumbPosition(radius) {
      return $ee4262c74a467b07$var$angleToCartesian(value.getChannelValue("hue"), radius);
    },
    increment(stepSize = 1) {
      let s = Math.max(stepSize, step);
      let newValue = hue + s;
      if (newValue >= maxValueX)
        newValue = minValueX;
      setHue($ee4262c74a467b07$var$roundToStep($ee4262c74a467b07$var$mod(newValue, 360), s));
    },
    decrement(stepSize = 1) {
      let s = Math.max(stepSize, step);
      if (hue === 0)
        setHue($ee4262c74a467b07$var$roundDown(360 / s) * s);
      else
        setHue($ee4262c74a467b07$var$roundToStep($ee4262c74a467b07$var$mod(hue - s, 360), s));
    },
    setDragging(isDragging) {
      let wasDragging = isDraggingRef;
      isDraggingRef = isDragging;
      if (onChangeEnd && !isDragging && wasDragging)
        onChangeEnd(valueRef.current);
      setDragging(isDragging);
    },
    isDragging: isDragging1,
    getDisplayColor() {
      return value.toFormat("hsl").withChannelValue("saturation", 100).withChannelValue("lightness", 50);
    }
  };
}
var $b335ada08155d9c0$exports = {};
$parcel$export2($b335ada08155d9c0$exports, "useColorFieldState", () => $b335ada08155d9c0$export$d52a01683abdfcd6);
function $aa90ad8b2b1d015f$export$5aadd9c0606af5c2(value) {
  return (0, import_react2.useMemo)(() => {
    if (typeof value === "string")
      try {
        return $799cddbef784668f$export$6e865ea70d7724f(value);
      } catch (err) {
        return void 0;
      }
    return value;
  }, [
    value
  ]);
}
var $b335ada08155d9c0$var$MIN_COLOR = $799cddbef784668f$export$6e865ea70d7724f("#000000");
var $b335ada08155d9c0$var$MAX_COLOR = $799cddbef784668f$export$6e865ea70d7724f("#FFFFFF");
var $b335ada08155d9c0$var$MIN_COLOR_INT = $b335ada08155d9c0$var$MIN_COLOR.toHexInt();
var $b335ada08155d9c0$var$MAX_COLOR_INT = $b335ada08155d9c0$var$MAX_COLOR.toHexInt();
function $b335ada08155d9c0$export$d52a01683abdfcd6(props) {
  let { value: value1, defaultValue, onChange } = props;
  let { step } = $b335ada08155d9c0$var$MIN_COLOR.getChannelRange("red");
  let initialValue = $aa90ad8b2b1d015f$export$5aadd9c0606af5c2(value1);
  let initialDefaultValue = $aa90ad8b2b1d015f$export$5aadd9c0606af5c2(defaultValue);
  let [colorValue, setColorValue] = $bfee1151ccb0650f$export$40bfa8c7b0832715(initialValue, initialDefaultValue, onChange);
  let [inputValue, setInputValue] = (0, import_react2.useState)(() => (value1 || defaultValue) && colorValue ? colorValue.toString("hex") : "");
  let safelySetColorValue = (newColor) => {
    if (!colorValue || !newColor) {
      setColorValue(newColor);
      return;
    }
    if (newColor.toHexInt() !== colorValue.toHexInt()) {
      setColorValue(newColor);
      return;
    }
  };
  let prevValue = (0, import_react2.useRef)(colorValue);
  if (prevValue.current !== colorValue) {
    setInputValue(colorValue ? colorValue.toString("hex") : "");
    prevValue.current = colorValue;
  }
  let parsedValue = (0, import_react2.useMemo)(() => {
    let color;
    try {
      color = $799cddbef784668f$export$6e865ea70d7724f(inputValue.startsWith("#") ? inputValue : `#${inputValue}`);
    } catch (err) {
      color = null;
    }
    return color;
  }, [
    $799cddbef784668f$export$6e865ea70d7724f,
    inputValue
  ]);
  let parsed = (0, import_react2.useRef)(null);
  parsed.current = parsedValue;
  let commit = () => {
    if (!inputValue.length) {
      safelySetColorValue(null);
      setInputValue(value1 === void 0 ? "" : colorValue.toString("hex"));
      return;
    }
    if (parsed.current == null) {
      setInputValue(colorValue ? colorValue.toString("hex") : "");
      return;
    }
    safelySetColorValue(parsed.current);
    let newColorValue = "";
    if (colorValue)
      newColorValue = colorValue.toString("hex");
    setInputValue(newColorValue);
  };
  let increment = () => {
    let newValue = $b335ada08155d9c0$var$addColorValue(parsed.current, step);
    if (newValue === colorValue)
      setInputValue(newValue.toString("hex"));
    safelySetColorValue(newValue);
  };
  let decrement = () => {
    let newValue = $b335ada08155d9c0$var$addColorValue(parsed.current, -step);
    if (newValue === colorValue)
      setInputValue(newValue.toString("hex"));
    safelySetColorValue(newValue);
  };
  let incrementToMax = () => safelySetColorValue($b335ada08155d9c0$var$MAX_COLOR);
  let decrementToMin = () => safelySetColorValue($b335ada08155d9c0$var$MIN_COLOR);
  let validate = (value) => {
    var ref;
    return value === "" || !!((ref = value.match(/^#?[0-9a-f]{0,6}$/i)) === null || ref === void 0 ? void 0 : ref[0]);
  };
  return {
    validate,
    colorValue,
    inputValue,
    setInputValue,
    commit,
    increment,
    incrementToMax,
    decrement,
    decrementToMin
  };
}
function $b335ada08155d9c0$var$addColorValue(color, step) {
  let newColor = color ? color : $b335ada08155d9c0$var$MIN_COLOR;
  let colorInt = newColor.toHexInt();
  let clampInt = Math.min(Math.max(colorInt + step, $b335ada08155d9c0$var$MIN_COLOR_INT), $b335ada08155d9c0$var$MAX_COLOR_INT);
  if (clampInt !== colorInt) {
    let newColorString = `#${clampInt.toString(16).padStart(6, "0").toUpperCase()}`;
    newColor = $799cddbef784668f$export$6e865ea70d7724f(newColorString);
  }
  return newColor;
}

// node_modules/@react-spectrum/color/dist/module.js
init_module9();
init_module7();
init_module3();
function $parcel$interopDefault3(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export3(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $40046aa1a7ccb226$exports = {};
$parcel$export3($40046aa1a7ccb226$exports, "ColorArea", () => $40046aa1a7ccb226$export$b2103f68a961418e);
var $9d103974e3e19727$exports = {};
$parcel$export3($9d103974e3e19727$exports, "spectrum-ColorHandle", () => $9d103974e3e19727$export$cd9afaa621b6216f, (v) => $9d103974e3e19727$export$cd9afaa621b6216f = v);
$parcel$export3($9d103974e3e19727$exports, "is-focused", () => $9d103974e3e19727$export$e7dc768d35940237, (v) => $9d103974e3e19727$export$e7dc768d35940237 = v);
$parcel$export3($9d103974e3e19727$exports, "focus-ring", () => $9d103974e3e19727$export$f39a09f249340e2a, (v) => $9d103974e3e19727$export$f39a09f249340e2a = v);
$parcel$export3($9d103974e3e19727$exports, "is-disabled", () => $9d103974e3e19727$export$d35bc1e505d1ebbf, (v) => $9d103974e3e19727$export$d35bc1e505d1ebbf = v);
$parcel$export3($9d103974e3e19727$exports, "spectrum-ColorHandle-color", () => $9d103974e3e19727$export$afe4c366ed4e659c, (v) => $9d103974e3e19727$export$afe4c366ed4e659c = v);
var $9d103974e3e19727$export$cd9afaa621b6216f;
var $9d103974e3e19727$export$e7dc768d35940237;
var $9d103974e3e19727$export$f39a09f249340e2a;
var $9d103974e3e19727$export$d35bc1e505d1ebbf;
var $9d103974e3e19727$export$afe4c366ed4e659c;
$9d103974e3e19727$export$cd9afaa621b6216f = "spectrum-ColorHandle_5a9f41";
$9d103974e3e19727$export$e7dc768d35940237 = "is-focused_5a9f41";
$9d103974e3e19727$export$f39a09f249340e2a = "focus-ring_5a9f41";
$9d103974e3e19727$export$d35bc1e505d1ebbf = "is-disabled_5a9f41";
$9d103974e3e19727$export$afe4c366ed4e659c = "spectrum-ColorHandle-color_5a9f41";
var $f3cdcbdb4b87f010$exports = {};
$parcel$export3($f3cdcbdb4b87f010$exports, "spectrum-ColorLoupe", () => $f3cdcbdb4b87f010$export$88d6ed2576b21809, (v) => $f3cdcbdb4b87f010$export$88d6ed2576b21809 = v);
$parcel$export3($f3cdcbdb4b87f010$exports, "is-open", () => $f3cdcbdb4b87f010$export$a9781837241c946d, (v) => $f3cdcbdb4b87f010$export$a9781837241c946d = v);
$parcel$export3($f3cdcbdb4b87f010$exports, "spectrum-ColorLoupe-outer", () => $f3cdcbdb4b87f010$export$d6ad38291e8aca9c, (v) => $f3cdcbdb4b87f010$export$d6ad38291e8aca9c = v);
$parcel$export3($f3cdcbdb4b87f010$exports, "spectrum-ColorLoupe-inner-background", () => $f3cdcbdb4b87f010$export$397af82b48750fe5, (v) => $f3cdcbdb4b87f010$export$397af82b48750fe5 = v);
$parcel$export3($f3cdcbdb4b87f010$exports, "spectrum-ColorLoupe-inner-checker", () => $f3cdcbdb4b87f010$export$f9a2a02e0b271024, (v) => $f3cdcbdb4b87f010$export$f9a2a02e0b271024 = v);
var $f3cdcbdb4b87f010$export$88d6ed2576b21809;
var $f3cdcbdb4b87f010$export$a9781837241c946d;
var $f3cdcbdb4b87f010$export$d6ad38291e8aca9c;
var $f3cdcbdb4b87f010$export$397af82b48750fe5;
var $f3cdcbdb4b87f010$export$f9a2a02e0b271024;
$f3cdcbdb4b87f010$export$88d6ed2576b21809 = "spectrum-ColorLoupe_c818a8";
$f3cdcbdb4b87f010$export$a9781837241c946d = "is-open_c818a8";
$f3cdcbdb4b87f010$export$d6ad38291e8aca9c = "spectrum-ColorLoupe-outer_c818a8";
$f3cdcbdb4b87f010$export$397af82b48750fe5 = "spectrum-ColorLoupe-inner-background_c818a8";
$f3cdcbdb4b87f010$export$f9a2a02e0b271024 = "spectrum-ColorLoupe-inner-checker_c818a8";
function $3a90e89d07d7bbd5$export$a3cc47cee1c1ccc(props) {
  let _a = props, { value, isDisabled, isDragging, isFocused, children, className = "" } = _a, otherProps = __objRest(_a, ["value", "isDisabled", "isDragging", "isFocused", "children", "className"]);
  let patternId = $bdb11010cef70236$export$f680877a34711e37();
  let valueCSS = value.toString("css");
  return import_react3.default.createElement("div", __spreadValues({
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($9d103974e3e19727$exports), "spectrum-ColorHandle", {
      "is-focused": isFocused,
      "is-disabled": isDisabled
    }) + " " + className
  }, otherProps), import_react3.default.createElement("div", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($9d103974e3e19727$exports), "spectrum-ColorHandle-color"),
    style: {
      backgroundColor: valueCSS
    }
  }), import_react3.default.createElement("svg", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($f3cdcbdb4b87f010$exports), "spectrum-ColorLoupe", {
      "is-open": isDragging
    }),
    "aria-hidden": "true"
  }, import_react3.default.createElement("pattern", {
    id: patternId,
    x: "0",
    y: "0",
    width: "16",
    height: "16",
    patternUnits: "userSpaceOnUse"
  }, import_react3.default.createElement("rect", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($f3cdcbdb4b87f010$exports), "spectrum-ColorLoupe-inner-background"),
    x: "0",
    y: "0",
    width: "16",
    height: "16"
  }), import_react3.default.createElement("rect", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($f3cdcbdb4b87f010$exports), "spectrum-ColorLoupe-inner-checker"),
    x: "0",
    y: "0",
    width: "8",
    height: "8"
  }), import_react3.default.createElement("rect", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($f3cdcbdb4b87f010$exports), "spectrum-ColorLoupe-inner-checker"),
    x: "8",
    y: "8",
    width: "8",
    height: "8"
  })), import_react3.default.createElement("path", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($f3cdcbdb4b87f010$exports), "spectrum-ColorLoupe-inner"),
    d: "M25 1a24 24 0 0124 24c0 16.255-24 40-24 40S1 41.255 1 25A24 24 0 0125 1z",
    fill: `url(#${patternId})`
  }), import_react3.default.createElement("path", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($f3cdcbdb4b87f010$exports), "spectrum-ColorLoupe-inner"),
    d: "M25 1a24 24 0 0124 24c0 16.255-24 40-24 40S1 41.255 1 25A24 24 0 0125 1z",
    fill: valueCSS
  }), import_react3.default.createElement("path", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($f3cdcbdb4b87f010$exports), "spectrum-ColorLoupe-outer"),
    d: "M25 3A21.98 21.98 0 003 25c0 6.2 4 14.794 11.568 24.853A144.233 144.233 0 0025 62.132a144.085 144.085 0 0010.4-12.239C42.99 39.816 47 31.209 47 25A21.98 21.98 0 0025 3m0-2a24 24 0 0124 24c0 16.255-24 40-24 40S1 41.255 1 25A24 24 0 0125 1z"
  })), children);
}
var $7d12200010f0192e$exports = {};
$parcel$export3($7d12200010f0192e$exports, "spectrum-ColorArea", () => $7d12200010f0192e$export$bb6257a55a3c1efc, (v) => $7d12200010f0192e$export$bb6257a55a3c1efc = v);
$parcel$export3($7d12200010f0192e$exports, "is-focused", () => $7d12200010f0192e$export$e7dc768d35940237, (v) => $7d12200010f0192e$export$e7dc768d35940237 = v);
$parcel$export3($7d12200010f0192e$exports, "focus-ring", () => $7d12200010f0192e$export$f39a09f249340e2a, (v) => $7d12200010f0192e$export$f39a09f249340e2a = v);
$parcel$export3($7d12200010f0192e$exports, "spectrum-ColorArea-handle", () => $7d12200010f0192e$export$d8addbd273c4e00, (v) => $7d12200010f0192e$export$d8addbd273c4e00 = v);
$parcel$export3($7d12200010f0192e$exports, "is-disabled", () => $7d12200010f0192e$export$d35bc1e505d1ebbf, (v) => $7d12200010f0192e$export$d35bc1e505d1ebbf = v);
$parcel$export3($7d12200010f0192e$exports, "spectrum-ColorArea-gradient", () => $7d12200010f0192e$export$40686f4fcb8a9916, (v) => $7d12200010f0192e$export$40686f4fcb8a9916 = v);
$parcel$export3($7d12200010f0192e$exports, "spectrum-ColorArea-slider", () => $7d12200010f0192e$export$7d727cacaa7cea1e, (v) => $7d12200010f0192e$export$7d727cacaa7cea1e = v);
$parcel$export3($7d12200010f0192e$exports, "spectrum-ColorHandle-color", () => $7d12200010f0192e$export$afe4c366ed4e659c, (v) => $7d12200010f0192e$export$afe4c366ed4e659c = v);
var $7d12200010f0192e$export$bb6257a55a3c1efc;
var $7d12200010f0192e$export$e7dc768d35940237;
var $7d12200010f0192e$export$f39a09f249340e2a;
var $7d12200010f0192e$export$d8addbd273c4e00;
var $7d12200010f0192e$export$d35bc1e505d1ebbf;
var $7d12200010f0192e$export$40686f4fcb8a9916;
var $7d12200010f0192e$export$7d727cacaa7cea1e;
var $7d12200010f0192e$export$afe4c366ed4e659c;
$7d12200010f0192e$export$bb6257a55a3c1efc = "spectrum-ColorArea_35e2c0";
$7d12200010f0192e$export$e7dc768d35940237 = "is-focused_35e2c0";
$7d12200010f0192e$export$f39a09f249340e2a = "focus-ring_35e2c0";
$7d12200010f0192e$export$d8addbd273c4e00 = "spectrum-ColorArea-handle_35e2c0";
$7d12200010f0192e$export$d35bc1e505d1ebbf = "is-disabled_35e2c0";
$7d12200010f0192e$export$40686f4fcb8a9916 = "spectrum-ColorArea-gradient_35e2c0";
$7d12200010f0192e$export$7d727cacaa7cea1e = "spectrum-ColorArea-slider_35e2c0";
$7d12200010f0192e$export$afe4c366ed4e659c = "spectrum-ColorHandle-color_35e2c0";
function $40046aa1a7ccb226$var$ColorArea(props, ref) {
  props = $7167f8da3cce35e4$export$521c373ccc32c300(props);
  let { isDisabled } = props;
  let size = props.size && $380ed8f3903c3931$export$abc24f5b99744ea6(props.size);
  let { styleProps } = $380ed8f3903c3931$export$b8e6fb9d2dff3f41(props);
  let inputXRef = (0, import_react3.useRef)();
  let inputYRef = (0, import_react3.useRef)();
  let containerRef = $98e5a8ae0e6415af$export$96a734597687c040(ref, inputXRef);
  let state = $6e14a98a7f67141d$export$6df7f0e2cabc7eef(props);
  let { colorAreaProps, gradientProps, xInputProps, yInputProps, thumbProps } = $60bd7d6e45dcddfa$export$2f92a7a615a014f6(__spreadProps(__spreadValues({}, props), {
    inputXRef,
    inputYRef,
    containerRef
  }), state);
  let { focusProps, isFocusVisible } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  return import_react3.default.createElement("div", __spreadProps(__spreadValues({}, colorAreaProps), {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($7d12200010f0192e$exports), "spectrum-ColorArea", {
      "is-disabled": isDisabled
    }, styleProps.className),
    ref: containerRef,
    style: __spreadProps(__spreadValues(__spreadValues({}, colorAreaProps.style), styleProps.style), {
      width: size,
      height: size
    })
  }), import_react3.default.createElement("div", __spreadProps(__spreadValues({}, gradientProps), {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($7d12200010f0192e$exports), "spectrum-ColorArea-gradient")
  })), import_react3.default.createElement($3a90e89d07d7bbd5$export$a3cc47cee1c1ccc, __spreadValues({
    value: state.getDisplayColor(),
    isFocused: isFocusVisible,
    isDisabled,
    isDragging: state.isDragging,
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($7d12200010f0192e$exports), "spectrum-ColorArea-handle")
  }, thumbProps), import_react3.default.createElement("div", {
    role: "presentation"
  }, import_react3.default.createElement("input", __spreadProps(__spreadValues({
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($7d12200010f0192e$exports), "spectrum-ColorArea-slider")
  }, $3ef42575df84b30b$export$9d1611c77c2fe928(xInputProps, focusProps)), {
    ref: inputXRef
  })), import_react3.default.createElement("input", __spreadProps(__spreadValues({
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($7d12200010f0192e$exports), "spectrum-ColorArea-slider")
  }, $3ef42575df84b30b$export$9d1611c77c2fe928(yInputProps, focusProps)), {
    ref: inputYRef
  })))));
}
var $40046aa1a7ccb226$export$b2103f68a961418e = import_react3.default.forwardRef($40046aa1a7ccb226$var$ColorArea);
var $3aac1c27203f04b5$exports = {};
$parcel$export3($3aac1c27203f04b5$exports, "ColorWheel", () => $3aac1c27203f04b5$export$f80663f808113381);
var $f60625fffea2b12e$exports = {};
$parcel$export3($f60625fffea2b12e$exports, "spectrum-ColorWheel", () => $f60625fffea2b12e$export$b70a5ca28702fbc6, (v) => $f60625fffea2b12e$export$b70a5ca28702fbc6 = v);
$parcel$export3($f60625fffea2b12e$exports, "is-focused", () => $f60625fffea2b12e$export$e7dc768d35940237, (v) => $f60625fffea2b12e$export$e7dc768d35940237 = v);
$parcel$export3($f60625fffea2b12e$exports, "spectrum-ColorWheel-handle", () => $f60625fffea2b12e$export$4cd23920eb8ac056, (v) => $f60625fffea2b12e$export$4cd23920eb8ac056 = v);
$parcel$export3($f60625fffea2b12e$exports, "spectrum-ColorWheel-slider", () => $f60625fffea2b12e$export$f476ddda713d62b, (v) => $f60625fffea2b12e$export$f476ddda713d62b = v);
$parcel$export3($f60625fffea2b12e$exports, "is-disabled", () => $f60625fffea2b12e$export$d35bc1e505d1ebbf, (v) => $f60625fffea2b12e$export$d35bc1e505d1ebbf = v);
$parcel$export3($f60625fffea2b12e$exports, "is-dragged", () => $f60625fffea2b12e$export$8778c911bed6c759, (v) => $f60625fffea2b12e$export$8778c911bed6c759 = v);
$parcel$export3($f60625fffea2b12e$exports, "spectrum-ColorWheel-gradient", () => $f60625fffea2b12e$export$9afaa791d7500a9b, (v) => $f60625fffea2b12e$export$9afaa791d7500a9b = v);
$parcel$export3($f60625fffea2b12e$exports, "spectrum-ColorWheel-segment", () => $f60625fffea2b12e$export$ada9fbffdaa4f10, (v) => $f60625fffea2b12e$export$ada9fbffdaa4f10 = v);
var $f60625fffea2b12e$export$b70a5ca28702fbc6;
var $f60625fffea2b12e$export$e7dc768d35940237;
var $f60625fffea2b12e$export$4cd23920eb8ac056;
var $f60625fffea2b12e$export$f476ddda713d62b;
var $f60625fffea2b12e$export$d35bc1e505d1ebbf;
var $f60625fffea2b12e$export$8778c911bed6c759;
var $f60625fffea2b12e$export$9afaa791d7500a9b;
var $f60625fffea2b12e$export$ada9fbffdaa4f10;
$f60625fffea2b12e$export$b70a5ca28702fbc6 = "spectrum-ColorWheel_31462a";
$f60625fffea2b12e$export$e7dc768d35940237 = "is-focused_31462a";
$f60625fffea2b12e$export$4cd23920eb8ac056 = "spectrum-ColorWheel-handle_31462a";
$f60625fffea2b12e$export$f476ddda713d62b = "spectrum-ColorWheel-slider_31462a";
$f60625fffea2b12e$export$d35bc1e505d1ebbf = "is-disabled_31462a";
$f60625fffea2b12e$export$8778c911bed6c759 = "is-dragged_31462a";
$f60625fffea2b12e$export$9afaa791d7500a9b = "spectrum-ColorWheel-gradient_31462a";
$f60625fffea2b12e$export$ada9fbffdaa4f10 = "spectrum-ColorWheel-segment_31462a";
var $3aac1c27203f04b5$var$WHEEL_THICKNESS = 24;
function $3aac1c27203f04b5$var$ColorWheel(props, ref) {
  props = $7167f8da3cce35e4$export$521c373ccc32c300(props);
  let { isDisabled } = props;
  let size = props.size && $380ed8f3903c3931$export$abc24f5b99744ea6(props.size);
  let { styleProps } = $380ed8f3903c3931$export$b8e6fb9d2dff3f41(props);
  let inputRef = (0, import_react3.useRef)(null);
  let containerRef = $98e5a8ae0e6415af$export$96a734597687c040(ref, inputRef);
  let [wheelRadius, setWheelRadius] = (0, import_react3.useState)(null);
  let [wheelThickness, setWheelThickness] = (0, import_react3.useState)($3aac1c27203f04b5$var$WHEEL_THICKNESS);
  let resizeHandler = (0, import_react3.useCallback)(() => {
    if (containerRef.current) {
      setWheelRadius(containerRef.current.offsetWidth / 2);
      let thickness = window.getComputedStyle(containerRef.current).getPropertyValue("--spectrum-colorwheel-track-thickness");
      if (thickness)
        setWheelThickness(parseInt(thickness, 10));
    }
  }, [
    containerRef,
    setWheelRadius,
    setWheelThickness
  ]);
  (0, import_react3.useEffect)(() => {
    if (wheelRadius == null)
      resizeHandler();
  }, [
    wheelRadius,
    resizeHandler
  ]);
  $9daab02d461809db$export$683480f191c0e3ea({
    ref: containerRef,
    onResize: resizeHandler
  });
  let state = $ee4262c74a467b07$export$f4301076d9336137(props);
  let { trackProps, inputProps, thumbProps } = $b4a0a4fdc900495e$export$9064ff4e44b3729a(__spreadProps(__spreadValues({}, props), {
    innerRadius: wheelRadius - wheelThickness,
    outerRadius: wheelRadius
  }), state, inputRef);
  let { focusProps, isFocusVisible } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  return import_react3.default.createElement("div", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($f60625fffea2b12e$exports), "spectrum-ColorWheel", {
      "is-disabled": isDisabled
    }, styleProps.className),
    ref: containerRef,
    style: __spreadProps(__spreadValues({}, styleProps.style), {
      "width": size,
      "height": size
    })
  }, import_react3.default.createElement("div", __spreadProps(__spreadValues({}, trackProps), {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($f60625fffea2b12e$exports), "spectrum-ColorWheel-gradient")
  })), import_react3.default.createElement($3a90e89d07d7bbd5$export$a3cc47cee1c1ccc, __spreadValues({
    value: state.getDisplayColor(),
    isFocused: isFocusVisible,
    isDisabled,
    isDragging: state.isDragging,
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($f60625fffea2b12e$exports), "spectrum-ColorWheel-handle")
  }, thumbProps), import_react3.default.createElement("input", __spreadProps(__spreadValues(__spreadProps(__spreadValues({}, focusProps), {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($f60625fffea2b12e$exports), "spectrum-ColorWheel-slider")
  }), inputProps), {
    ref: inputRef
  }))));
}
var $3aac1c27203f04b5$export$f80663f808113381 = import_react3.default.forwardRef($3aac1c27203f04b5$var$ColorWheel);
var $3870e4ce67ed7ee1$exports = {};
$parcel$export3($3870e4ce67ed7ee1$exports, "ColorSlider", () => $3870e4ce67ed7ee1$export$44fd664bcca5b6fb);
var $670e80c7e5915fb5$exports = {};
$parcel$export3($670e80c7e5915fb5$exports, "spectrum-ColorSlider", () => $670e80c7e5915fb5$export$a5f8b0989b27a604, (v) => $670e80c7e5915fb5$export$a5f8b0989b27a604 = v);
$parcel$export3($670e80c7e5915fb5$exports, "is-focused", () => $670e80c7e5915fb5$export$e7dc768d35940237, (v) => $670e80c7e5915fb5$export$e7dc768d35940237 = v);
$parcel$export3($670e80c7e5915fb5$exports, "spectrum-ColorSlider-handle", () => $670e80c7e5915fb5$export$8c273ba92fabe1f1, (v) => $670e80c7e5915fb5$export$8c273ba92fabe1f1 = v);
$parcel$export3($670e80c7e5915fb5$exports, "spectrum-ColorSlider-slider", () => $670e80c7e5915fb5$export$2f08b72944af536, (v) => $670e80c7e5915fb5$export$2f08b72944af536 = v);
$parcel$export3($670e80c7e5915fb5$exports, "spectrum-ColorSlider-container--horizontal", () => $670e80c7e5915fb5$export$33e97914f6746614, (v) => $670e80c7e5915fb5$export$33e97914f6746614 = v);
$parcel$export3($670e80c7e5915fb5$exports, "spectrum-ColorSlider-container--vertical", () => $670e80c7e5915fb5$export$cd1c093289104c66, (v) => $670e80c7e5915fb5$export$cd1c093289104c66 = v);
$parcel$export3($670e80c7e5915fb5$exports, "is-disabled", () => $670e80c7e5915fb5$export$d35bc1e505d1ebbf, (v) => $670e80c7e5915fb5$export$d35bc1e505d1ebbf = v);
$parcel$export3($670e80c7e5915fb5$exports, "spectrum-ColorSlider--vertical", () => $670e80c7e5915fb5$export$83dcf61b398bfaf1, (v) => $670e80c7e5915fb5$export$83dcf61b398bfaf1 = v);
var $670e80c7e5915fb5$export$a5f8b0989b27a604;
var $670e80c7e5915fb5$export$e7dc768d35940237;
var $670e80c7e5915fb5$export$8c273ba92fabe1f1;
var $670e80c7e5915fb5$export$2f08b72944af536;
var $670e80c7e5915fb5$export$33e97914f6746614;
var $670e80c7e5915fb5$export$cd1c093289104c66;
var $670e80c7e5915fb5$export$d35bc1e505d1ebbf;
var $670e80c7e5915fb5$export$83dcf61b398bfaf1;
$670e80c7e5915fb5$export$a5f8b0989b27a604 = "spectrum-ColorSlider_a5bb06";
$670e80c7e5915fb5$export$e7dc768d35940237 = "is-focused_a5bb06";
$670e80c7e5915fb5$export$8c273ba92fabe1f1 = "spectrum-ColorSlider-handle_a5bb06";
$670e80c7e5915fb5$export$2f08b72944af536 = "spectrum-ColorSlider-slider_a5bb06";
$670e80c7e5915fb5$export$33e97914f6746614 = "spectrum-ColorSlider-container--horizontal_a5bb06";
$670e80c7e5915fb5$export$cd1c093289104c66 = "spectrum-ColorSlider-container--vertical_a5bb06";
$670e80c7e5915fb5$export$d35bc1e505d1ebbf = "is-disabled_a5bb06";
$670e80c7e5915fb5$export$83dcf61b398bfaf1 = "spectrum-ColorSlider--vertical_a5bb06";
function $3870e4ce67ed7ee1$var$ColorSlider(props, ref) {
  props = $7167f8da3cce35e4$export$521c373ccc32c300(props);
  let { isDisabled, channel, orientation, label, showValueLabel, "aria-label": ariaLabel } = props;
  let vertical = orientation === "vertical";
  let { styleProps } = $380ed8f3903c3931$export$b8e6fb9d2dff3f41(props);
  let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let inputRef = (0, import_react3.useRef)();
  let trackRef = (0, import_react3.useRef)();
  let domRef = $98e5a8ae0e6415af$export$96a734597687c040(ref, inputRef);
  let state = $25a25ac0d1624665$export$57bc203e1c9c6d44(__spreadProps(__spreadValues({}, props), {
    locale
  }));
  if (vertical && label) {
    ariaLabel = ariaLabel || (typeof label === "string" ? label : null);
    label = null;
  }
  if (label === void 0 && !ariaLabel && !props["aria-labelledby"] && !vertical)
    label = state.value.getChannelName(channel, locale);
  if (showValueLabel == null)
    showValueLabel = !!label;
  let { inputProps, thumbProps, trackProps, labelProps, outputProps } = $40af666d6c251e36$export$106b7a4e66508f66(__spreadProps(__spreadValues({}, props), {
    label,
    "aria-label": ariaLabel,
    trackRef,
    inputRef
  }), state);
  let { isFocusVisible } = $507fabe10e71c6fb$export$ffd9e5021c1fb2d6();
  let [isFocused, setIsFocused] = (0, import_react3.useState)(false);
  let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
    isDisabled,
    onFocusChange: setIsFocused
  });
  let alignLabel;
  if (vertical)
    alignLabel = "center";
  else if (label != null && showValueLabel)
    alignLabel = "space-between";
  else if (label != null)
    alignLabel = "flex-start";
  else if (showValueLabel)
    alignLabel = "flex-end";
  return import_react3.default.createElement("div", __spreadProps(__spreadValues({
    ref: domRef
  }, styleProps), {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($670e80c7e5915fb5$exports), {
      "spectrum-ColorSlider-container--horizontal": !vertical,
      "spectrum-ColorSlider-container--vertical": vertical
    })
  }), label && import_react3.default.createElement($884c64d19340d345$export$f51f4c4ede09e011, {
    direction: "row",
    justifyContent: alignLabel
  }, import_react3.default.createElement($00af9ba397a66f43$export$b04be29aa201d4f5, labelProps, label), showValueLabel && import_react3.default.createElement($00af9ba397a66f43$export$b04be29aa201d4f5, {
    elementType: "span"
  }, import_react3.default.createElement("output", outputProps, state.value.formatChannelValue(channel, locale)))), import_react3.default.createElement("div", __spreadProps(__spreadValues({}, trackProps), {
    ref: trackRef,
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($670e80c7e5915fb5$exports), "spectrum-ColorSlider", {
      "is-disabled": isDisabled,
      "spectrum-ColorSlider--vertical": vertical
    })
  }), import_react3.default.createElement($3a90e89d07d7bbd5$export$a3cc47cee1c1ccc, __spreadValues({
    value: state.getDisplayColor(),
    isFocused: isFocused && isFocusVisible,
    isDisabled,
    isDragging: state.isThumbDragging(0),
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($670e80c7e5915fb5$exports), "spectrum-ColorSlider-handle")
  }, thumbProps), import_react3.default.createElement("input", __spreadProps(__spreadValues(__spreadValues({}, inputProps), focusProps), {
    ref: inputRef,
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($670e80c7e5915fb5$exports), "spectrum-ColorSlider-slider")
  })))));
}
var $3870e4ce67ed7ee1$export$44fd664bcca5b6fb = import_react3.default.forwardRef($3870e4ce67ed7ee1$var$ColorSlider);
var $0077d47e004328f0$exports = {};
$parcel$export3($0077d47e004328f0$exports, "ColorField", () => $0077d47e004328f0$export$b865d4358897bb17);
var $9d47b39540b9e48a$exports = {};
$parcel$export3($9d47b39540b9e48a$exports, "react-spectrum-ColorField-input", () => $9d47b39540b9e48a$export$7d80c6630a750b1, (v) => $9d47b39540b9e48a$export$7d80c6630a750b1 = v);
var $9d47b39540b9e48a$export$7d80c6630a750b1;
$9d47b39540b9e48a$export$7d80c6630a750b1 = "react-spectrum-ColorField-input_7bde3a";
function $0077d47e004328f0$var$ColorField(props, ref) {
  props = $7167f8da3cce35e4$export$521c373ccc32c300(props);
  let _a = props, { value, defaultValue, onChange } = _a, otherProps = __objRest(_a, ["value", "defaultValue", "onChange"]);
  let state = $b335ada08155d9c0$export$d52a01683abdfcd6(props);
  let inputRef = (0, import_react3.useRef)();
  let { labelProps, inputProps } = $f6896b05b2ecad12$export$77e32ca575a28fdf(otherProps, state, inputRef);
  return import_react3.default.createElement($599adb75312e6492$export$d22444a338b6e3c2, __spreadProps(__spreadValues({}, otherProps), {
    ref,
    inputRef,
    labelProps,
    inputProps,
    inputClassName: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault3($9d47b39540b9e48a$exports), "react-spectrum-ColorField-input")
  }));
}
var $0077d47e004328f0$export$b865d4358897bb17 = import_react3.default.forwardRef($0077d47e004328f0$var$ColorField);
export {
  $40046aa1a7ccb226$export$b2103f68a961418e as ColorArea,
  $0077d47e004328f0$export$b865d4358897bb17 as ColorField,
  $3870e4ce67ed7ee1$export$44fd664bcca5b6fb as ColorSlider,
  $3aac1c27203f04b5$export$f80663f808113381 as ColorWheel
};
//# sourceMappingURL=@react-spectrum_color.js.map
