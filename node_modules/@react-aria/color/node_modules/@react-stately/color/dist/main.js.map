{"mappings":"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","sources":["packages/@react-stately/color/src/index.ts","packages/@react-stately/color/src/Color.ts","packages/@react-stately/color/intl/*.js","packages/@react-stately/color/intl/ar-AE.json","packages/@react-stately/color/intl/bg-BG.json","packages/@react-stately/color/intl/cs-CZ.json","packages/@react-stately/color/intl/da-DK.json","packages/@react-stately/color/intl/de-DE.json","packages/@react-stately/color/intl/el-GR.json","packages/@react-stately/color/intl/en-US.json","packages/@react-stately/color/intl/es-ES.json","packages/@react-stately/color/intl/et-EE.json","packages/@react-stately/color/intl/fi-FI.json","packages/@react-stately/color/intl/fr-FR.json","packages/@react-stately/color/intl/he-IL.json","packages/@react-stately/color/intl/hr-HR.json","packages/@react-stately/color/intl/hu-HU.json","packages/@react-stately/color/intl/it-IT.json","packages/@react-stately/color/intl/ja-JP.json","packages/@react-stately/color/intl/ko-KR.json","packages/@react-stately/color/intl/lt-LT.json","packages/@react-stately/color/intl/lv-LV.json","packages/@react-stately/color/intl/nb-NO.json","packages/@react-stately/color/intl/nl-NL.json","packages/@react-stately/color/intl/pl-PL.json","packages/@react-stately/color/intl/pt-BR.json","packages/@react-stately/color/intl/pt-PT.json","packages/@react-stately/color/intl/ro-RO.json","packages/@react-stately/color/intl/ru-RU.json","packages/@react-stately/color/intl/sk-SK.json","packages/@react-stately/color/intl/sl-SI.json","packages/@react-stately/color/intl/sr-SP.json","packages/@react-stately/color/intl/sv-SE.json","packages/@react-stately/color/intl/tr-TR.json","packages/@react-stately/color/intl/uk-UA.json","packages/@react-stately/color/intl/zh-CN.json","packages/@react-stately/color/intl/zh-TW.json","packages/@react-stately/color/src/useColorAreaState.ts","packages/@react-stately/color/src/useColorSliderState.ts","packages/@react-stately/color/src/useColorWheelState.ts","packages/@react-stately/color/src/useColorFieldState.ts","packages/@react-stately/color/src/useColor.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {parseColor} from './Color';\nexport * from './useColorAreaState';\nexport * from './useColorSliderState';\nexport * from './useColorWheelState';\nexport * from './useColorFieldState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, toFixedNumber} from '@react-stately/utils';\nimport {ColorAxes, ColorChannel, ColorChannelRange, ColorFormat, Color as IColor} from '@react-types/color';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {MessageDictionary} from '@internationalized/message';\nimport {NumberFormatter} from '@internationalized/number';\n\nconst messages = new MessageDictionary(intlMessages);\n\n/** Parses a color from a string value. Throws an error if the string could not be parsed. */\nexport function parseColor(value: string): IColor {\n  let res = RGBColor.parse(value) || HSBColor.parse(value) || HSLColor.parse(value);\n  if (res) {\n    return res;\n  }\n\n  throw new Error('Invalid color value: ' + value);\n}\n\nexport function normalizeColor(v: string | IColor) {\n  if (typeof v === 'string') {\n    return parseColor(v);\n  } else {\n    return v;\n  }\n}\n\nabstract class Color implements IColor {\n  abstract toFormat(format: ColorFormat): IColor;\n  abstract toString(format: ColorFormat | 'css'): string;\n  abstract clone(): IColor;\n  abstract getChannelRange(channel: ColorChannel): ColorChannelRange;\n  abstract formatChannelValue(channel: ColorChannel, locale: string): string;\n\n  toHexInt(): number {\n    return this.toFormat('rgb').toHexInt();\n  }\n\n  getChannelValue(channel: ColorChannel): number {\n    if (channel in this) {\n      return this[channel];\n    }\n\n    throw new Error('Unsupported color channel: ' + channel);\n  }\n\n  withChannelValue(channel: ColorChannel, value: number): IColor {\n    if (channel in this) {\n      let x = this.clone();\n      x[channel] = value;\n      return x;\n    }\n\n    throw new Error('Unsupported color channel: ' + channel);\n  }\n\n  getChannelName(channel: ColorChannel, locale: string) {\n    return messages.getStringForLocale(channel, locale);\n  }\n\n  abstract getColorSpace(): ColorFormat\n  getColorSpaceAxes(xyChannels: {xChannel?: ColorChannel, yChannel?: ColorChannel}): ColorAxes {\n    let {xChannel, yChannel} = xyChannels;\n    let xCh = xChannel || this.getColorChannels().find(c => c !== yChannel);\n    let yCh = yChannel || this.getColorChannels().find(c => c !== xCh);\n    let zCh = this.getColorChannels().find(c => c !== xCh && c !== yCh);\n\n    return {xChannel: xCh, yChannel: yCh, zChannel: zCh};\n  }\n  abstract getColorChannels(): [ColorChannel, ColorChannel, ColorChannel]\n}\n\nconst HEX_REGEX = /^#(?:([0-9a-f]{3})|([0-9a-f]{6}))$/i;\n\n// X = <negative/positive number with/without decimal places>\n// before/after a comma, 0 or more whitespaces are allowed\n// - rgb(X, X, X)\n// - rgba(X, X, X, X)\nconst RGB_REGEX = /rgb\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?)\\)|rgba\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d(.\\d+)?)\\)/;\n\nclass RGBColor extends Color {\n  constructor(private red: number, private green: number, private blue: number, private alpha: number) {\n    super();\n  }\n\n  static parse(value: string): RGBColor | void {\n    let m;\n    if ((m = value.match(HEX_REGEX))) {\n      if (m[1]) {\n        let r = parseInt(m[1][0] + m[1][0], 16);\n        let g = parseInt(m[1][1] + m[1][1], 16);\n        let b = parseInt(m[1][2] + m[1][2], 16);\n        return new RGBColor(r, g, b, 1);\n      } else if (m[2]) {\n        let r = parseInt(m[2][0] + m[2][1], 16);\n        let g = parseInt(m[2][2] + m[2][3], 16);\n        let b = parseInt(m[2][4] + m[2][5], 16);\n        return new RGBColor(r, g, b, 1);\n      }\n    }\n\n    if ((m = value.match(RGB_REGEX))) {\n      const [r, g, b, a] = (m[1] ?? m[2]).split(',').map(n => Number(n.trim()));\n      return new RGBColor(clamp(r, 0, 255), clamp(g, 0, 255), clamp(b, 0, 255), clamp(a ?? 1, 0, 1));\n    }\n  }\n\n  toString(format: ColorFormat | 'css') {\n    switch (format) {\n      case 'hex':\n        return '#' + (this.red.toString(16).padStart(2, '0') + this.green.toString(16).padStart(2, '0') + this.blue.toString(16).padStart(2, '0')).toUpperCase();\n      case 'hexa':\n        return '#' + (this.red.toString(16).padStart(2, '0') + this.green.toString(16).padStart(2, '0') + this.blue.toString(16).padStart(2, '0') + Math.round(this.alpha * 255).toString(16).padStart(2, '0')).toUpperCase();\n      case 'rgb':\n        return `rgb(${this.red}, ${this.green}, ${this.blue})`;\n      case 'css':\n      case 'rgba':\n        return `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;\n      default:\n        return this.toFormat(format).toString(format);\n    }\n  }\n\n  toFormat(format: ColorFormat): IColor {\n    switch (format) {\n      case 'hex':\n      case 'hexa':\n      case 'rgb':\n      case 'rgba':\n        return this;\n      case 'hsb':\n      case 'hsba':\n        return this.toHSB();\n      case 'hsl':\n      case 'hsla':\n        return this.toHSL();\n      default:\n        throw new Error('Unsupported color conversion: rgb -> ' + format);\n    }\n  }\n\n  toHexInt(): number {\n    return this.red << 16 | this.green << 8 | this.blue;\n  }\n\n  /**\n   * Converts an RGB color value to HSB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.\n   * @returns An HSBColor object.\n   */\n  private toHSB(): IColor {\n    const red = this.red / 255;\n    const green = this.green / 255;\n    const blue = this.blue / 255;\n    const min = Math.min(red, green, blue);\n    const brightness = Math.max(red, green, blue);\n    const chroma = brightness - min;\n    const saturation = brightness === 0 ? 0 : chroma / brightness;\n    let hue = 0; // achromatic\n\n    if (chroma !== 0) {\n      switch (brightness) {\n        case red:\n          hue = (green - blue) / chroma + (green < blue ? 6 : 0);\n          break;\n        case green:\n          hue = (blue - red) / chroma + 2;\n          break;\n        case blue:\n          hue = (red - green) / chroma + 4;\n          break;\n      }\n\n      hue /= 6;\n    }\n\n    return new HSBColor(\n      toFixedNumber(hue * 360, 2),\n      toFixedNumber(saturation * 100, 2),\n      toFixedNumber(brightness * 100, 2),\n      this.alpha\n    );\n  }\n\n  /**\n   * Converts an RGB color value to HSL.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.\n   * @returns An HSLColor object.\n   */\n  private toHSL(): IColor {\n    const red = this.red / 255;\n    const green = this.green / 255;\n    const blue = this.blue / 255;\n    const min = Math.min(red, green, blue);\n    const max = Math.max(red, green, blue);\n    const lightness = (max + min) / 2;\n    const chroma = max - min;\n    let hue: number;\n    let saturation: number;\n\n    if (chroma === 0) {\n      hue = saturation = 0; // achromatic\n    } else {\n      saturation = chroma / (lightness < .5 ? max + min : 2 - max - min);\n\n      switch (max) {\n        case red:\n          hue = (green - blue) / chroma + (green < blue ? 6 : 0);\n          break;\n        case green:\n          hue = (blue - red) / chroma + 2;\n          break;\n        case blue:\n          hue = (red - green) / chroma + 4;\n          break;\n      }\n\n      hue /= 6;\n    }\n\n    return new HSLColor(\n      toFixedNumber(hue * 360, 2),\n      toFixedNumber(saturation * 100, 2),\n      toFixedNumber(lightness * 100, 2),\n      this.alpha);\n  }\n\n  clone(): IColor {\n    return new RGBColor(this.red, this.green, this.blue, this.alpha);\n  }\n\n  getChannelRange(channel: ColorChannel): ColorChannelRange {\n    switch (channel) {\n      case 'red':\n      case 'green':\n      case 'blue':\n        return {minValue: 0x0, maxValue: 0xFF, step: 0x1, pageSize: 0x11};\n      case 'alpha':\n        return {minValue: 0, maxValue: 1, step: 0.01, pageSize: 0.1};\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n  }\n\n  formatChannelValue(channel: ColorChannel, locale: string) {\n    let options: Intl.NumberFormatOptions;\n    let value = this.getChannelValue(channel);\n    switch (channel) {\n      case 'red':\n      case 'green':\n      case 'blue':\n        options = {style: 'decimal'};\n        break;\n      case 'alpha':\n        options = {style: 'percent'};\n        break;\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n    return new NumberFormatter(locale, options).format(value);\n  }\n\n  getColorSpace(): ColorFormat {\n    return 'rgb';\n  }\n\n  private static colorChannels: [ColorChannel, ColorChannel, ColorChannel] = ['red', 'green', 'blue'];\n  getColorChannels(): [ColorChannel, ColorChannel, ColorChannel] {\n    return RGBColor.colorChannels;\n  }\n}\n\n// X = <negative/positive number with/without decimal places>\n// before/after a comma, 0 or more whitespaces are allowed\n// - hsb(X, X%, X%)\n// - hsba(X, X%, X%, X)\nconst HSB_REGEX = /hsb\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%)\\)|hsba\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d(.\\d+)?)\\)/;\n\nclass HSBColor extends Color {\n  constructor(private hue: number, private saturation: number, private brightness: number, private alpha: number) {\n    super();\n  }\n\n  static parse(value: string): HSBColor | void {\n    let m: RegExpMatchArray | void;\n    if ((m = value.match(HSB_REGEX))) {\n      const [h, s, b, a] = (m[1] ?? m[2]).split(',').map(n => Number(n.trim().replace('%', '')));\n      return new HSBColor(mod(h, 360), clamp(s, 0, 100), clamp(b, 0, 100), clamp(a ?? 1, 0, 1));\n    }\n  }\n\n  toString(format: ColorFormat | 'css') {\n    switch (format) {\n      case 'css':\n        return this.toHSL().toString('css');\n      case 'hex':\n        return this.toRGB().toString('hex');\n      case 'hexa':\n        return this.toRGB().toString('hexa');\n      case 'hsb':\n        return `hsb(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.brightness, 2)}%)`;\n      case 'hsba':\n        return `hsba(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.brightness, 2)}%, ${this.alpha})`;\n      default:\n        return this.toFormat(format).toString(format);\n    }\n  }\n\n  toFormat(format: ColorFormat): IColor {\n    switch (format) {\n      case 'hsb':\n      case 'hsba':\n        return this;\n      case 'hsl':\n      case 'hsla':\n        return this.toHSL();\n      case 'rgb':\n      case 'rgba':\n        return this.toRGB();\n      default:\n        throw new Error('Unsupported color conversion: hsb -> ' + format);\n    }\n  }\n\n  /**\n   * Converts a HSB color to HSL.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_HSL.\n   * @returns An HSLColor object.\n   */\n  private toHSL(): IColor {\n    let saturation = this.saturation / 100;\n    let brightness = this.brightness / 100;\n    let lightness = brightness * (1 - saturation / 2);\n    saturation = lightness === 0 || lightness === 1 ? 0 : (brightness - lightness) / Math.min(lightness, 1 - lightness);\n\n    return new HSLColor(\n      toFixedNumber(this.hue, 2),\n      toFixedNumber(saturation * 100, 2),\n        toFixedNumber(lightness * 100, 2),\n      this.alpha\n    );\n  }\n\n  /**\n   * Converts a HSV color value to RGB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB_alternative.\n   * @returns An RGBColor object.\n   */\n  private toRGB(): IColor {\n    let hue = this.hue;\n    let saturation = this.saturation / 100;\n    let brightness = this.brightness / 100;\n    let fn = (n: number, k = (n + hue / 60) % 6) => brightness - saturation * brightness * Math.max(Math.min(k, 4 - k, 1), 0);\n    return new RGBColor(\n      Math.round(fn(5) * 255),\n      Math.round(fn(3) * 255),\n      Math.round(fn(1) * 255),\n      this.alpha\n    );\n  }\n\n  clone(): IColor {\n    return new HSBColor(this.hue, this.saturation, this.brightness, this.alpha);\n  }\n\n  getChannelRange(channel: ColorChannel): ColorChannelRange {\n    switch (channel) {\n      case 'hue':\n        return {minValue: 0, maxValue: 360, step: 1, pageSize: 15};\n      case 'saturation':\n      case 'brightness':\n        return {minValue: 0, maxValue: 100, step: 1, pageSize: 10};\n      case 'alpha':\n        return {minValue: 0, maxValue: 1, step: 0.01, pageSize: 0.1};\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n  }\n\n  formatChannelValue(channel: ColorChannel, locale: string) {\n    let options: Intl.NumberFormatOptions;\n    let value = this.getChannelValue(channel);\n    switch (channel) {\n      case 'hue':\n        options = {style: 'unit', unit: 'degree', unitDisplay: 'narrow'};\n        break;\n      case 'saturation':\n      case 'brightness':\n        options = {style: 'percent'};\n        value /= 100;\n        break;\n      case 'alpha':\n        options = {style: 'percent'};\n        break;\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n    return new NumberFormatter(locale, options).format(value);\n  }\n\n  getColorSpace(): ColorFormat {\n    return 'hsb';\n  }\n\n  private static colorChannels: [ColorChannel, ColorChannel, ColorChannel] = ['hue', 'saturation', 'brightness'];\n  getColorChannels(): [ColorChannel, ColorChannel, ColorChannel] {\n    return HSBColor.colorChannels;\n  }\n}\n\n// X = <negative/positive number with/without decimal places>\n// before/after a comma, 0 or more whitespaces are allowed\n// - hsl(X, X%, X%)\n// - hsla(X, X%, X%, X)\nconst HSL_REGEX = /hsl\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%)\\)|hsla\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d(.\\d+)?)\\)/;\n\nfunction mod(n, m) {\n  return ((n % m) + m) % m;\n}\n\nclass HSLColor extends Color {\n  constructor(private hue: number, private saturation: number, private lightness: number, private alpha: number) {\n    super();\n  }\n\n  static parse(value: string): HSLColor | void {\n    let m: RegExpMatchArray | void;\n    if ((m = value.match(HSL_REGEX))) {\n      const [h, s, l, a] = (m[1] ?? m[2]).split(',').map(n => Number(n.trim().replace('%', '')));\n      return new HSLColor(mod(h, 360), clamp(s, 0, 100), clamp(l, 0, 100), clamp(a ?? 1, 0, 1));\n    }\n  }\n\n  toString(format: ColorFormat | 'css') {\n    switch (format) {\n      case 'hex':\n        return this.toRGB().toString('hex');\n      case 'hexa':\n        return this.toRGB().toString('hexa');\n      case 'hsl':\n        return `hsl(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.lightness, 2)}%)`;\n      case 'css':\n      case 'hsla':\n        return `hsla(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.lightness, 2)}%, ${this.alpha})`;\n      default:\n        return this.toFormat(format).toString(format);\n    }\n  }\n  toFormat(format: ColorFormat): IColor {\n    switch (format) {\n      case 'hsl':\n      case 'hsla':\n        return this;\n      case 'hsb':\n      case 'hsba':\n        return this.toHSB();\n      case 'rgb':\n      case 'rgba':\n        return this.toRGB();\n      default:\n        throw new Error('Unsupported color conversion: hsl -> ' + format);\n    }\n  }\n\n  /**\n   * Converts a HSL color to HSB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_HSV.\n   * @returns An HSBColor object.\n   */\n  private toHSB(): IColor {\n    let saturation = this.saturation / 100;\n    let lightness = this.lightness / 100;\n    let brightness = lightness + saturation * Math.min(lightness, 1 - lightness);\n    saturation = brightness === 0 ? 0 : 2 * (1 - lightness / brightness);\n    return new HSBColor(\n      toFixedNumber(this.hue, 2),\n      toFixedNumber(saturation * 100, 2),\n      toFixedNumber(brightness * 100, 2),\n      this.alpha\n    );\n  }\n\n  /**\n   * Converts a HSL color to RGB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative.\n   * @returns An RGBColor object.\n   */\n  private toRGB(): IColor {\n    let hue = this.hue;\n    let saturation = this.saturation / 100;\n    let lightness = this.lightness / 100;\n    let a = saturation * Math.min(lightness, 1 - lightness);\n    let fn = (n: number, k = (n + hue / 30) % 12) => lightness - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n    return new RGBColor(\n      Math.round(fn(0) * 255),\n      Math.round(fn(8) * 255),\n      Math.round(fn(4) * 255),\n      this.alpha\n    );\n  }\n\n  clone(): IColor {\n    return new HSLColor(this.hue, this.saturation, this.lightness, this.alpha);\n  }\n\n  getChannelRange(channel: ColorChannel): ColorChannelRange {\n    switch (channel) {\n      case 'hue':\n        return {minValue: 0, maxValue: 360, step: 1, pageSize: 15};\n      case 'saturation':\n      case 'lightness':\n        return {minValue: 0, maxValue: 100, step: 1, pageSize: 10};\n      case 'alpha':\n        return {minValue: 0, maxValue: 1, step: 0.01, pageSize: 0.1};\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n  }\n\n  formatChannelValue(channel: ColorChannel, locale: string) {\n    let options: Intl.NumberFormatOptions;\n    let value = this.getChannelValue(channel);\n    switch (channel) {\n      case 'hue':\n        options = {style: 'unit', unit: 'degree', unitDisplay: 'narrow'};\n        break;\n      case 'saturation':\n      case 'lightness':\n        options = {style: 'percent'};\n        value /= 100;\n        break;\n      case 'alpha':\n        options = {style: 'percent'};\n        break;\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n    return new NumberFormatter(locale, options).format(value);\n  }\n\n  getColorSpace(): ColorFormat {\n    return 'hsl';\n  }\n\n  private static colorChannels: [ColorChannel, ColorChannel, ColorChannel] = ['hue', 'saturation', 'lightness'];\n  getColorChannels(): [ColorChannel, ColorChannel, ColorChannel] {\n    return HSLColor.colorChannels;\n  }\n}\n","const _temp0 = require(\"./ar-AE.json\");\nconst _temp1 = require(\"./bg-BG.json\");\nconst _temp2 = require(\"./cs-CZ.json\");\nconst _temp3 = require(\"./da-DK.json\");\nconst _temp4 = require(\"./de-DE.json\");\nconst _temp5 = require(\"./el-GR.json\");\nconst _temp6 = require(\"./en-US.json\");\nconst _temp7 = require(\"./es-ES.json\");\nconst _temp8 = require(\"./et-EE.json\");\nconst _temp9 = require(\"./fi-FI.json\");\nconst _temp10 = require(\"./fr-FR.json\");\nconst _temp11 = require(\"./he-IL.json\");\nconst _temp12 = require(\"./hr-HR.json\");\nconst _temp13 = require(\"./hu-HU.json\");\nconst _temp14 = require(\"./it-IT.json\");\nconst _temp15 = require(\"./ja-JP.json\");\nconst _temp16 = require(\"./ko-KR.json\");\nconst _temp17 = require(\"./lt-LT.json\");\nconst _temp18 = require(\"./lv-LV.json\");\nconst _temp19 = require(\"./nb-NO.json\");\nconst _temp20 = require(\"./nl-NL.json\");\nconst _temp21 = require(\"./pl-PL.json\");\nconst _temp22 = require(\"./pt-BR.json\");\nconst _temp23 = require(\"./pt-PT.json\");\nconst _temp24 = require(\"./ro-RO.json\");\nconst _temp25 = require(\"./ru-RU.json\");\nconst _temp26 = require(\"./sk-SK.json\");\nconst _temp27 = require(\"./sl-SI.json\");\nconst _temp28 = require(\"./sr-SP.json\");\nconst _temp29 = require(\"./sv-SE.json\");\nconst _temp30 = require(\"./tr-TR.json\");\nconst _temp31 = require(\"./uk-UA.json\");\nconst _temp32 = require(\"./zh-CN.json\");\nconst _temp33 = require(\"./zh-TW.json\");\nmodule.exports = {\n  \"ar-AE\": _temp0,\n  \"bg-BG\": _temp1,\n  \"cs-CZ\": _temp2,\n  \"da-DK\": _temp3,\n  \"de-DE\": _temp4,\n  \"el-GR\": _temp5,\n  \"en-US\": _temp6,\n  \"es-ES\": _temp7,\n  \"et-EE\": _temp8,\n  \"fi-FI\": _temp9,\n  \"fr-FR\": _temp10,\n  \"he-IL\": _temp11,\n  \"hr-HR\": _temp12,\n  \"hu-HU\": _temp13,\n  \"it-IT\": _temp14,\n  \"ja-JP\": _temp15,\n  \"ko-KR\": _temp16,\n  \"lt-LT\": _temp17,\n  \"lv-LV\": _temp18,\n  \"nb-NO\": _temp19,\n  \"nl-NL\": _temp20,\n  \"pl-PL\": _temp21,\n  \"pt-BR\": _temp22,\n  \"pt-PT\": _temp23,\n  \"ro-RO\": _temp24,\n  \"ru-RU\": _temp25,\n  \"sk-SK\": _temp26,\n  \"sl-SI\": _temp27,\n  \"sr-SP\": _temp28,\n  \"sv-SE\": _temp29,\n  \"tr-TR\": _temp30,\n  \"uk-UA\": _temp31,\n  \"zh-CN\": _temp32,\n  \"zh-TW\": _temp33\n}","{\n  \"alpha\": \"ألفا\",\n  \"blue\": \"أزرق\",\n  \"brightness\": \"السطوع\",\n  \"green\": \"أخضر\",\n  \"hue\": \"درجة اللون\",\n  \"lightness\": \"الإضاءة\",\n  \"red\": \"أحمر\",\n  \"saturation\": \"التشبع\"\n}\n","{\n  \"alpha\": \"Алфа\",\n  \"blue\": \"Синьо\",\n  \"brightness\": \"Яркост\",\n  \"green\": \"Зелено\",\n  \"hue\": \"Оттенък\",\n  \"lightness\": \"Лекота\",\n  \"red\": \"Червено\",\n  \"saturation\": \"Наситеност\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Modrá\",\n  \"brightness\": \"Jas\",\n  \"green\": \"Zelená\",\n  \"hue\": \"Odstín\",\n  \"lightness\": \"Světlost\",\n  \"red\": \"Červená\",\n  \"saturation\": \"Sytost\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Blå\",\n  \"brightness\": \"Lysstyrke\",\n  \"green\": \"Grøn\",\n  \"hue\": \"Tone\",\n  \"lightness\": \"Lyshed\",\n  \"red\": \"Rød\",\n  \"saturation\": \"Farvemætning\"\n}\n","{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"Blau\",\n  \"brightness\": \"Helligkeit\",\n  \"green\": \"Grün\",\n  \"hue\": \"Farbton\",\n  \"lightness\": \"Leuchtkraft\",\n  \"red\": \"Rot\",\n  \"saturation\": \"Sättigung\"\n}\n","{\n  \"alpha\": \"Άλφα\",\n  \"blue\": \"Μπλε\",\n  \"brightness\": \"Φωτεινότητα\",\n  \"green\": \"Πράσινο\",\n  \"hue\": \"Τόνος\",\n  \"lightness\": \"Φωτεινότητα\",\n  \"red\": \"Κόκκινο\",\n  \"saturation\": \"Κορεσμός\"\n}\n","{\n  \"hue\": \"Hue\",\n  \"saturation\": \"Saturation\",\n  \"lightness\": \"Lightness\",\n  \"brightness\": \"Brightness\",\n  \"red\": \"Red\",\n  \"green\": \"Green\",\n  \"blue\": \"Blue\",\n  \"alpha\": \"Alpha\"\n}\n","{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"Azul\",\n  \"brightness\": \"Brillo\",\n  \"green\": \"Verde\",\n  \"hue\": \"Tono\",\n  \"lightness\": \"Luminosidad\",\n  \"red\": \"Rojo\",\n  \"saturation\": \"Saturación\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Sinine\",\n  \"brightness\": \"Heledus\",\n  \"green\": \"Roheline\",\n  \"hue\": \"Värv\",\n  \"lightness\": \"Valgus\",\n  \"red\": \"Punane\",\n  \"saturation\": \"Küllastus\"\n}\n","{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"Sininen\",\n  \"brightness\": \"Kirkkaus\",\n  \"green\": \"Vihreä\",\n  \"hue\": \"Sävy\",\n  \"lightness\": \"Valomäärä\",\n  \"red\": \"Punainen\",\n  \"saturation\": \"Värikylläisyys\"\n}\n","{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"Bleu\",\n  \"brightness\": \"Luminosité\",\n  \"green\": \"Vert\",\n  \"hue\": \"Teinte\",\n  \"lightness\": \"Luminosité\",\n  \"red\": \"Rouge\",\n  \"saturation\": \"Saturation\"\n}\n","{\n  \"alpha\": \"אלפא\",\n  \"blue\": \"כחול\",\n  \"brightness\": \"בהירות\",\n  \"green\": \"ירוק\",\n  \"hue\": \"גוון\",\n  \"lightness\": \"כמות אור\",\n  \"red\": \"אדום\",\n  \"saturation\": \"רוויה\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Plava\",\n  \"brightness\": \"Svjetlina\",\n  \"green\": \"Zelena\",\n  \"hue\": \"Nijansa\",\n  \"lightness\": \"Osvijetljenost\",\n  \"red\": \"Crvena\",\n  \"saturation\": \"Zasićenost\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Kék\",\n  \"brightness\": \"Fényesség\",\n  \"green\": \"Zöld\",\n  \"hue\": \"Színárnyalat\",\n  \"lightness\": \"Világosság\",\n  \"red\": \"Piros\",\n  \"saturation\": \"Telítettség\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Blu\",\n  \"brightness\": \"Luminosità\",\n  \"green\": \"Verde\",\n  \"hue\": \"Tonalità\",\n  \"lightness\": \"Luminosità\",\n  \"red\": \"Rosso\",\n  \"saturation\": \"Saturazione\"\n}\n","{\n  \"alpha\": \"アルファ\",\n  \"blue\": \"青\",\n  \"brightness\": \"明るさ\",\n  \"green\": \"緑\",\n  \"hue\": \"色相\",\n  \"lightness\": \"明度\",\n  \"red\": \"赤\",\n  \"saturation\": \"彩度\"\n}\n","{\n  \"alpha\": \"알파\",\n  \"blue\": \"파랑\",\n  \"brightness\": \"명도\",\n  \"green\": \"초록\",\n  \"hue\": \"색조\",\n  \"lightness\": \"밝기\",\n  \"red\": \"빨강\",\n  \"saturation\": \"채도\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Mėlyna\",\n  \"brightness\": \"Ryškumas\",\n  \"green\": \"Žalia\",\n  \"hue\": \"Atspalvis\",\n  \"lightness\": \"Šviesumas\",\n  \"red\": \"Raudona\",\n  \"saturation\": \"Įsotinimas\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Zila\",\n  \"brightness\": \"Spilgtums\",\n  \"green\": \"Zaļa\",\n  \"hue\": \"Nokrāsa\",\n  \"lightness\": \"Gaišums\",\n  \"red\": \"Sarkana\",\n  \"saturation\": \"Piesātinājums\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Blå\",\n  \"brightness\": \"Lysstyrke\",\n  \"green\": \"Grønn\",\n  \"hue\": \"Fargetone\",\n  \"lightness\": \"Lyshet\",\n  \"red\": \"Rød\",\n  \"saturation\": \"Metning\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Blauw\",\n  \"brightness\": \"Helderheid\",\n  \"green\": \"Groen\",\n  \"hue\": \"Kleurtoon\",\n  \"lightness\": \"Lichtsterkte\",\n  \"red\": \"Rood\",\n  \"saturation\": \"Verzadiging\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Niebieski\",\n  \"brightness\": \"Jasność\",\n  \"green\": \"Zielony\",\n  \"hue\": \"Odcień\",\n  \"lightness\": \"Jaskrawość\",\n  \"red\": \"Czerwony\",\n  \"saturation\": \"Nasycenie\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Azul\",\n  \"brightness\": \"Brilho\",\n  \"green\": \"Verde\",\n  \"hue\": \"Matiz\",\n  \"lightness\": \"Luminosidade\",\n  \"red\": \"Vermelho\",\n  \"saturation\": \"Saturação\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Azul\",\n  \"brightness\": \"Luminosidade\",\n  \"green\": \"Verde\",\n  \"hue\": \"Tonalidade\",\n  \"lightness\": \"Claridade\",\n  \"red\": \"Vermelho\",\n  \"saturation\": \"Saturação\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Albastru\",\n  \"brightness\": \"Luminozitate\",\n  \"green\": \"Verde\",\n  \"hue\": \"Nuanță\",\n  \"lightness\": \"Luminozitate\",\n  \"red\": \"Roșu\",\n  \"saturation\": \"Saturație\"\n}\n","{\n  \"alpha\": \"Альфа\",\n  \"blue\": \"Синий\",\n  \"brightness\": \"Яркость\",\n  \"green\": \"Зеленый\",\n  \"hue\": \"Оттенок\",\n  \"lightness\": \"Освещенность\",\n  \"red\": \"Красный\",\n  \"saturation\": \"Насыщенность\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Modrá\",\n  \"brightness\": \"Jas\",\n  \"green\": \"Zelená\",\n  \"hue\": \"Odtieň\",\n  \"lightness\": \"Svetlosť\",\n  \"red\": \"Červená\",\n  \"saturation\": \"Sýtosť\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Modra\",\n  \"brightness\": \"Svetlost\",\n  \"green\": \"Zelena\",\n  \"hue\": \"Barva\",\n  \"lightness\": \"Lahkost\",\n  \"red\": \"Rdeča\",\n  \"saturation\": \"Nasičenost\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Plava\",\n  \"brightness\": \"Osvetljenost\",\n  \"green\": \"Zelena\",\n  \"hue\": \"Nijansa\",\n  \"lightness\": \"Osvetljenje\",\n  \"red\": \"Crvena\",\n  \"saturation\": \"Zasićenje\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Blått\",\n  \"brightness\": \"Ljusstyrka\",\n  \"green\": \"Grönt\",\n  \"hue\": \"Nyans\",\n  \"lightness\": \"Ljushet\",\n  \"red\": \"Rött\",\n  \"saturation\": \"Mättnad\"\n}\n","{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Mavi\",\n  \"brightness\": \"Parlaklık\",\n  \"green\": \"Yeşil\",\n  \"hue\": \"Ton\",\n  \"lightness\": \"Canlılık\",\n  \"red\": \"Kırmızı\",\n  \"saturation\": \"Doygunluk\"\n}\n","{\n  \"alpha\": \"Альфа\",\n  \"blue\": \"Синій\",\n  \"brightness\": \"Яскравість\",\n  \"green\": \"Зелений\",\n  \"hue\": \"Тон\",\n  \"lightness\": \"Освітленість\",\n  \"red\": \"Червоний\",\n  \"saturation\": \"Насиченість\"\n}\n","{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"蓝色\",\n  \"brightness\": \"亮度\",\n  \"green\": \"绿色\",\n  \"hue\": \"色相\",\n  \"lightness\": \"明亮度\",\n  \"red\": \"红色\",\n  \"saturation\": \"饱和度\"\n}\n","{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"藍色\",\n  \"brightness\": \"亮度\",\n  \"green\": \"綠色\",\n  \"hue\": \"色相\",\n  \"lightness\": \"明亮\",\n  \"red\": \"紅色\",\n  \"saturation\": \"飽和度\"\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, snapValueToStep, useControlledState} from '@react-stately/utils';\nimport {Color, ColorAreaProps, ColorChannel} from '@react-types/color';\nimport {normalizeColor, parseColor} from './Color';\nimport {useMemo, useRef, useState} from 'react';\n\nexport interface ColorAreaState {\n  /** The current color value displayed by the color area. */\n  readonly value: Color,\n  /** Sets the current color value. If a string is passed, it will be parsed to a Color. */\n  setValue(value: string | Color): void,\n\n  /** The current value of the horizontal axis channel displayed by the color area. */\n  xValue: number,\n  /** Sets the value for the horizontal axis channel displayed by the color area, and triggers `onChange`. */\n  setXValue(value: number): void,\n\n  /** The current value of the vertical axis channel displayed by the color area. */\n  yValue: number,\n  /** Sets the value for the vertical axis channel displayed by the color area, and triggers `onChange`. */\n  setYValue(value: number): void,\n\n  /** Sets the x and y channels of the current color value based on a percentage of the width and height of the color area, and triggers `onChange`. */\n  setColorFromPoint(x: number, y: number): void,\n  /** Returns the coordinates of the thumb relative to the upper left corner of the color area as a percentage. */\n  getThumbPosition(): {x: number, y: number},\n\n  /** Increments the value of the horizontal axis channel by the channel step or page amount. */\n  incrementX(stepSize?: number): void,\n  /** Decrements the value of the horizontal axis channel by the channel step or page amount. */\n  decrementX(stepSize?: number): void,\n\n  /** Increments the value of the vertical axis channel by the channel step or page amount. */\n  incrementY(stepSize?: number): void,\n  /** Decrements the value of the vertical axis channel by the channel step or page amount. */\n  decrementY(stepSize?: number): void,\n\n  /** Whether the color area is currently being dragged. */\n  readonly isDragging: boolean,\n  /** Sets whether the color area is being dragged. */\n  setDragging(value: boolean): void,\n\n  /** Returns the xChannel, yChannel and zChannel names based on the color value. */\n  channels: {xChannel: ColorChannel, yChannel: ColorChannel, zChannel: ColorChannel},\n  xChannelStep: number,\n  yChannelStep: number,\n  xChannelPageStep: number,\n  yChannelPageStep: number,\n\n  /** Returns the color that should be displayed in the color area thumb instead of `value`. */\n  getDisplayColor(): Color\n}\n\nconst DEFAULT_COLOR = parseColor('#ffffff');\n/**\n * Provides state management for a color area component.\n * Color area allows users to adjust two channels of an HSL, HSB or RGB color value against a two-dimensional gradient background.\n */\nexport function useColorAreaState(props: ColorAreaProps): ColorAreaState {\n  let {\n    value,\n    defaultValue,\n    xChannel,\n    yChannel,\n    onChange,\n    onChangeEnd\n  } = props;\n\n  if (!value && !defaultValue) {\n    defaultValue = DEFAULT_COLOR;\n  }\n\n  let [color, setColor] = useControlledState(value && normalizeColor(value), defaultValue && normalizeColor(defaultValue), onChange);\n  let valueRef = useRef(color);\n  valueRef.current = color;\n\n  let channels = useMemo(() =>\n    valueRef.current.getColorSpaceAxes({xChannel, yChannel}),\n    [xChannel, yChannel]\n  );\n\n  let xChannelRange = color.getChannelRange(channels.xChannel);\n  let yChannelRange = color.getChannelRange(channels.yChannel);\n  let {minValue: minValueX, maxValue: maxValueX, step: stepX, pageSize: pageSizeX} = xChannelRange;\n  let {minValue: minValueY, maxValue: maxValueY, step: stepY, pageSize: pageSizeY} = yChannelRange;\n\n  let [isDragging, setDragging] = useState(false);\n  let isDraggingRef = useRef(false).current;\n\n  let xValue = color.getChannelValue(channels.xChannel);\n  let yValue = color.getChannelValue(channels.yChannel);\n  let setXValue = (v: number) => {\n    if (v === xValue) {\n      return;\n    }\n    valueRef.current = color.withChannelValue(channels.xChannel, v);\n    setColor(valueRef.current);\n  };\n  let setYValue = (v: number) => {\n    if (v === yValue) {\n      return;\n    }\n    valueRef.current = color.withChannelValue(channels.yChannel, v);\n    setColor(valueRef.current);\n  };\n\n  return {\n    channels,\n    xChannelStep: stepX,\n    yChannelStep: stepY,\n    xChannelPageStep: pageSizeX,\n    yChannelPageStep: pageSizeY,\n    value: color,\n    setValue(value) {\n      let c = normalizeColor(value);\n      valueRef.current = c;\n      setColor(c);\n    },\n    xValue,\n    setXValue,\n    yValue,\n    setYValue,\n    setColorFromPoint(x: number, y: number) {\n      let newXValue = minValueX + clamp(x, 0, 1) * (maxValueX - minValueX);\n      let newYValue = minValueY + (1 - clamp(y, 0, 1)) * (maxValueY - minValueY);\n      let newColor:Color;\n      if (newXValue !== xValue) {\n        // Round new value to multiple of step, clamp value between min and max\n        newXValue = snapValueToStep(newXValue, minValueX, maxValueX, stepX);\n        newColor = color.withChannelValue(channels.xChannel, newXValue);\n      }\n      if (newYValue !== yValue) {\n        // Round new value to multiple of step, clamp value between min and max\n        newYValue = snapValueToStep(newYValue, minValueY, maxValueY, stepY);\n        newColor = (newColor || color).withChannelValue(channels.yChannel, newYValue);\n      }\n      if (newColor) {\n        setColor(newColor);\n      }\n    },\n    getThumbPosition() {\n      let x = (xValue - minValueX) / (maxValueX - minValueX);\n      let y = 1 - (yValue - minValueY) / (maxValueY - minValueY);\n      return {x, y};\n    },\n    incrementX(stepSize) {\n      setXValue(xValue + stepSize > maxValueX ? maxValueX : snapValueToStep(xValue + stepSize, minValueX, maxValueX, stepX));\n    },\n    incrementY(stepSize) {\n      setYValue(yValue + stepSize > maxValueY ? maxValueY : snapValueToStep(yValue + stepSize, minValueY, maxValueY, stepY));\n    },\n    decrementX(stepSize) {\n      setXValue(snapValueToStep(xValue - stepSize, minValueX, maxValueX, stepX));\n    },\n    decrementY(stepSize) {\n      setYValue(snapValueToStep(yValue - stepSize, minValueY, maxValueY, stepY));\n    },\n    setDragging(isDragging) {\n      let wasDragging = isDraggingRef;\n      isDraggingRef = isDragging;\n\n      if (onChangeEnd && !isDragging && wasDragging) {\n        onChangeEnd(valueRef.current);\n      }\n\n      setDragging(isDragging);\n    },\n    isDragging,\n    getDisplayColor() {\n      return color.withChannelValue('alpha', 1);\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Color, ColorSliderProps} from '@react-types/color';\nimport {normalizeColor, parseColor} from './Color';\nimport {SliderState, useSliderState} from '@react-stately/slider';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface ColorSliderState extends SliderState {\n  /** The current color value represented by the color slider. */\n  readonly value: Color,\n  /** Sets the current color value. If a string is passed, it will be parsed to a Color. */\n  setValue(value: string | Color): void,\n  /** Returns the color that should be displayed in the slider instead of `value` or the optional parameter. */\n  getDisplayColor(): Color\n}\n\n\ninterface ColorSliderStateOptions extends ColorSliderProps {\n  /** The locale to use for formatting the color channel value. */\n  locale: string\n}\n\n/**\n * Provides state management for a color slider component.\n * Color sliders allow users to adjust an individual channel of a color value.\n */\nexport function useColorSliderState(props: ColorSliderStateOptions): ColorSliderState {\n  let {channel, value, defaultValue, onChange, locale, ...otherProps} = props;\n  if (value == null && defaultValue == null) {\n    throw new Error('useColorSliderState requires a value or defaultValue');\n  }\n\n  let [color, setColor] = useControlledState(value && normalizeColor(value), defaultValue && normalizeColor(defaultValue), onChange);\n  let sliderState = useSliderState({\n    ...color.getChannelRange(channel),\n    ...otherProps,\n    // Unused except in getThumbValueLabel, which is overridden below. null to appease TypeScript.\n    numberFormatter: null,\n    value: [color.getChannelValue(channel)],\n    onChange([v]) {\n      setColor(color.withChannelValue(channel, v));\n    },\n    onChangeEnd([v]) {\n      // onChange will have already been called with the right value, this is just to trigger onChangeEnd\n      if (props.onChangeEnd) {\n        props.onChangeEnd(color.withChannelValue(channel, v));\n      }\n    }\n  });\n\n  let {step, pageSize} = color.getChannelRange(channel);\n  return {\n    ...sliderState,\n    value: color,\n    setValue(value) {\n      setColor(normalizeColor(value));\n    },\n    getDisplayColor() {\n      switch (channel) {\n        case 'hue':\n          return parseColor(`hsl(${color.getChannelValue('hue')}, 100%, 50%)`);\n        case 'lightness':\n        case 'brightness':\n        case 'saturation':\n        case 'red':\n        case 'green':\n        case 'blue':\n          return color.withChannelValue('alpha', 1);\n        case 'alpha': {\n          return color;\n        }\n        default:\n          throw new Error('Unknown color channel: ' + channel);\n      }\n    },\n    getThumbValueLabel() {\n      return color.formatChannelValue(channel, locale);\n    },\n    step,\n    pageSize\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Color, ColorWheelProps} from '@react-types/color';\nimport {normalizeColor, parseColor} from './Color';\nimport {useControlledState} from '@react-stately/utils';\nimport {useRef, useState} from 'react';\n\nexport interface ColorWheelState {\n  /** The current color value represented by the color wheel. */\n  readonly value: Color,\n  /** Sets the color value represented by the color wheel, and triggers `onChange`. */\n  setValue(value: string | Color): void,\n\n  /** The current value of the hue channel displayed by the color wheel. */\n  readonly hue: number,\n  /** Sets the hue channel of the current color value and triggers `onChange`. */\n  setHue(value: number): void,\n\n  /** Sets the hue channel of the current color value based on the given coordinates and radius of the color wheel, and triggers `onChange`. */\n  setHueFromPoint(x: number, y: number, radius: number): void,\n  /** Returns the coordinates of the thumb relative to the center point of the color wheel. */\n  getThumbPosition(radius: number): {x: number, y: number},\n\n  /** Increments the hue by the given amount (defaults to 1). */\n  increment(stepSize?: number): void,\n  /** Decrements the hue by the given amount (defaults to 1). */\n  decrement(stepSize?: number): void,\n\n  /** Whether the color wheel is currently being dragged. */\n  readonly isDragging: boolean,\n  /** Sets whether the color wheel is being dragged. */\n  setDragging(value: boolean): void,\n  /** Returns the color that should be displayed in the color wheel instead of `value`. */\n  getDisplayColor(): Color,\n  step: number,\n  pageStep: number\n}\n\nconst DEFAULT_COLOR = parseColor('hsl(0, 100%, 50%)');\n\nfunction roundToStep(value: number, step: number): number {\n  return Math.round(value / step) * step;\n}\n\nfunction mod(n: number, m: number) {\n  return ((n % m) + m) % m;\n}\n\nfunction roundDown(v: number) {\n  let r = Math.floor(v);\n  if (r === v) {\n    return v - 1;\n  } else {\n    return r;\n  }\n}\n\nfunction degToRad(deg: number) {\n  return deg * Math.PI / 180;\n}\n\nfunction radToDeg(rad: number) {\n  return rad * 180 / Math.PI;\n}\n\n// 0deg = 3 o'clock. increases clockwise\nfunction angleToCartesian(angle: number, radius: number): {x: number, y: number} {\n  let rad = degToRad(360 - angle + 90);\n  let x = Math.sin(rad) * (radius);\n  let y = Math.cos(rad) * (radius);\n  return {x, y};\n}\n\nfunction cartesianToAngle(x: number, y: number, radius: number): number {\n  let deg = radToDeg(Math.atan2(y / radius, x / radius));\n  return (deg + 360) % 360;\n}\n\n/**\n * Provides state management for a color wheel component.\n * Color wheels allow users to adjust the hue of an HSL or HSB color value on a circular track.\n */\nexport function useColorWheelState(props: ColorWheelProps): ColorWheelState {\n  let {defaultValue, onChange, onChangeEnd} = props;\n\n  if (!props.value && !defaultValue) {\n    defaultValue = DEFAULT_COLOR;\n  }\n\n  let [value, setValue] = useControlledState(normalizeColor(props.value), normalizeColor(defaultValue), onChange);\n  let valueRef = useRef(value);\n  valueRef.current = value;\n\n  let channelRange = value.getChannelRange('hue');\n  let {minValue: minValueX, maxValue: maxValueX, step: step, pageSize: pageStep} = channelRange;\n  let [isDragging, setDragging] = useState(false);\n  let isDraggingRef = useRef(false).current;\n\n  let hue = value.getChannelValue('hue');\n  function setHue(v: number) {\n    if (v > 360) {\n      // Make sure you can always get back to 0.\n      v = 0;\n    }\n    v = roundToStep(mod(v, 360), step);\n    if (hue !== v) {\n      let color = value.withChannelValue('hue', v);\n      valueRef.current = color;\n      setValue(color);\n    }\n  }\n\n  return {\n    value,\n    step,\n    pageStep,\n    setValue(v) {\n      let color = normalizeColor(v);\n      valueRef.current = color;\n      setValue(color);\n    },\n    hue,\n    setHue,\n    setHueFromPoint(x, y, radius) {\n      setHue(cartesianToAngle(x, y, radius));\n    },\n    getThumbPosition(radius) {\n      return angleToCartesian(value.getChannelValue('hue'), radius);\n    },\n    increment(stepSize = 1) {\n      let s = Math.max(stepSize, step);\n      let newValue = hue + s;\n      if (newValue >= maxValueX) {\n        // Make sure you can always get back to 0.\n        newValue = minValueX;\n      }\n      setHue(roundToStep(mod(newValue, 360), s));\n    },\n    decrement(stepSize = 1) {\n      let s = Math.max(stepSize, step);\n      if (hue === 0) {\n        // We can't just subtract step because this might be the case:\n        // |(previous step) - 0| < step size\n        setHue(roundDown(360 / s) * s);\n      } else {\n        setHue(roundToStep(mod(hue - s, 360), s));\n      }\n    },\n    setDragging(isDragging) {\n      let wasDragging = isDraggingRef;\n      isDraggingRef = isDragging;\n\n      if (onChangeEnd && !isDragging && wasDragging) {\n        onChangeEnd(valueRef.current);\n      }\n\n      setDragging(isDragging);\n    },\n    isDragging,\n    getDisplayColor() {\n      return value.toFormat('hsl').withChannelValue('saturation', 100).withChannelValue('lightness', 50);\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Color, ColorFieldProps} from '@react-types/color';\nimport {parseColor} from './Color';\nimport {useColor} from './useColor';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useRef, useState} from 'react';\n\nexport interface ColorFieldState {\n  /**\n   * The current text value of the input. Updated as the user types,\n   * and formatted according to `formatOptions` on blur.\n   */\n  readonly inputValue: string,\n  /**\n   * The currently parsed color value, or null if the field is empty.\n   * Updated based on the `inputValue` as the user types.\n   */\n  readonly colorValue: Color,\n  /** Sets the current text value of the input. */\n  setInputValue(value: string): void,\n  /**\n   * Updates the input value based on the currently parsed color value.\n   * Typically this is called when the field is blurred.\n   */\n  commit(): void,\n  /** Increments the current input value to the next step boundary, and fires `onChange`. */\n  increment(): void,\n  /** Decrements the current input value to the next step boundary, and fires `onChange`. */\n  decrement(): void,\n  /** Sets the current value to the maximum color value, and fires `onChange`. */\n  incrementToMax(): void,\n  /** Sets the current value to the minimum color value, and fires `onChange`. */\n  decrementToMin(): void,\n  /**\n   * Validates a user input string.\n   * Values can be partially entered, and may be valid even if they cannot currently be parsed to a color.\n   * Can be used to implement validation as a user types.\n   */\n  validate(value: string): boolean\n}\n\nconst MIN_COLOR = parseColor('#000000');\nconst MAX_COLOR = parseColor('#FFFFFF');\nconst MIN_COLOR_INT = MIN_COLOR.toHexInt();\nconst MAX_COLOR_INT = MAX_COLOR.toHexInt();\n\n/**\n * Provides state management for a color field component. Color fields allow\n * users to enter and adjust a hex color value.\n */\nexport function useColorFieldState(\n  props: ColorFieldProps\n): ColorFieldState {\n  let {\n    value,\n    defaultValue,\n    onChange\n  } = props;\n  let {step} = MIN_COLOR.getChannelRange('red');\n\n  let initialValue = useColor(value);\n  let initialDefaultValue = useColor(defaultValue);\n  let [colorValue, setColorValue] = useControlledState<Color>(initialValue, initialDefaultValue, onChange);\n  let [inputValue, setInputValue] = useState(() => (value || defaultValue) && colorValue ? colorValue.toString('hex') : '');\n\n  let safelySetColorValue = (newColor: Color) => {\n    if (!colorValue || !newColor) {\n      setColorValue(newColor);\n      return;\n    }\n    if (newColor.toHexInt() !== colorValue.toHexInt()) {\n      setColorValue(newColor);\n      return;\n    }\n  };\n\n  let prevValue = useRef(colorValue);\n  if (prevValue.current !== colorValue) {\n    setInputValue(colorValue ? colorValue.toString('hex') : '');\n    prevValue.current = colorValue;\n  }\n\n\n  let parsedValue = useMemo(() => {\n    let color;\n    try {\n      color = parseColor(inputValue.startsWith('#') ? inputValue : `#${inputValue}`);\n    } catch (err) {\n      color = null;\n    }\n    return color;\n  }, [parseColor, inputValue]);\n  let parsed = useRef(null);\n  parsed.current = parsedValue;\n\n  let commit = () => {\n    // Set to empty state if input value is empty\n    if (!inputValue.length) {\n      safelySetColorValue(null);\n      setInputValue(value === undefined ? '' : colorValue.toString('hex'));\n      return;\n    }\n\n    // if it failed to parse, then reset input to formatted version of current number\n    if (parsed.current == null) {\n      setInputValue(colorValue ? colorValue.toString('hex') : '');\n      return;\n    }\n\n    safelySetColorValue(parsed.current);\n    // in a controlled state, the numberValue won't change, so we won't go back to our old input without help\n    let newColorValue = '';\n    if (colorValue) {\n      newColorValue = colorValue.toString('hex');\n    }\n    setInputValue(newColorValue);\n  };\n\n  let increment = () => {\n    let newValue = addColorValue(parsed.current, step);\n    // if we've arrived at the same value that was previously in the state, the\n    // input value should be updated to match\n    // ex type 4, press increment, highlight the number in the input, type 4 again, press increment\n    // you'd be at 5, then incrementing to 5 again, so no re-render would happen and 4 would be left in the input\n    if (newValue === colorValue) {\n      setInputValue(newValue.toString('hex'));\n    }\n    safelySetColorValue(newValue);\n  };\n  let decrement = () => {\n    let newValue = addColorValue(parsed.current, -step);\n    // if we've arrived at the same value that was previously in the state, the\n    // input value should be updated to match\n    // ex type 4, press increment, highlight the number in the input, type 4 again, press increment\n    // you'd be at 5, then incrementing to 5 again, so no re-render would happen and 4 would be left in the input\n    if (newValue === colorValue) {\n      setInputValue(newValue.toString('hex'));\n    }\n    safelySetColorValue(newValue);\n  };\n  let incrementToMax = () => safelySetColorValue(MAX_COLOR);\n  let decrementToMin = () => safelySetColorValue(MIN_COLOR);\n\n  let validate = (value: string) => value === '' || !!value.match(/^#?[0-9a-f]{0,6}$/i)?.[0];\n\n  return {\n    validate,\n    colorValue,\n    inputValue,\n    setInputValue,\n    commit,\n    increment,\n    incrementToMax,\n    decrement,\n    decrementToMin\n  };\n}\n\nfunction addColorValue(color: Color, step: number) {\n  let newColor = color ? color : MIN_COLOR;\n  let colorInt = newColor.toHexInt();\n\n  let clampInt = Math.min(Math.max(colorInt + step, MIN_COLOR_INT), MAX_COLOR_INT);\n  if (clampInt !== colorInt) {\n    let newColorString = `#${clampInt.toString(16).padStart(6, '0').toUpperCase()}`;\n    newColor = parseColor(newColorString);\n  }\n  return newColor;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Color} from '@react-types/color';\nimport {parseColor} from './Color';\nimport {useMemo} from 'react';\n\nexport function useColor(value: string | Color) {\n  return useMemo(() => {\n    if (typeof value === 'string') {\n      try {\n        return parseColor(value);\n      } catch (err) {\n        return undefined;\n      }\n    }\n    return value;\n  }, [value]);\n}\n"],"names":[],"version":3,"file":"main.js.map"}