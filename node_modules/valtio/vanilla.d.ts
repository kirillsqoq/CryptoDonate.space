declare type AsRef = {
    $$valtioRef: true;
};
export declare function ref<T extends object>(o: T): T & AsRef;
declare type Path = (string | symbol)[];
declare type Op = [op: 'set', path: Path, value: unknown, prevValue: unknown] | [op: 'delete', path: Path, prevValue: unknown] | [op: 'resolve', path: Path, value: unknown] | [op: 'reject', path: Path, error: unknown];
export declare function proxy<T extends object>(initialObject?: T): T;
export declare function getVersion(proxyObject: unknown): number | undefined;
export declare function subscribe<T extends object>(proxyObject: T, callback: (ops: Op[]) => void, notifyInSync?: boolean): () => void;
declare type AnyFunction = (...args: any[]) => any;
declare type Snapshot<T> = T extends AnyFunction ? T : T extends AsRef ? T : T extends Promise<infer V> ? Snapshot<V> : {
    readonly [K in keyof T]: Snapshot<T[K]>;
};
export declare function snapshot<T extends object>(proxyObject: T): Snapshot<T>;
export declare function getHandler<T extends object>(proxyObject: T): any;
export {};
