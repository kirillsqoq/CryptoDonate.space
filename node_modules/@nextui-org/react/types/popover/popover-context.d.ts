/// <reference types="react" />
export declare const PopoverProvider: import("react").Provider<{
    state: import("@react-stately/overlays").OverlayTriggerState;
    exited: boolean;
    overlayRef: import("react").RefObject<HTMLElement>;
    triggerRef: import("react").RefObject<HTMLElement>;
    placement: import("./utils").PopoverPlacement;
    disableAnimation: boolean;
    shouldCloseOnBlur: boolean;
    isDismissable: boolean;
    isKeyboardDismissDisabled: boolean;
    shouldCloseOnInteractOutside: ((element: HTMLElement) => boolean) | undefined;
    isOpen: boolean;
    onClose: () => void;
    onExited: () => void;
    onEntered: () => void;
    triggerProps: import("@react-types/button").AriaButtonProps<"button">;
    overlayProps: import("react").HTMLAttributes<HTMLElement>;
    positionProps: import("react").HTMLAttributes<Element>;
    getTriggerProps: (props?: any, _ref?: any) => any;
    getPopoverProps: (props?: any) => any;
}>, usePopoverContext: () => {
    state: import("@react-stately/overlays").OverlayTriggerState;
    exited: boolean;
    overlayRef: import("react").RefObject<HTMLElement>;
    triggerRef: import("react").RefObject<HTMLElement>;
    placement: import("./utils").PopoverPlacement;
    disableAnimation: boolean;
    shouldCloseOnBlur: boolean;
    isDismissable: boolean;
    isKeyboardDismissDisabled: boolean;
    shouldCloseOnInteractOutside: ((element: HTMLElement) => boolean) | undefined;
    isOpen: boolean;
    onClose: () => void;
    onExited: () => void;
    onEntered: () => void;
    triggerProps: import("@react-types/button").AriaButtonProps<"button">;
    overlayProps: import("react").HTMLAttributes<HTMLElement>;
    positionProps: import("react").HTMLAttributes<Element>;
    getTriggerProps: (props?: any, _ref?: any) => any;
    getPopoverProps: (props?: any) => any;
};
