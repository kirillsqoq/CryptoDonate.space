/// <reference types="react" />
import { CheckboxProps } from './checkbox';
export declare const mapPropsToReactAriaAttr: (checkboxProps: CheckboxProps) => {
    isIndeterminate: boolean;
    isDisabled: boolean;
    isReadOnly: boolean;
    isRequired: boolean;
    isSelected: boolean | undefined;
    defaultSelected: boolean;
    color: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "gradient";
    size: "xs" | "sm" | "md" | "lg" | "xl";
    label?: string | undefined;
    labelColor: "default" | "primary" | "secondary" | "success" | "warning" | "error";
    line: boolean;
    indeterminate: boolean;
    animated: boolean;
    rounded: boolean;
    required: boolean;
    disabled: boolean;
    checked?: boolean | undefined;
    initialChecked: boolean;
    readOnly: boolean;
    autoFocus: boolean;
    className: string;
    as?: keyof JSX.IntrinsicElements | undefined;
    children?: import("react").ReactNode;
    id?: string | undefined;
    value: string;
    onChange?: ((isSelected: boolean) => void) | undefined;
    'aria-controls'?: string | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    onFocus?: ((e: import("react").FocusEvent<Element, Element>) => void) | undefined;
    onBlur?: ((e: import("react").FocusEvent<Element, Element>) => void) | undefined;
    onKeyDown?: ((e: import("@react-types/shared/src/events").KeyboardEvent) => void) | undefined;
    onKeyUp?: ((e: import("@react-types/shared/src/events").KeyboardEvent) => void) | undefined;
    name?: string | undefined;
    onFocusChange?: ((isFocused: boolean) => void) | undefined;
    excludeFromTabOrder?: boolean | undefined;
    validationState?: import("@react-types/shared/src/inputs").ValidationState | undefined;
    form?: string | undefined;
    slot?: string | undefined;
    style?: import("react").CSSProperties | undefined;
    title?: string | undefined;
    translate?: "yes" | "no" | undefined;
    hidden?: boolean | undefined;
    dir?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
    contextMenu?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    lang?: string | undefined;
    placeholder?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    tabIndex?: number | undefined;
    radioGroup?: string | undefined;
    role?: import("react").AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: (boolean | "true" | "false") | undefined;
    'aria-autocomplete'?: "none" | "inline" | "both" | "list" | undefined;
    'aria-busy'?: (boolean | "true" | "false") | undefined;
    'aria-checked'?: boolean | "mixed" | "true" | "false" | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colspan'?: number | undefined;
    'aria-current'?: boolean | "time" | "page" | "true" | "false" | "step" | "location" | "date" | undefined;
    'aria-disabled'?: (boolean | "true" | "false") | undefined;
    'aria-dropeffect'?: "none" | "link" | "copy" | "move" | "execute" | "popup" | undefined;
    'aria-expanded'?: (boolean | "true" | "false") | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: (boolean | "true" | "false") | undefined;
    'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "true" | "false" | "tree" | undefined;
    'aria-hidden'?: (boolean | "true" | "false") | undefined;
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: (boolean | "true" | "false") | undefined;
    'aria-multiline'?: (boolean | "true" | "false") | undefined;
    'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
    'aria-orientation'?: "horizontal" | "vertical" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "mixed" | "true" | "false" | undefined;
    'aria-readonly'?: (boolean | "true" | "false") | undefined;
    'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    'aria-required'?: (boolean | "true" | "false") | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: (boolean | "true" | "false") | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: import("react").ClipboardEventHandler<unknown> | undefined;
    onCopyCapture?: import("react").ClipboardEventHandler<unknown> | undefined;
    onCut?: import("react").ClipboardEventHandler<unknown> | undefined;
    onCutCapture?: import("react").ClipboardEventHandler<unknown> | undefined;
    onPaste?: import("react").ClipboardEventHandler<unknown> | undefined;
    onPasteCapture?: import("react").ClipboardEventHandler<unknown> | undefined;
    onCompositionEnd?: import("react").CompositionEventHandler<unknown> | undefined;
    onCompositionEndCapture?: import("react").CompositionEventHandler<unknown> | undefined;
    onCompositionStart?: import("react").CompositionEventHandler<unknown> | undefined;
    onCompositionStartCapture?: import("react").CompositionEventHandler<unknown> | undefined;
    onCompositionUpdate?: import("react").CompositionEventHandler<unknown> | undefined;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<unknown> | undefined;
    onFocusCapture?: import("react").FocusEventHandler<unknown> | undefined;
    onBlurCapture?: import("react").FocusEventHandler<unknown> | undefined;
    onChangeCapture?: import("react").FormEventHandler<unknown> | undefined;
    onBeforeInput?: import("react").FormEventHandler<unknown> | undefined;
    onBeforeInputCapture?: import("react").FormEventHandler<unknown> | undefined;
    onInput?: import("react").FormEventHandler<unknown> | undefined;
    onInputCapture?: import("react").FormEventHandler<unknown> | undefined;
    onReset?: import("react").FormEventHandler<unknown> | undefined;
    onResetCapture?: import("react").FormEventHandler<unknown> | undefined;
    onSubmit?: import("react").FormEventHandler<unknown> | undefined;
    onSubmitCapture?: import("react").FormEventHandler<unknown> | undefined;
    onInvalid?: import("react").FormEventHandler<unknown> | undefined;
    onInvalidCapture?: import("react").FormEventHandler<unknown> | undefined;
    onLoad?: import("react").ReactEventHandler<unknown> | undefined;
    onLoadCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onError?: import("react").ReactEventHandler<unknown> | undefined;
    onErrorCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onKeyDownCapture?: import("react").KeyboardEventHandler<unknown> | undefined;
    onKeyPress?: import("react").KeyboardEventHandler<unknown> | undefined;
    onKeyPressCapture?: import("react").KeyboardEventHandler<unknown> | undefined;
    onKeyUpCapture?: import("react").KeyboardEventHandler<unknown> | undefined;
    onAbort?: import("react").ReactEventHandler<unknown> | undefined;
    onAbortCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onCanPlay?: import("react").ReactEventHandler<unknown> | undefined;
    onCanPlayCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onCanPlayThrough?: import("react").ReactEventHandler<unknown> | undefined;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onDurationChange?: import("react").ReactEventHandler<unknown> | undefined;
    onDurationChangeCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onEmptied?: import("react").ReactEventHandler<unknown> | undefined;
    onEmptiedCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onEncrypted?: import("react").ReactEventHandler<unknown> | undefined;
    onEncryptedCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onEnded?: import("react").ReactEventHandler<unknown> | undefined;
    onEndedCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onLoadedData?: import("react").ReactEventHandler<unknown> | undefined;
    onLoadedDataCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onLoadedMetadata?: import("react").ReactEventHandler<unknown> | undefined;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onLoadStart?: import("react").ReactEventHandler<unknown> | undefined;
    onLoadStartCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onPause?: import("react").ReactEventHandler<unknown> | undefined;
    onPauseCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onPlay?: import("react").ReactEventHandler<unknown> | undefined;
    onPlayCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onPlaying?: import("react").ReactEventHandler<unknown> | undefined;
    onPlayingCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onProgress?: import("react").ReactEventHandler<unknown> | undefined;
    onProgressCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onRateChange?: import("react").ReactEventHandler<unknown> | undefined;
    onRateChangeCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onSeeked?: import("react").ReactEventHandler<unknown> | undefined;
    onSeekedCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onSeeking?: import("react").ReactEventHandler<unknown> | undefined;
    onSeekingCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onStalled?: import("react").ReactEventHandler<unknown> | undefined;
    onStalledCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onSuspend?: import("react").ReactEventHandler<unknown> | undefined;
    onSuspendCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onTimeUpdate?: import("react").ReactEventHandler<unknown> | undefined;
    onTimeUpdateCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onVolumeChange?: import("react").ReactEventHandler<unknown> | undefined;
    onVolumeChangeCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onWaiting?: import("react").ReactEventHandler<unknown> | undefined;
    onWaitingCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onAuxClick?: import("react").MouseEventHandler<unknown> | undefined;
    onAuxClickCapture?: import("react").MouseEventHandler<unknown> | undefined;
    onClick?: import("react").MouseEventHandler<unknown> | undefined;
    onClickCapture?: import("react").MouseEventHandler<unknown> | undefined;
    onContextMenu?: import("react").MouseEventHandler<unknown> | undefined;
    onContextMenuCapture?: import("react").MouseEventHandler<unknown> | undefined;
    onDoubleClick?: import("react").MouseEventHandler<unknown> | undefined;
    onDoubleClickCapture?: import("react").MouseEventHandler<unknown> | undefined;
    onDrag?: import("react").DragEventHandler<unknown> | undefined;
    onDragCapture?: import("react").DragEventHandler<unknown> | undefined;
    onDragEnd?: import("react").DragEventHandler<unknown> | undefined;
    onDragEndCapture?: import("react").DragEventHandler<unknown> | undefined;
    onDragEnter?: import("react").DragEventHandler<unknown> | undefined;
    onDragEnterCapture?: import("react").DragEventHandler<unknown> | undefined;
    onDragExit?: import("react").DragEventHandler<unknown> | undefined;
    onDragExitCapture?: import("react").DragEventHandler<unknown> | undefined;
    onDragLeave?: import("react").DragEventHandler<unknown> | undefined;
    onDragLeaveCapture?: import("react").DragEventHandler<unknown> | undefined;
    onDragOver?: import("react").DragEventHandler<unknown> | undefined;
    onDragOverCapture?: import("react").DragEventHandler<unknown> | undefined;
    onDragStart?: import("react").DragEventHandler<unknown> | undefined;
    onDragStartCapture?: import("react").DragEventHandler<unknown> | undefined;
    onDrop?: import("react").DragEventHandler<unknown> | undefined;
    onDropCapture?: import("react").DragEventHandler<unknown> | undefined;
    onMouseDown?: import("react").MouseEventHandler<unknown> | undefined;
    onMouseDownCapture?: import("react").MouseEventHandler<unknown> | undefined;
    onMouseEnter?: import("react").MouseEventHandler<unknown> | undefined;
    onMouseLeave?: import("react").MouseEventHandler<unknown> | undefined;
    onMouseMove?: import("react").MouseEventHandler<unknown> | undefined;
    onMouseMoveCapture?: import("react").MouseEventHandler<unknown> | undefined;
    onMouseOut?: import("react").MouseEventHandler<unknown> | undefined;
    onMouseOutCapture?: import("react").MouseEventHandler<unknown> | undefined;
    onMouseOver?: import("react").MouseEventHandler<unknown> | undefined;
    onMouseOverCapture?: import("react").MouseEventHandler<unknown> | undefined;
    onMouseUp?: import("react").MouseEventHandler<unknown> | undefined;
    onMouseUpCapture?: import("react").MouseEventHandler<unknown> | undefined;
    onSelect?: import("react").ReactEventHandler<unknown> | undefined;
    onSelectCapture?: import("react").ReactEventHandler<unknown> | undefined;
    onTouchCancel?: import("react").TouchEventHandler<unknown> | undefined;
    onTouchCancelCapture?: import("react").TouchEventHandler<unknown> | undefined;
    onTouchEnd?: import("react").TouchEventHandler<unknown> | undefined;
    onTouchEndCapture?: import("react").TouchEventHandler<unknown> | undefined;
    onTouchMove?: import("react").TouchEventHandler<unknown> | undefined;
    onTouchMoveCapture?: import("react").TouchEventHandler<unknown> | undefined;
    onTouchStart?: import("react").TouchEventHandler<unknown> | undefined;
    onTouchStartCapture?: import("react").TouchEventHandler<unknown> | undefined;
    onPointerDown?: import("react").PointerEventHandler<unknown> | undefined;
    onPointerDownCapture?: import("react").PointerEventHandler<unknown> | undefined;
    onPointerMove?: import("react").PointerEventHandler<unknown> | undefined;
    onPointerMoveCapture?: import("react").PointerEventHandler<unknown> | undefined;
    onPointerUp?: import("react").PointerEventHandler<unknown> | undefined;
    onPointerUpCapture?: import("react").PointerEventHandler<unknown> | undefined;
    onPointerCancel?: import("react").PointerEventHandler<unknown> | undefined;
    onPointerCancelCapture?: import("react").PointerEventHandler<unknown> | undefined;
    onPointerEnter?: import("react").PointerEventHandler<unknown> | undefined;
    onPointerEnterCapture?: import("react").PointerEventHandler<unknown> | undefined;
    onPointerLeave?: import("react").PointerEventHandler<unknown> | undefined;
    onPointerLeaveCapture?: import("react").PointerEventHandler<unknown> | undefined;
    onPointerOver?: import("react").PointerEventHandler<unknown> | undefined;
    onPointerOverCapture?: import("react").PointerEventHandler<unknown> | undefined;
    onPointerOut?: import("react").PointerEventHandler<unknown> | undefined;
    onPointerOutCapture?: import("react").PointerEventHandler<unknown> | undefined;
    onGotPointerCapture?: import("react").PointerEventHandler<unknown> | undefined;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<unknown> | undefined;
    onLostPointerCapture?: import("react").PointerEventHandler<unknown> | undefined;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<unknown> | undefined;
    onScroll?: import("react").UIEventHandler<unknown> | undefined;
    onScrollCapture?: import("react").UIEventHandler<unknown> | undefined;
    onWheel?: import("react").WheelEventHandler<unknown> | undefined;
    onWheelCapture?: import("react").WheelEventHandler<unknown> | undefined;
    onAnimationStart?: import("react").AnimationEventHandler<unknown> | undefined;
    onAnimationStartCapture?: import("react").AnimationEventHandler<unknown> | undefined;
    onAnimationEnd?: import("react").AnimationEventHandler<unknown> | undefined;
    onAnimationEndCapture?: import("react").AnimationEventHandler<unknown> | undefined;
    onAnimationIteration?: import("react").AnimationEventHandler<unknown> | undefined;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<unknown> | undefined;
    onTransitionEnd?: import("react").TransitionEventHandler<unknown> | undefined;
    onTransitionEndCapture?: import("react").TransitionEventHandler<unknown> | undefined;
    htmlFor?: string | undefined;
    css?: import("..").CSS | undefined;
};
